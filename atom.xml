<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关凯丽的博客</title>
  <subtitle>前端打杂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://carryguan.com/"/>
  <updated>2017-08-07T14:39:34.000Z</updated>
  <id>http://carryguan.com/</id>
  
  <author>
    <name>Carry Guan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态生成dom事件失效</title>
    <link href="http://carryguan.com/2017/08/07/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90dom%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88/"/>
    <id>http://carryguan.com/2017/08/07/动态生成dom事件失效/</id>
    <published>2017-08-07T14:37:09.000Z</published>
    <updated>2017-08-07T14:39:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-6150a13b12b6623a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题来由&quot;&gt;&lt;a href=&quot;#问题来由&quot; class=&quot;headerlink&quot; title=&quot;问题来由&quot;&gt;&lt;/a&gt;问题来由&lt;/h2&gt;&lt;p&gt;最近在项目中有涉及到排序后回写按钮元素，按钮的事件失效。&lt;br&gt;这可以分为一类问题：重写元素/动态生成元素后，事件的失效。&lt;br&gt;想给每一行的 td&amp;gt;button添加点击事件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;td class=&amp;quot;action&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;button class=&amp;quot;mark&amp;quot; name=&amp;quot;ignore&amp;quot; &amp;gt; &amp;lt;/button&amp;gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给表格数据排序后，表格中的按钮事件失效。追溯了一下原因，排序后，初始化事件无法获取到button.&lt;br&gt;类似问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增加删除子节点&lt;/li&gt;
&lt;li&gt;表格排序后的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;原理是利用冒泡实现事件委托，也就是给生成节点的父节点预先绑定事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jq的解决办法：&quot;&gt;&lt;a href=&quot;#jq的解决办法：&quot; class=&quot;headerlink&quot; title=&quot;jq的解决办法：&quot;&gt;&lt;/a&gt;jq的解决办法：&lt;/h3&gt;&lt;p&gt;$(‘.tablesort’).on(‘click’,’.mark’,function () {})&lt;br&gt;这里提一下：&lt;br&gt;早期对页面上后期加载的动态元素,赋事件或值的时候,是使用live的.&lt;br&gt; 由于效率比较低(其实数据不多也感觉不出来),后面使用delegate委托来代替了,&lt;br&gt;再后面,1.7以后使用on 来代替delegate了. live,delegate在新版本中都还可以用&lt;br&gt;网上有很多教程是利用 $(‘.action .mark’).live(‘click’,function () {})，但是现在不建议使用&lt;br&gt;&lt;a href=&quot;http://www.jb51.net/article/105869.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;原生js&quot;&gt;&lt;a href=&quot;#原生js&quot; class=&quot;headerlink&quot; title=&quot;原生js&quot;&gt;&lt;/a&gt;原生js&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/88164e43d7b3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/88164e43d7b3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用这个事件对象给父节点绑定事件&lt;/li&gt;
&lt;li&gt;当事件触发的时候判断事件源对象是否是按钮&lt;/li&gt;
&lt;li&gt;如果是按钮的话再执行事件行为&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-6150a13b12b6623a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
    
    </summary>
    
    
      <category term="dom" scheme="http://carryguan.com/tags/dom/"/>
    
      <category term="事件" scheme="http://carryguan.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="动态dom" scheme="http://carryguan.com/tags/%E5%8A%A8%E6%80%81dom/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://carryguan.com/2017/04/27/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://carryguan.com/2017/04/27/git常用命令/</id>
    <published>2017-04-27T14:28:33.000Z</published>
    <updated>2017-08-07T14:34:33.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c62584774ba542.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A7BB8518D944E893213CFB6274266A8D.JPG&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;git-流程&quot;&gt;&lt;a href=&quot;#git-流程&quot; class=&quot;headerlink&quot; title=&quot;git 流程&quot;&gt;&lt;/a&gt;git 流程&lt;/h1&gt;&lt;p&gt;git status&lt;br&gt;git add .&lt;br&gt;git commit&lt;br&gt;git pull&lt;br&gt;git push origin branchName:refs/for/branchName&lt;br&gt;git pull&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;create-branch&quot;&gt;&lt;a href=&quot;#create-branch&quot; class=&quot;headerlink&quot; title=&quot;create branch&quot;&gt;&lt;/a&gt;create branch&lt;/h1&gt;&lt;p&gt;git checkout -b featureOne&lt;br&gt;git push —set-upstream origin featureOne&lt;br&gt;git add .&lt;br&gt;git commit -m ‘msg’&lt;br&gt;git pull&lt;br&gt;git push origin featureOne:refs/for/featureOne&lt;br&gt;git pull&lt;/p&gt;
&lt;h1 id=&quot;merge-to-master&quot;&gt;&lt;a href=&quot;#merge-to-master&quot; class=&quot;headerlink&quot; title=&quot;merge to master&quot;&gt;&lt;/a&gt;merge to master&lt;/h1&gt;&lt;p&gt;git checkout master&lt;br&gt;git merge featureOne&lt;br&gt;git add .&lt;br&gt;git commit -m ‘merge’&lt;br&gt;git pull&lt;br&gt;git push origin master:refs/for/master&lt;br&gt;git pull&lt;/p&gt;
&lt;p&gt;done&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c62584774ba542.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A7BB8518D944E893213CFB6274266A8D.JPG&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;git-流程&quot;&gt;&lt;a href=&quot;#git-流程&quot; class=&quot;headerlink&quot; title=&quot;git 流程&quot;&gt;&lt;/a&gt;git 流程&lt;/h1&gt;&lt;p&gt;git status&lt;br&gt;git add .&lt;br&gt;git commit&lt;br&gt;git pull&lt;br&gt;git push origin branchName:refs/for/branchName&lt;br&gt;git pull&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://carryguan.com/tags/git/"/>
    
      <category term="工作开发" scheme="http://carryguan.com/tags/%E5%B7%A5%E4%BD%9C%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验</title>
    <link href="http://carryguan.com/2017/03/20/os/"/>
    <id>http://carryguan.com/2017/03/20/os/</id>
    <published>2017-03-20T14:34:54.000Z</published>
    <updated>2017-03-20T14:41:20.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;操作系统实验总结&quot;&gt;&lt;a href=&quot;#操作系统实验总结&quot; class=&quot;headerlink&quot; title=&quot;操作系统实验总结&quot;&gt;&lt;/a&gt;操作系统实验总结&lt;/h1&gt;&lt;h2 id=&quot;实验源码&quot;&gt;&lt;a href=&quot;#实验源码&quot; class=&quot;headerlink&quot; title=&quot;实验源码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实验一 进程控制 processProject &lt;/li&gt;
&lt;li&gt;实验二  分页式存储管理 changeAdress&lt;/li&gt;
&lt;li&gt;实验三 页面置换算法 pageDispatch&lt;/li&gt;
&lt;li&gt;实验四  进程调度算法 dispachPro&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验一：进程调度-processProject&quot;&gt;&lt;a href=&quot;#实验一：进程调度-processProject&quot; class=&quot;headerlink&quot; title=&quot;实验一：进程调度 processProject&quot;&gt;&lt;/a&gt;实验一：进程调度 processProject&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b6aaedeba9ad2a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实验过程：&quot;&gt;&lt;a href=&quot;#实验过程：&quot; class=&quot;headerlink&quot; title=&quot;实验过程：&quot;&gt;&lt;/a&gt;实验过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义数据结构pcb和相应的队列（入，出，显示）操作&lt;/li&gt;
&lt;li&gt;编写函数：&lt;pre&gt;&lt;code&gt;创建进程（-就绪），
进程调度（就绪-执行），
进程阻塞（执行-阻塞），
进程激活（阻塞-就绪），
时间片用完（执行-就绪）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;输入相应的字母，进行相应操作&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d3abb5576e2dae6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行代码-实验源码&quot;&gt;&lt;a href=&quot;#运行代码-实验源码&quot; class=&quot;headerlink&quot; title=&quot;运行代码 实验源码&quot;&gt;&lt;/a&gt;运行代码 &lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;命令行输入 &lt;/p&gt;
&lt;h4 id=&quot;node-test3-js&quot;&gt;&lt;a href=&quot;#node-test3-js&quot; class=&quot;headerlink&quot; title=&quot;node test3.js&quot;&gt;&lt;/a&gt;node test3.js&lt;/h4&gt;&lt;hr&gt;
&lt;h2 id=&quot;实验二：分页式存储管理-changeAdress&quot;&gt;&lt;a href=&quot;#实验二：分页式存储管理-changeAdress&quot; class=&quot;headerlink&quot; title=&quot;实验二：分页式存储管理 changeAdress&quot;&gt;&lt;/a&gt;实验二：分页式存储管理 changeAdress&lt;/h2&gt;&lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的 :&quot;&gt;&lt;/a&gt;目的 :&lt;/h3&gt;&lt;p&gt;分页式存储管理系统是内存非连续存储管理中基本的方法，可以通过把一个作业分成多个页面分配到不连续的内存块中去。实验可以通过位示图的方式来模拟内存的使用情况，为每个作业建立页表用于完成正确的地址转换。&lt;/p&gt;
&lt;h3 id=&quot;内容和步骤：&quot;&gt;&lt;a href=&quot;#内容和步骤：&quot; class=&quot;headerlink&quot; title=&quot;内容和步骤：&quot;&gt;&lt;/a&gt;内容和步骤：&lt;/h3&gt;&lt;p&gt;利用键盘输入本模拟系统的物理块的大小，作业的页表中的块号；完成逻辑地址转换成相应的物理地址的过程。&lt;/p&gt;
&lt;h3 id=&quot;具体过程：&quot;&gt;&lt;a href=&quot;#具体过程：&quot; class=&quot;headerlink&quot; title=&quot;具体过程：&quot;&gt;&lt;/a&gt;具体过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;建立一张位示图，用来模拟内存的分配情况，利用随机数产生一组0和1的数对应内存的使用情况。&lt;/li&gt;
&lt;li&gt;输入块（页）的大小，通过模拟位示图为本作业分配内存空间建立相应的页表（长度不定）；&lt;/li&gt;
&lt;li&gt;录入逻辑地址转换成相应的物理地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;运行代码-实验源码-1&quot;&gt;&lt;a href=&quot;#运行代码-实验源码-1&quot; class=&quot;headerlink&quot; title=&quot;运行代码 实验源码&quot;&gt;&lt;/a&gt;运行代码 &lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;命令行输入&lt;/p&gt;
&lt;h4 id=&quot;node-main-js&quot;&gt;&lt;a href=&quot;#node-main-js&quot; class=&quot;headerlink&quot; title=&quot;node main.js&quot;&gt;&lt;/a&gt;node main.js&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-80700832d08db17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验三-页面置换算法-pageDispatch&quot;&gt;&lt;a href=&quot;#实验三-页面置换算法-pageDispatch&quot; class=&quot;headerlink&quot; title=&quot;实验三 页面置换算法 pageDispatch&quot;&gt;&lt;/a&gt;实验三 页面置换算法 pageDispatch&lt;/h2&gt;&lt;h3 id=&quot;目的：&quot;&gt;&lt;a href=&quot;#目的：&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h3&gt;&lt;p&gt;实现请求页式地址转换中出现的缺页现象中，用到的先进先出FIFO、最近最久未使用LRU、最佳OPT置换算法。熟悉文件的基本操作（读、写）。&lt;/p&gt;
&lt;h3 id=&quot;内容和步骤：-1&quot;&gt;&lt;a href=&quot;#内容和步骤：-1&quot; class=&quot;headerlink&quot; title=&quot;内容和步骤：&quot;&gt;&lt;/a&gt;内容和步骤：&lt;/h3&gt;&lt;p&gt;利用键盘输入本模拟系统分配给作业的内存物理块个数，作业在执行过程中的页面调度次序。计算出三种算法的缺页次数和缺页率。&lt;/p&gt;
&lt;h3 id=&quot;OPT-FIFO-LRU&quot;&gt;&lt;a href=&quot;#OPT-FIFO-LRU&quot; class=&quot;headerlink&quot; title=&quot;OPT ,FIFO ,LRU&quot;&gt;&lt;/a&gt;OPT ,FIFO ,LRU&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OPT :(最佳置换算法) 将内存块里面找到未来最晚出现的值（某值将来第一次出现的下标）,删掉&lt;/li&gt;
&lt;li&gt;FIFO：（first in first out）将内存块中最早进的最早删了&lt;/li&gt;
&lt;li&gt;LRU：(least recently used) 最近最少使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;具体过程：-1&quot;&gt;&lt;a href=&quot;#具体过程：-1&quot; class=&quot;headerlink&quot; title=&quot;具体过程：&quot;&gt;&lt;/a&gt;具体过程：&lt;/h3&gt;&lt;p&gt;１、输入分配给本作业的块数，模拟作业执行的逻辑地址转换成页面调度次序；&lt;br&gt;２、分别采用OPT、FIFO、LRU置换算法，利用堆栈结构完成页面置换；记录被换出的页面和新换入的页面。&lt;br&gt;３、将得到的结果写入到文本文件中。&lt;/p&gt;
&lt;h3 id=&quot;执行结果&quot;&gt;&lt;a href=&quot;#执行结果&quot; class=&quot;headerlink&quot; title=&quot;执行结果&quot;&gt;&lt;/a&gt;执行结果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-ae8ad77a4cd48b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-aa36a5dc63ad68e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验四-进程调度算法-dispachPro&quot;&gt;&lt;a href=&quot;#实验四-进程调度算法-dispachPro&quot; class=&quot;headerlink&quot; title=&quot;实验四  进程调度算法 dispachPro&quot;&gt;&lt;/a&gt;实验四  进程调度算法 dispachPro&lt;/h2&gt;&lt;h3 id=&quot;目的：-1&quot;&gt;&lt;a href=&quot;#目的：-1&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h3&gt;&lt;p&gt;在实验一的基础上实现先来先服务FCFS、短作业优先ＳＪＦ以及时间片轮转调度算法。&lt;br&gt;（五）实验内容与步骤：&lt;br&gt;我们可以根据创建进程的系统时钟，取相对时钟作为进程的到达时间，利用随机数产生每个进程的估计运行时间。利用模拟系统中提供的算法分别计算其相应的周转时间和带权周转时间。&lt;/p&gt;
&lt;h3 id=&quot;过程：&quot;&gt;&lt;a href=&quot;#过程：&quot; class=&quot;headerlink&quot; title=&quot;过程：&quot;&gt;&lt;/a&gt;过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用绝对时间和相对时钟产生一组进程的到达时刻和运行时间。&lt;/li&gt;
&lt;li&gt;实现FCFS算法：(First Come First Served )先来先服务&lt;/li&gt;
&lt;li&gt;实现ＳＪＦ算法：（Shortest Job First）短工作优先&lt;/li&gt;
&lt;li&gt;实现时间片轮转算法：首先要求确定时间片的大小，依据进程的到达时间依次加入队列，每次分配一个时间片大小的时间，如果没有完成参与下一次的竞争，当最后需要一个小于等于时间片的时间时本进程完成，同时退出队列。&lt;/li&gt;
&lt;li&gt;计算每种算法调度后，系统的平均周转时间和平均带权周转时间。&lt;h3 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e28908a8a5d10683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c0d09589d38630.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-ed7ca4d9e4dd5843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作系统实验总结&quot;&gt;&lt;a href=&quot;#操作系统实验总结&quot; class=&quot;headerlink&quot; title=&quot;操作系统实验总结&quot;&gt;&lt;/a&gt;操作系统实验总结&lt;/h1&gt;&lt;h2 id=&quot;实验源码&quot;&gt;&lt;a href=&quot;#实验源码&quot; class=&quot;headerlink&quot; title=&quot;实验源码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot;&gt;实验源码&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实验一 进程控制 processProject &lt;/li&gt;
&lt;li&gt;实验二  分页式存储管理 changeAdress&lt;/li&gt;
&lt;li&gt;实验三 页面置换算法 pageDispatch&lt;/li&gt;
&lt;li&gt;实验四  进程调度算法 dispachPro&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验一：进程调度-processProject&quot;&gt;&lt;a href=&quot;#实验一：进程调度-processProject&quot; class=&quot;headerlink&quot; title=&quot;实验一：进程调度 processProject&quot;&gt;&lt;/a&gt;实验一：进程调度 processProject&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b6aaedeba9ad2a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实验过程：&quot;&gt;&lt;a href=&quot;#实验过程：&quot; class=&quot;headerlink&quot; title=&quot;实验过程：&quot;&gt;&lt;/a&gt;实验过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义数据结构pcb和相应的队列（入，出，显示）操作&lt;/li&gt;
&lt;li&gt;编写函数：&lt;pre&gt;&lt;code&gt;创建进程（-就绪），
进程调度（就绪-执行），
进程阻塞（执行-阻塞），
进程激活（阻塞-就绪），
时间片用完（执行-就绪）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;输入相应的字母，进行相应操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://carryguan.com/tags/node/"/>
    
      <category term="js" scheme="http://carryguan.com/tags/js/"/>
    
      <category term="os" scheme="http://carryguan.com/tags/os/"/>
    
      <category term="lru" scheme="http://carryguan.com/tags/lru/"/>
    
      <category term="fifo" scheme="http://carryguan.com/tags/fifo/"/>
    
      <category term="opt" scheme="http://carryguan.com/tags/opt/"/>
    
      <category term="sjf" scheme="http://carryguan.com/tags/sjf/"/>
    
  </entry>
  
  <entry>
    <title>playFair算法-古典密码学</title>
    <link href="http://carryguan.com/2017/03/20/playFair/"/>
    <id>http://carryguan.com/2017/03/20/playFair/</id>
    <published>2017-03-20T14:11:10.000Z</published>
    <updated>2017-03-20T14:33:24.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Playfair密码（英文：Playfair cipher 或 Playfair square）是一种替换密码，1854年由查尔斯·惠斯通（Charles Wheatstone）的英国人发明。经莱昂·普莱费尔提倡在英国军地和政府使用。　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   PlayFair算法是古典密码学中的多表代替算法.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# PlayFair算法分以下几步：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1：将给出的密钥去重与26个字母拼接成后，生成5X5的矩阵也称作密码表（矩阵中I和J位置相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2：将明文两个两个为一对儿&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3：利用加密方法来将明文加密&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加密方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2右端的字母。其中第一列被看作是最后一列的右方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2下方的字母。其中第一行看作是最后一行的下方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2不同行、不同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C1和C2是由P1和P2确定的矩形的其它两角的字母，并且C1和P1、C2和P2同行。（解密时处理方法相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1＝P2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则插入一个字母于重复字母之间，并用前述方法处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若明文字母数为奇数时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则在明文的末端添加某个事先约定的字母作为填充&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;举例说明&quot;&gt;&lt;a href=&quot;#举例说明&quot; class=&quot;headerlink&quot; title=&quot;举例说明&quot;&gt;&lt;/a&gt;举例说明&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-12c2fb222130656b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;这是demo-可以点击&quot;&gt;&lt;a href=&quot;#这是demo-可以点击&quot; class=&quot;headerlink&quot; title=&quot;这是demo,可以点击&quot;&gt;&lt;/a&gt;这是demo,可以点击&lt;/h2&gt;&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://carryguan.me/PlayFair/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;实验代码&quot;&gt;&lt;a href=&quot;#实验代码&quot; class=&quot;headerlink&quot; title=&quot;实验代码&quot;&gt;&lt;/a&gt;实验代码&lt;/h1&gt;&lt;h2 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var skid = document.getElementById(&amp;quot;secretKey&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var secretKey = &amp;apos; &amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr = new Array();//拆分密钥字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sk = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var keyTable = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ekid = document.getElementById(&amp;quot;expressWords&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var expressKey = ekid.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arrEK = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var secretWords = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一步：定义密钥一维数组，并将密钥去重&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//去重函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Array.prototype.unique = function()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var n = &amp;#123;&amp;#125;,r=[]; //n为键值对集合，r为临时数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  for(var i = 0; i &amp;lt; this.length; i++) //遍历当前数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!n[this[i]]) //如果表中没有当前项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      n[this[i]] = true; //存入表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      r.push(this[i]); //把当前数组的当前项push到临时数组里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //console.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sk.push(this[i]);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return r;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步，创建密码表,用去重后的密钥和26个英文字母创建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function createKey(sk)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //字母顺序数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var allChars = [&amp;apos;A&amp;apos;,&amp;apos;B&amp;apos;,&amp;apos;C&amp;apos;,&amp;apos;D&amp;apos;,&amp;apos;E&amp;apos;,&amp;apos;F&amp;apos;,&amp;apos;G&amp;apos;,&amp;apos;H&amp;apos;,&amp;apos;I&amp;apos;||&amp;apos;J&amp;apos;,&amp;apos;K&amp;apos;,&amp;apos;L&amp;apos;,&amp;apos;M&amp;apos;,&amp;apos;N&amp;apos;,&amp;apos;O&amp;apos;,&amp;apos;P&amp;apos;,&amp;apos;Q&amp;apos;,&amp;apos;R&amp;apos;,&amp;apos;S&amp;apos;,&amp;apos;T&amp;apos;,&amp;apos;U&amp;apos;,&amp;apos;V&amp;apos;,&amp;apos;W&amp;apos;,&amp;apos;X&amp;apos;,&amp;apos;Y&amp;apos;,&amp;apos;Z&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //删除去重后的密钥在26字母中的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0 ;i&amp;lt;sk.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var index = allChars.indexOf(sk[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (index &amp;gt; -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            allChars.splice(index, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //将未出现过的26个字母与去重密钥合并成密码表一维数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allChars = sk.concat(allChars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //将一维数组转成二维&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0 ; i&amp;lt;5 ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyTable[i] = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var j = 0;j&amp;lt;5;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyTable[i][j] = allChars[i*5+j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // console.log(&amp;apos;keyTablellll:&amp;apos;+keyTable[3][3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三步：处理明文  ，将明文两个两个为一对,并且将明文中的J换成I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function produceExpress(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //console.log(&amp;apos;e：&amp;apos;+e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr = e.split(&amp;apos;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(arr.length%2==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i=0 ; i&amp;lt;arr.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          if(arr[i] == &amp;apos;J&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[i] = &amp;apos;I&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i=0 ; i&amp;lt;arr.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          arrEK.push([arr[i],arr[i+1]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          i = i+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arrEK.push(&amp;apos;X&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0;i&amp;lt;7;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;arrEKllll:&amp;apos;+arrEK[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 第四步：利用playfair算法，求出密文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getSecret(a,b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //a为密码表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //b为分组后的明文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var secretTable = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var express = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    secretTable = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    express = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var p1,p2,c1,c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var row1,col1,row2,col2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var k =0;k&amp;lt;express.length;k++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i = 0;i&amp;lt;secretTable.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          for(var j=0;j&amp;lt;secretTable[i].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(express[k][0] == secretTable[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                row1=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                col1=j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(express[k][1] == secretTable[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                row2=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                col2=j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(row1 == row2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][(col1+1)%5]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][(col2+1)%5])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else if (col1 == col2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[(row1+1)%5][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[(row2+1)%5][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //不同行不同列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][col2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row2][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a = document.getElementById(&amp;apos;secretWords&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var btn = document.getElementById(&amp;apos;button&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btn.addEventListener(&amp;apos;click&amp;apos;,function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //a.value = secretWords.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(skid.value!= &amp;apos; &amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           secretKey =  skid.value.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           arr = secretKey.split(&amp;apos;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(ekid.value!= &amp;apos; &amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           expressKey = ekid.value.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr.unique();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;quchonghou:&amp;apos;+sk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //创建密码表为keyTable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createKey(sk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;-----------------------------&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i = 0;i&amp;lt;5;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           console.log(&amp;apos;keyTable:&amp;apos;+keyTable[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;-----------------------------&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //处理明文后为arrEK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        produceExpress(expressKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;mingwen:&amp;apos;+arrEK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //求密文secretWords&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getSecret(keyTable,arrEK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;secretWords:&amp;apos;+secretWords);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a.value = secretWords.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;playfair加密算法&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            font-family: &amp;apos;Open Sans&amp;apos;, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            line-height: 1.42857143;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background-color: #F39D7C;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #container&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin:0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: #2A1106;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border-radius: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box-shadow: 0 0 15px #F13006;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #container&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flex-direction: column;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          justify-content: space-between;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          align-items: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       input&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 30px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #button&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 80px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 35px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: #ef9a79;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        font-size: 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border:none; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border-radius: 3px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #button:hover&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          background: #f47c20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- top-start --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;playFair加密算法&amp;lt;/h1&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输入密钥:&amp;lt;/span&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;secretKey&amp;quot; name=&amp;quot;secretKey&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输入明文:&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;expressWords&amp;quot; name=&amp;quot;expressWords&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输出密文:&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;secretWords&amp;quot; name=&amp;quot;secretWords&amp;quot;value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;button id =&amp;quot;button&amp;quot; type=&amp;quot;submit&amp;quot; &amp;gt;加密&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;p id=&amp;quot;demo&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;script src=&amp;quot;first.js&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Playfair密码（英文：Playfair cipher 或 Playfair square）是一种替换密码，1854年由查尔斯·惠斯通（Charles Wheatstone）的英国人发明。经莱昂·普莱费尔提倡在英国军地和政府使用。　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   PlayFair算法是古典密码学中的多表代替算法.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# PlayFair算法分以下几步：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1：将给出的密钥去重与26个字母拼接成后，生成5X5的矩阵也称作密码表（矩阵中I和J位置相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2：将明文两个两个为一对儿&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3：利用加密方法来将明文加密&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加密方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2右端的字母。其中第一列被看作是最后一列的右方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2下方的字母。其中第一行看作是最后一行的下方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2不同行、不同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C1和C2是由P1和P2确定的矩形的其它两角的字母，并且C1和P1、C2和P2同行。（解密时处理方法相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1＝P2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则插入一个字母于重复字母之间，并用前述方法处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若明文字母数为奇数时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则在明文的末端添加某个事先约定的字母作为填充&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://carryguan.com/tags/Javascript/"/>
    
      <category term="Playfair" scheme="http://carryguan.com/tags/Playfair/"/>
    
      <category term="html" scheme="http://carryguan.com/tags/html/"/>
    
      <category term="古典密码" scheme="http://carryguan.com/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="对称密码" scheme="http://carryguan.com/tags/%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Cookie和Session</title>
    <link href="http://carryguan.com/2016/08/28/Cookie%E5%92%8CSession/"/>
    <id>http://carryguan.com/2016/08/28/Cookie和Session/</id>
    <published>2016-08-28T13:18:20.000Z</published>
    <updated>2016-09-03T06:39:31.470Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-144ce8776fdd3f93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;来由&quot;&gt;&lt;a href=&quot;#来由&quot; class=&quot;headerlink&quot; title=&quot;来由&quot;&gt;&lt;/a&gt;来由&lt;/h2&gt;&lt;p&gt;http协议是stateless的,一旦和后台响应了，就断开了和请求的连接，这时若我们想要了解哪个客户发来的请求，这就需要借助服务器端的session,和浏览器端的cookie  –（可以用express中间件）&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1：cookie-amp-session&quot;&gt;&lt;a href=&quot;#1：cookie-amp-session&quot; class=&quot;headerlink&quot; title=&quot;1：cookie&amp;amp;session&quot;&gt;&lt;/a&gt;1：cookie&amp;amp;session&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/fangaoxin/article/details/6952954&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cookie,session&lt;/a&gt;会话跟踪是Web程序中常用的技术，用来&lt;strong&gt;跟踪用户的整个会话&lt;/strong&gt;。常用的会话跟踪技术是Cookie与Session。&lt;strong&gt;Cookie通过在客户端记录信息确定用户身份&lt;/strong&gt;，&lt;strong&gt;Session通过在服务器端记录信息确定用户身份&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2：Cookie&quot;&gt;&lt;a href=&quot;#2：Cookie&quot; class=&quot;headerlink&quot; title=&quot;2：Cookie&quot;&gt;&lt;/a&gt;2：Cookie&lt;/h3&gt;&lt;p&gt;Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。&lt;/p&gt;
&lt;h3 id=&quot;3：-Session&quot;&gt;&lt;a href=&quot;#3：-Session&quot; class=&quot;headerlink&quot; title=&quot;3： Session&quot;&gt;&lt;/a&gt;3： Session&lt;/h3&gt;&lt;p&gt;Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。&lt;br&gt;如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-144ce8776fdd3f93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;来由&quot;&gt;&lt;a href=&quot;#来由&quot; class=&quot;headerlink&quot; title=&quot;来由&quot;&gt;&lt;/a&gt;来由&lt;/h2&gt;&lt;p&gt;http协议是stateless的,一旦和后台响应了，就断开了和请求的连接，这时若我们想要了解哪个客户发来的请求，这就需要借助服务器端的session,和浏览器端的cookie  –（可以用express中间件）&lt;br&gt;
    
    </summary>
    
    
      <category term="Cookie" scheme="http://carryguan.com/tags/Cookie/"/>
    
      <category term="Session" scheme="http://carryguan.com/tags/Session/"/>
    
      <category term="Http" scheme="http://carryguan.com/tags/Http/"/>
    
      <category term="数据交互" scheme="http://carryguan.com/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>前端攻城狮的标准</title>
    <link href="http://carryguan.com/2016/08/28/%E5%89%8D%E7%AB%AF%E6%94%BB%E5%9F%8E%E7%8B%AE%E7%9A%84%E6%A0%87%E5%87%86/"/>
    <id>http://carryguan.com/2016/08/28/前端攻城狮的标准/</id>
    <published>2016-08-28T12:47:25.000Z</published>
    <updated>2016-09-03T06:59:04.567Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-df83d5ec13fe30e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前端工程师该达到的要求&quot;&gt;&lt;a href=&quot;#前端工程师该达到的要求&quot; class=&quot;headerlink&quot; title=&quot;前端工程师该达到的要求&quot;&gt;&lt;/a&gt;前端工程师该达到的要求&lt;/h1&gt;&lt;h2 id=&quot;1-基本功&quot;&gt;&lt;a href=&quot;#1-基本功&quot; class=&quot;headerlink&quot; title=&quot;1 基本功&quot;&gt;&lt;/a&gt;1 基本功&lt;/h2&gt;&lt;p&gt;HTML、CSS、JavaScript基本功，数学、算法、数据结构、操作系统、编译原理基本功。&lt;/p&gt;
&lt;h2 id=&quot;2-资源请求&quot;&gt;&lt;a href=&quot;#2-资源请求&quot; class=&quot;headerlink&quot; title=&quot;2 资源请求&quot;&gt;&lt;/a&gt;2 资源请求&lt;/h2&gt;&lt;p&gt;了解 DNS 解析，充分利用 CDN，使用多个域名来完成资源的请求以缩短加载时间；&lt;/p&gt;
&lt;p&gt;##3 http&lt;br&gt;设置 HTTP Headers（Expires, Cache-Control, If-Modified-Since）；&lt;/p&gt;
&lt;h2 id=&quot;4-遵循hpw规则&quot;&gt;&lt;a href=&quot;#4-遵循hpw规则&quot; class=&quot;headerlink&quot; title=&quot;4 遵循hpw规则&quot;&gt;&lt;/a&gt;4 遵循hpw规则&lt;/h2&gt;&lt;p&gt;遵循 Steve Souders 给出的全部规则（High Performance Websites）&lt;/p&gt;
&lt;h2 id=&quot;5-解决显示的问题&quot;&gt;&lt;a href=&quot;#5-解决显示的问题&quot; class=&quot;headerlink&quot; title=&quot;5 解决显示的问题&quot;&gt;&lt;/a&gt;5 解决显示的问题&lt;/h2&gt;&lt;p&gt;知道如何解决 PageSpeed、YSlow、Chrome Dev Tools Audit、Chrome Dev Tools Timeline 显示的所有问题；&lt;/p&gt;
&lt;h2 id=&quot;6-服务端与客户端&quot;&gt;&lt;a href=&quot;#6-服务端与客户端&quot; class=&quot;headerlink&quot; title=&quot;6 服务端与客户端&quot;&gt;&lt;/a&gt;6 服务端与客户端&lt;/h2&gt;&lt;p&gt;知道什么任务该放在服务端，什么任务该放在客户端；&lt;/p&gt;
&lt;h2 id=&quot;7-缓存&quot;&gt;&lt;a href=&quot;#7-缓存&quot; class=&quot;headerlink&quot; title=&quot;7 缓存&quot;&gt;&lt;/a&gt;7 缓存&lt;/h2&gt;&lt;p&gt;知道使用缓存，DNS 预取和资源预加载技巧；&lt;/p&gt;
&lt;h2 id=&quot;8-js良好学习与利用能力&quot;&gt;&lt;a href=&quot;#8-js良好学习与利用能力&quot; class=&quot;headerlink&quot; title=&quot;8 js良好学习与利用能力&quot;&gt;&lt;/a&gt;8 js良好学习与利用能力&lt;/h2&gt;&lt;p&gt;精通 JavaScript，知道何时自己写何时借组别人的框架或代码，优劣明辨；&lt;/p&gt;
&lt;h2 id=&quot;9-框架，库，工具&quot;&gt;&lt;a href=&quot;#9-框架，库，工具&quot; class=&quot;headerlink&quot; title=&quot;9 框架，库，工具&quot;&gt;&lt;/a&gt;9 框架，库，工具&lt;/h2&gt;&lt;p&gt;熟练使用现代 MVC JavaScript 框架（例如 AngularJS EmberJS React 等），图形库（D3、SnapSVG 等），DOM 操作类库（jQuery、Zepto 等），惰性加载或者模块管理类库（例如 RequireJS、CommonJS 等），任务调用工具（例如 Grunt Gulp 等），包管理工具（Bower Componentjs）以及测试工具（Protractor、Selenium 等）；&lt;/p&gt;
&lt;h2 id=&quot;10-图片&quot;&gt;&lt;a href=&quot;#10-图片&quot; class=&quot;headerlink&quot; title=&quot;10 图片&quot;&gt;&lt;/a&gt;10 图片&lt;/h2&gt;&lt;p&gt;掌握图片的格式，每种格式的优点，适用的场景；知道图片优化技巧以及加载策略（雪碧图、懒加载、缓存刷新以及 PNG 交错）；&lt;/p&gt;
&lt;h2 id=&quot;11-css&quot;&gt;&lt;a href=&quot;#11-css&quot; class=&quot;headerlink&quot; title=&quot;11:css&quot;&gt;&lt;/a&gt;11:css&lt;/h2&gt;&lt;p&gt;熟悉 CSS 标准、最新的转换工具积极策略规范（比如 BEM、SMACSS、OOCSS 等）；&lt;/p&gt;
&lt;h2 id=&quot;12：js-的计算机科学&quot;&gt;&lt;a href=&quot;#12：js-的计算机科学&quot; class=&quot;headerlink&quot; title=&quot;12：js 的计算机科学&quot;&gt;&lt;/a&gt;12：js 的计算机科学&lt;/h2&gt;&lt;p&gt;JavaScript 的计算机科学（内存管理、单进程特性、垃圾回收算法、定时器、作用域、提升以及设计模式）。&lt;/p&gt;
&lt;h2 id=&quot;13-Web前端开发标准&quot;&gt;&lt;a href=&quot;#13-Web前端开发标准&quot; class=&quot;headerlink&quot; title=&quot;13 Web前端开发标准&quot;&gt;&lt;/a&gt;13 Web前端开发标准&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codecloud.net/5622.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web前端开发标准&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=408332973&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-df83d5ec13fe30e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://carryguan.com/tags/FE/"/>
    
      <category term="前端之路" scheme="http://carryguan.com/tags/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="迷茫" scheme="http://carryguan.com/tags/%E8%BF%B7%E8%8C%AB/"/>
    
      <category term="学前端" scheme="http://carryguan.com/tags/%E5%AD%A6%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MyVocation</title>
    <link href="http://carryguan.com/2016/08/16/MyVocation/"/>
    <id>http://carryguan.com/2016/08/16/MyVocation/</id>
    <published>2016-08-16T01:09:04.000Z</published>
    <updated>2016-08-16T03:46:31.787Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一共四周：&quot;&gt;&lt;a href=&quot;#一共四周：&quot; class=&quot;headerlink&quot; title=&quot;一共四周：&quot;&gt;&lt;/a&gt;一共四周：&lt;/h1&gt;&lt;p&gt;第一周：了解一下做的是啥，学习mysql,node.js,coffeescript,socket&lt;br&gt;第二周 : 写了缺货提醒的接口(warehouse-coffee-lib–timer-newStocksInfor),获得缺货详细列表的接口(warehouse-coffee-lib-getStocksList)&lt;br&gt;第三周：写了获得缺货门店的信息接口(warehouse-coffee-lib-AreaLacks)&lt;br&gt;第四周：学express,node.js搭建网站，写后台&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;后台工作流程：&quot;&gt;&lt;a href=&quot;#后台工作流程：&quot; class=&quot;headerlink&quot; title=&quot;后台工作流程：&quot;&gt;&lt;/a&gt;后台工作流程：&lt;/h1&gt;&lt;h2 id=&quot;一：搭建服务器&quot;&gt;&lt;a href=&quot;#一：搭建服务器&quot; class=&quot;headerlink&quot; title=&quot;一：搭建服务器&quot;&gt;&lt;/a&gt;一：搭建服务器&lt;/h2&gt;&lt;h2 id=&quot;二：数据处理：&quot;&gt;&lt;a href=&quot;#二：数据处理：&quot; class=&quot;headerlink&quot; title=&quot;二：数据处理：&quot;&gt;&lt;/a&gt;二：数据处理：&lt;/h2&gt;&lt;p&gt;数据库（mysql）,redis,memcache&lt;/p&gt;
&lt;h2 id=&quot;三：本机启动后台系统&quot;&gt;&lt;a href=&quot;#三：本机启动后台系统&quot; class=&quot;headerlink&quot; title=&quot;三：本机启动后台系统&quot;&gt;&lt;/a&gt;三：本机启动后台系统&lt;/h2&gt;&lt;p&gt;node main.js/supervisor main.js/NODE_ENV=DEV &amp;amp;&amp;amp;supervisor main.j&lt;/p&gt;
&lt;h2 id=&quot;四：与客户端的连接&quot;&gt;&lt;a href=&quot;#四：与客户端的连接&quot; class=&quot;headerlink&quot; title=&quot;四：与客户端的连接&quot;&gt;&lt;/a&gt;四：与客户端的连接&lt;/h2&gt;&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1:&quot;&gt;&lt;/a&gt;1:&lt;/h3&gt;&lt;p&gt;此客户端可以为android,ios,web前台（前端）&lt;/p&gt;
&lt;h3 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;2:&quot;&gt;&lt;/a&gt;2:&lt;/h3&gt;&lt;p&gt;客户端需要知道后台的ip,进行 ping连接&lt;/p&gt;
&lt;h3 id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot; class=&quot;headerlink&quot; title=&quot;3:&quot;&gt;&lt;/a&gt;3:&lt;/h3&gt;&lt;p&gt;客户端也需要知道与后台进行交互的那个接口&lt;/p&gt;
&lt;h2 id=&quot;五：和客户端的交互&quot;&gt;&lt;a href=&quot;#五：和客户端的交互&quot; class=&quot;headerlink&quot; title=&quot;五：和客户端的交互&quot;&gt;&lt;/a&gt;五：和客户端的交互&lt;/h2&gt;&lt;p&gt;后台需要写好接口功能，并把数据通过这个接口传输给客户端(socket.on)&lt;br&gt;后台自己定义好功能（一般是客户端的系统信息推送）自发起一个接口(socket.emit),客户端soket.on接口和数据&lt;/p&gt;
&lt;h2 id=&quot;六：注意&quot;&gt;&lt;a href=&quot;#六：注意&quot; class=&quot;headerlink&quot; title=&quot;六：注意&quot;&gt;&lt;/a&gt;六：注意&lt;/h2&gt;&lt;p&gt;从github拽下来的文件，需要进入其跟目录进行npm install,原因是将package.json中的dependencies依赖包进行下载；&lt;/p&gt;
&lt;h1 id=&quot;More&quot;&gt;&lt;a href=&quot;#More&quot; class=&quot;headerlink&quot; title=&quot;More&quot;&gt;&lt;/a&gt;More&lt;/h1&gt;&lt;p&gt;真的特别感谢公司给的这次机会，让我学到了好多新知识，还结交到了几位盆友，跟他们这样有多年开发经验的人沟通，了解了开发方式与模式，扩展了知识面&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/25e89c1ad4ab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸加载&lt;/a&gt;&lt;br&gt;放一张我男神BI照片来开心一下（原谅博主少女心）&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-895ca3735e03828e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;再放一张博主我的（表杀我，咩咩）&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-1e9289634631a1cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一共四周：&quot;&gt;&lt;a href=&quot;#一共四周：&quot; class=&quot;headerlink&quot; title=&quot;一共四周：&quot;&gt;&lt;/a&gt;一共四周：&lt;/h1&gt;&lt;p&gt;第一周：了解一下做的是啥，学习mysql,node.js,coffeescript,socket&lt;br&gt;第二周 : 写了缺货提醒的接口(warehouse-coffee-lib–timer-newStocksInfor),获得缺货详细列表的接口(warehouse-coffee-lib-getStocksList)&lt;br&gt;第三周：写了获得缺货门店的信息接口(warehouse-coffee-lib-AreaLacks)&lt;br&gt;第四周：学express,node.js搭建网站，写后台&lt;br&gt;
    
    </summary>
    
    
      <category term="vocation" scheme="http://carryguan.com/tags/vocation/"/>
    
      <category term="life" scheme="http://carryguan.com/tags/life/"/>
    
      <category term="work" scheme="http://carryguan.com/tags/work/"/>
    
      <category term="vocation summing" scheme="http://carryguan.com/tags/vocation-summing/"/>
    
      <category term="暑假生活" scheme="http://carryguan.com/tags/%E6%9A%91%E5%81%87%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>最流行的Javascript都能做什么？</title>
    <link href="http://carryguan.com/2016/08/08/%E6%9C%80%E7%81%AB%E7%9A%84Javascript%E9%83%BD%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://carryguan.com/2016/08/08/最火的Javascript都能做什么？/</id>
    <published>2016-08-08T07:50:50.000Z</published>
    <updated>2016-08-16T02:22:38.110Z</updated>
    
    <content type="html">&lt;p&gt;JS的应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据可视化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桌面应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;若图片无法加载请点击&lt;a href=&quot;http://www.jianshu.com/p/66e05cc8201d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-bc22cd5fcf7b236a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;数据可视化&quot;&gt;&lt;a href=&quot;#数据可视化&quot; class=&quot;headerlink&quot; title=&quot;数据可视化&quot;&gt;&lt;/a&gt;数据可视化&lt;/h1&gt;&lt;h2 id=&quot;processing-js&quot;&gt;&lt;a href=&quot;#processing-js&quot; class=&quot;headerlink&quot; title=&quot;processing.js&quot;&gt;&lt;/a&gt;processing.js&lt;/h2&gt;&lt;p&gt;Processing.js作者是John Resig，这是继Jquery之后，他的第二个力作。&lt;br&gt;Processing.js使用JavaScript绘制形状sharp和操作HTML5 canvas元素产生图像动画。&lt;br&gt;Processing.js是轻量，易于了解掌握，并提出一个理想的工具，可视化的数据，创建用户界面和开发基于Web的游戏。&lt;br&gt;&lt;a href=&quot;http://blog.jobbole.com/1525/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;processing.js简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/bugknightyyp/article/details/8666831&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;processing.js快速入门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;D3-js&quot;&gt;&lt;a href=&quot;#D3-js&quot; class=&quot;headerlink&quot; title=&quot;D3.js&quot;&gt;&lt;/a&gt;D3.js&lt;/h2&gt;&lt;p&gt;D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/c3800c61d2fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3.js入门指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/library/d3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3.js入门教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;移动应用&quot;&gt;&lt;a href=&quot;#移动应用&quot; class=&quot;headerlink&quot; title=&quot;移动应用&quot;&gt;&lt;/a&gt;移动应用&lt;/h1&gt;&lt;h2 id=&quot;Cordova-phoneGap-ionic&quot;&gt;&lt;a href=&quot;#Cordova-phoneGap-ionic&quot; class=&quot;headerlink&quot; title=&quot;Cordova+phoneGap+ionic&quot;&gt;&lt;/a&gt;Cordova+phoneGap+ionic&lt;/h2&gt;&lt;h3 id=&quot;Cordova&quot;&gt;&lt;a href=&quot;#Cordova&quot; class=&quot;headerlink&quot; title=&quot;Cordova&quot;&gt;&lt;/a&gt;Cordova&lt;/h3&gt;&lt;p&gt;Cordova提供了一组设备相关的API，通过这组API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等。&lt;br&gt;Cordova还提供了一组统一的JavaScript类库，以及为这些类库所用的设备相关的原生后台代码。&lt;br&gt;&lt;a href=&quot;http://www.zhoujingen.cn/blog/7027.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Cordova教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;phoneGap&quot;&gt;&lt;a href=&quot;#phoneGap&quot; class=&quot;headerlink&quot; title=&quot;phoneGap&quot;&gt;&lt;/a&gt;phoneGap&lt;/h3&gt;&lt;p&gt;PhoneGap是一个用基于&lt;a href=&quot;http://baike.baidu.com/view/692.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML&lt;/a&gt;，&lt;a href=&quot;http://baike.baidu.com/subview/15916/5236733.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS&lt;/a&gt;和&lt;a href=&quot;http://baike.baidu.com/view/16168.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript&lt;/a&gt;的，创建移动跨平台移动应用程序的&lt;a href=&quot;http://baike.baidu.com/view/4112052.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;快速开发平台&lt;/a&gt;。它使开发者能够利用&lt;a href=&quot;http://baike.baidu.com/view/158983.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS&lt;/a&gt;，Android，&lt;a href=&quot;http://baike.baidu.com/view/27225.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Palm&lt;/a&gt;，&lt;a href=&quot;http://baike.baidu.com/view/10708.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Symbian&lt;/a&gt;,WP7,&lt;a href=&quot;http://baike.baidu.com/view/7261507.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WP8&lt;/a&gt;,&lt;a href=&quot;http://baike.baidu.com/subview/76548/9852892.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bada&lt;/a&gt;和&lt;a href=&quot;http://baike.baidu.com/view/88648.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blackberry&lt;/a&gt;智能手机的核心功能——包括地理定位，加速器，联系人，声音和振动等，此外PhoneGap拥有丰富的&lt;a href=&quot;http://baike.baidu.com/view/18979.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件&lt;/a&gt;，可以调用。&lt;br&gt;&lt;a href=&quot;http://www.phonegap100.com/article-462-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneGap官网以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;React-Native&quot;&gt;&lt;a href=&quot;#React-Native&quot; class=&quot;headerlink&quot; title=&quot;React Native&quot;&gt;&lt;/a&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/h2&gt;&lt;h1 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h1&gt;&lt;h2 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h2&gt;&lt;p&gt;正是V8的性能将JavaScript带到了一个新的高度，于是Node.js诞生了——前端、后台都可以用JavaScript，一个JavaScript的全栈时代。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-66ff0354fe02535a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;此篇文章依据&lt;a href=&quot;https://www.zhihu.com/people/phodal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phodal&lt;/a&gt;大神的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;桌面应用&quot;&gt;&lt;a href=&quot;#桌面应用&quot; class=&quot;headerlink&quot; title=&quot;桌面应用&quot;&gt;&lt;/a&gt;桌面应用&lt;/h1&gt;&lt;h2 id=&quot;NW-js&quot;&gt;&lt;a href=&quot;#NW-js&quot; class=&quot;headerlink&quot; title=&quot;NW.js&quot;&gt;&lt;/a&gt;NW.js&lt;/h2&gt;&lt;p&gt;NW.js 是基于 Chromium 和 Node.js 运行的， 它们可以让我们用HTML和JavaScript来制作桌面应用。&lt;/p&gt;
&lt;h2 id=&quot;Electron&quot;&gt;&lt;a href=&quot;#Electron&quot; class=&quot;headerlink&quot; title=&quot;Electron&quot;&gt;&lt;/a&gt;Electron&lt;/h2&gt;&lt;p&gt;除了NW.js还有最近比较火的Electron，Atom编辑器的&lt;/p&gt;
&lt;h2 id=&quot;全平台应用&quot;&gt;&lt;a href=&quot;#全平台应用&quot; class=&quot;headerlink&quot; title=&quot;全平台应用&quot;&gt;&lt;/a&gt;全平台应用&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-7766c666972e76e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7cb1d8cffa7/comments/1430104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;全平台应用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;游戏&quot;&gt;&lt;a href=&quot;#游戏&quot; class=&quot;headerlink&quot; title=&quot;游戏&quot;&gt;&lt;/a&gt;游戏&lt;/h1&gt;&lt;h2 id=&quot;WebGL&quot;&gt;&lt;a href=&quot;#WebGL&quot; class=&quot;headerlink&quot; title=&quot;WebGL&quot;&gt;&lt;/a&gt;WebGL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.hewebgl.com/code/show/2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;炫酷的效果展示-旋转纽约&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.hewebgl.com/code/show/4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;炫酷的效果展示-高科技感元素周期表&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://hewebgl.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webGL官网以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;VR&quot;&gt;&lt;a href=&quot;#VR&quot; class=&quot;headerlink&quot; title=&quot;VR&quot;&gt;&lt;/a&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.phodal.com/blog/why-javascript-will-use-vr-world/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vr介绍&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AR&quot;&gt;&lt;a href=&quot;#AR&quot; class=&quot;headerlink&quot; title=&quot;AR&quot;&gt;&lt;/a&gt;AR&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/EJfymiz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;介绍以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;物联网&quot;&gt;&lt;a href=&quot;#物联网&quot; class=&quot;headerlink&quot; title=&quot;物联网&quot;&gt;&lt;/a&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js与物联网&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h1&gt;&lt;p&gt;这里不多介绍&lt;/p&gt;
&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;也不错介绍&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文基于&lt;a href=&quot;https://zhuanlan.zhihu.com/phodal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Phodal&lt;/a&gt;大神的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=29436904&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JS的应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据可视化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桌面应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;若图片无法加载请点击&lt;a href=&quot;http://www.jianshu.com/p/66e05cc8201d&quot;&gt;图片爸爸&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-bc22cd5fcf7b236a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://carryguan.com/tags/JavaScript/"/>
    
      <category term="应用" scheme="http://carryguan.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="移动端" scheme="http://carryguan.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="游戏" scheme="http://carryguan.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="全栈" scheme="http://carryguan.com/tags/%E5%85%A8%E6%A0%88/"/>
    
      <category term="跨平台" scheme="http://carryguan.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="3D" scheme="http://carryguan.com/tags/3D/"/>
    
      <category term="物联网与js" scheme="http://carryguan.com/tags/%E7%89%A9%E8%81%94%E7%BD%91%E4%B8%8Ejs/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶以及重要知识点</title>
    <link href="http://carryguan.com/2016/08/05/js%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://carryguan.com/2016/08/05/js重要知识点/</id>
    <published>2016-08-05T01:59:02.000Z</published>
    <updated>2016-08-05T02:42:55.365Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2a12c8caef6e4f37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;/p&gt;
&lt;h2 id=&quot;前端进阶-（以下是豪大大的干货）&quot;&gt;&lt;a href=&quot;#前端进阶-（以下是豪大大的干货）&quot; class=&quot;headerlink&quot; title=&quot;前端进阶: （以下是豪大大的干货）&quot;&gt;&lt;/a&gt;前端进阶: （以下是豪大大的干货）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3600308.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第一阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3601666.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第二阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3604459.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第三阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3607133.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第四阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3611394.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第五阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3632392.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第六阶段&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文目前依据是菜鸟教程：&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/js/js-functions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS菜鸟&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/index.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSw3c&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS基本编程语法&quot;&gt;&lt;a href=&quot;#JS基本编程语法&quot; class=&quot;headerlink&quot; title=&quot;JS基本编程语法&quot;&gt;&lt;/a&gt;JS基本编程语法&lt;/h2&gt;&lt;p&gt;变量&lt;br&gt;运算&lt;br&gt;流程控制&lt;br&gt;数组&lt;br&gt;调用函数&lt;br&gt;自定义函数&lt;br&gt;自定义对象&lt;br&gt;string对象原型(prototype)&lt;br&gt;this事件&lt;br&gt;json&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS函数&quot;&gt;&lt;a href=&quot;#JS函数&quot; class=&quot;headerlink&quot; title=&quot;JS函数&quot;&gt;&lt;/a&gt;JS函数&lt;/h2&gt;&lt;p&gt;函数定义&lt;br&gt;函数调用&lt;br&gt;函数的参数&lt;br&gt;闭包&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS-HTML-DOM&quot;&gt;&lt;a href=&quot;#JS-HTML-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS HTML DOM&quot;&gt;&lt;/a&gt;JS HTML DOM&lt;/h2&gt;&lt;p&gt;目前来看都要&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS高级教程&quot;&gt;&lt;a href=&quot;#JS高级教程&quot; class=&quot;headerlink&quot; title=&quot;JS高级教程&quot;&gt;&lt;/a&gt;JS高级教程&lt;/h2&gt;&lt;p&gt;string,prototype&lt;br&gt;array&lt;br&gt;regExp&lt;br&gt;Boolean&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;js继承(call,prototype,apply)//红皮书第六章&lt;br&gt;js的执行顺序&lt;br&gt;js事件机制(委托，绑定，监听，冒泡和阻止冒泡，兼容性)//红皮书13章&lt;br&gt;了解ajax的xmlhttprequest及其创建方法(多浏览器兼容)，跨域，明白其工作原理，http协议(get,post;如何传递参数，设置cookie)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前端学习计划推荐：&quot;&gt;&lt;a href=&quot;#前端学习计划推荐：&quot; class=&quot;headerlink&quot; title=&quot;前端学习计划推荐：&quot;&gt;&lt;/a&gt;前端学习计划推荐：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下都是我从知乎里面找到的干货&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e5c3d5a2eed28410.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机行业很多都符合82定律，也就是20%的东西的使用频率占到80%，所以很适合囫囵吞枣，我们的重点就是把这20%学起来，而首先要做的就是把这20%的东西找出来。&lt;br&gt;在我看来前端这20%的东西大概就是常用的html标签，css的盒子模型，基本的原生js，以及熟练使用jquery，ajax，常见浏览器的兼容。&lt;br&gt;拿下这些东西意义非凡，一方面证明你适合做前端这份工作，另一方面这些技能能让你找到一份工作。让你能够从容地去学习剩下的80%。&lt;br&gt;总之就是专心对付最重要的东西，那些什么less、sass、angular这类的东西，当你把我之前说的基础打好之后，学习起来畅通无阻，随学随用。&lt;br&gt;最后我觉得最难的就是实践，只有实践才能学到真正的技术，新人很难参与一些有价值有意义的项目，没有这些项目又很难成长，所以自己有项目可参与应该珍惜，没项目应该多造一些有价值的轮子。&lt;/p&gt;
&lt;p&gt;1.html的语法、格式，常用的标签极其作用，理解标签的嵌套，学习使用firefox+firebug或者chrom的调试工具，能够使用这些工具调试html、css、js、断点调试、抓包&lt;/p&gt;
&lt;p&gt;2.如何引入css、js（有多少种方法，各种方法有什么区别），理解id、class属性的区别，学会css的常用选择器，理解盒子模型（padding，margin，border，width，height，），css坐标系，css布局（position的absolute、relative 、fixed、static），css浮动（float：left、right ）和清除浮动（clear）,display:inline、block、inline-block、flex&lt;/p&gt;
&lt;p&gt;3.js的执行顺序，基本的编程基础（变量、运算、流程控制、数组、调用函数、自定义函数、对象）、json、js的dom操作、js的事件机制（委托、绑定、监听，冒泡和阻止冒泡，兼容性），了解ajax的xmlhttprequest及其创建方法（多浏览器兼容）、跨域，明白其工作原理，评论里有朋友说http协议，确实是我疏忽，在学习ajax这部分免不了需要懂点http协议，比如什么是get和post，这两种如何传递参数，设置cookie等&lt;/p&gt;
&lt;p&gt;4、使用jquery解放你的开发工作，学会jq选择器，修改属性、监听事件、修改css，学会写jquery插件。这一步我觉得可以和第3步穿插学习&lt;/p&gt;
&lt;p&gt;5、搭建服务器，弄个傻瓜服务器比如wamp，phpstudy等软件，可以一键建立一个apache+php+mysql的服务器，前期可以把你的静态页发布到本地服务器，使用本地服务器配合ajax学习。&lt;/p&gt;
&lt;p&gt;6、学点服务器端，建议php+mysql  (博主学的是nodejs+mysql)&lt;br&gt;服务器端脚本其实很简单，总结起来就是4个东西：SESSION、COOKIE、Request、Response，结合http协议理解如何从Request取得数据，经过处理后Response给客户端。这就是整个过程。&lt;br&gt;至于mysql也就是基本的sql语句。如何使用php进行CURD操作。这块其实很难总结，基本上以实现业务为主。&lt;/p&gt;
&lt;p&gt;7、来点框架，理解MVC模式、推荐个比较流行的MVC框架：ThinkPHP，简洁好用不解释，国人弄的，文档和例子什么的非常丰富。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;博主感想&quot;&gt;&lt;a href=&quot;#博主感想&quot; class=&quot;headerlink&quot; title=&quot;博主感想&quot;&gt;&lt;/a&gt;博主感想&lt;/h2&gt;&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32737469&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2a12c8caef6e4f37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;/p&gt;
&lt;h2 id=&quot;前端进阶-（以下是豪大大的干货）&quot;&gt;&lt;a href=&quot;#前端进阶-（以下是豪大大的干货）&quot; class=&quot;headerlink&quot; title=&quot;前端进阶: （以下是豪大大的干货）&quot;&gt;&lt;/a&gt;前端进阶: （以下是豪大大的干货）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3600308.html&quot;&gt;第一阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3601666.html&quot;&gt;第二阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3604459.html&quot;&gt;第三阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3607133.html&quot;&gt;第四阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3611394.html&quot;&gt;第五阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3632392.html&quot;&gt;第六阶段&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascrpt" scheme="http://carryguan.com/tags/javascrpt/"/>
    
      <category term="前端" scheme="http://carryguan.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="进阶" scheme="http://carryguan.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="js知识点" scheme="http://carryguan.com/tags/js%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-sql语法(入门)</title>
    <link href="http://carryguan.com/2016/07/21/mysql%E8%AF%AD%E6%B3%95/"/>
    <id>http://carryguan.com/2016/07/21/mysql语法/</id>
    <published>2016-07-21T05:57:37.000Z</published>
    <updated>2016-07-26T01:44:21.906Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f671ikpgnhj30s20as0v3.jpg&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql-sql 语句  &lt;/li&gt;
&lt;li&gt;字符集选utf-8&lt;/li&gt;
&lt;li&gt;我需要学增删改查, 事物, 联合&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;启动数据库&quot;&gt;&lt;a href=&quot;#启动数据库&quot; class=&quot;headerlink&quot; title=&quot;启动数据库&quot;&gt;&lt;/a&gt;启动数据库&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
mysql -u root -p（root是用户名）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据库（所有）&quot;&gt;&lt;a href=&quot;#查看数据库（所有）&quot; class=&quot;headerlink&quot; title=&quot;查看数据库（所有）&quot;&gt;&lt;/a&gt;查看数据库（所有）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show databases
&lt;/code&gt;&lt;/pre&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

## 进入数据库
&lt;pre&gt;&lt;code&gt;
use one ;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;展示当前数据库的所有表&quot;&gt;&lt;a href=&quot;#展示当前数据库的所有表&quot; class=&quot;headerlink&quot; title=&quot;展示当前数据库的所有表&quot;&gt;&lt;/a&gt;展示当前数据库的所有表&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show tables;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;创建个名为user的表的结构&quot;&gt;&lt;a href=&quot;#创建个名为user的表的结构&quot; class=&quot;headerlink&quot; title=&quot;创建个名为user的表的结构&quot;&gt;&lt;/a&gt;创建个名为user的表的结构&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
create table user(
id int,
name  varchar(30),
pass varchar(30)
);（字符串长度最长是30）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看表结构&quot;&gt;&lt;a href=&quot;#查看表结构&quot; class=&quot;headerlink&quot; title=&quot;查看表结构&quot;&gt;&lt;/a&gt;查看表结构&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
desc user; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据从表里面&quot;&gt;&lt;a href=&quot;#查看数据从表里面&quot; class=&quot;headerlink&quot; title=&quot;查看数据从表里面&quot;&gt;&lt;/a&gt;查看数据从表里面&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
select * from user;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;insert-增（我可以随意增加，插入数据到表中）&quot;&gt;&lt;a href=&quot;#insert-增（我可以随意增加，插入数据到表中）&quot; class=&quot;headerlink&quot; title=&quot;insert 增（我可以随意增加，插入数据到表中）&quot;&gt;&lt;/a&gt;insert 增（我可以随意增加，插入数据到表中）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
 insert into table(ct1,ct2,ct3) values(num,&quot;str&quot;,&quot;str&quot;)
 insert into user(id,name,pass) values(1,&quot;leiwei&quot;,&quot;123&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;形成了下表&quot;&gt;&lt;a href=&quot;#形成了下表&quot; class=&quot;headerlink&quot; title=&quot;形成了下表&quot;&gt;&lt;/a&gt;形成了下表&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select * from user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name      | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1 | leiwei    | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2 | yujie     | 13   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3 | qiancheng | 456  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;select-查（我可以随意查找-select-from-table-where…）&quot;&gt;&lt;a href=&quot;#select-查（我可以随意查找-select-from-table-where…）&quot; class=&quot;headerlink&quot; title=&quot;select 查（我可以随意查找 select from table where…）&quot;&gt;&lt;/a&gt;select 查（我可以随意查找 select from table where…）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
select * from user where id=2;
select * from user where pass=13;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;select-like-子段（-我可以随意选取子字段-）&quot;&gt;&lt;a href=&quot;#select-like-子段（-我可以随意选取子字段-）&quot; class=&quot;headerlink&quot; title=&quot;select like 子段（ 我可以随意选取子字段 ）&quot;&gt;&lt;/a&gt;select like 子段（ 我可以随意选取子字段 ）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from user where name like &amp;apos;%carry%&amp;apos;;//选取中间含有carry字段的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name     | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5 | carryone | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2 | carry    | 571  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;选取以one结束的字段&quot;&gt;&lt;a href=&quot;#选取以one结束的字段&quot; class=&quot;headerlink&quot; title=&quot;选取以one结束的字段&quot;&gt;&lt;/a&gt;选取以one结束的字段&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from user where name like &amp;apos;%one&amp;apos;;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name     | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5 | carryone | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;select-order-by（排序我们可以随意排序数据）&quot;&gt;&lt;a href=&quot;#select-order-by（排序我们可以随意排序数据）&quot; class=&quot;headerlink&quot; title=&quot;select order by（排序我们可以随意排序数据）&quot;&gt;&lt;/a&gt;select order by（排序我们可以随意排序数据）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
        select * from user order by name; //默认是升序  
         select * from user order by id desc;//desc为降序排列
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;delete-删-（我可以随意删除-delete-from-table-where…）&quot;&gt;&lt;a href=&quot;#delete-删-（我可以随意删除-delete-from-table-where…）&quot; class=&quot;headerlink&quot; title=&quot;delete 删 （我可以随意删除 delete from table where…）&quot;&gt;&lt;/a&gt;delete 删 （我可以随意删除 delete from table where…）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
delete from user where name=&quot;yujie&quot;;
delete from user where id=3;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;update-我可以随意更改-update-user-set-charct-where-…&quot;&gt;&lt;a href=&quot;#update-我可以随意更改-update-user-set-charct-where-…&quot; class=&quot;headerlink&quot; title=&quot;update (我可以随意更改 update user set charct where ….)&quot;&gt;&lt;/a&gt;update (我可以随意更改 update user set charct where ….)&lt;/h2&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;update user set name=”billin” where id=1;&lt;br&gt;update user set id=5 where name=”billin”;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=5179544&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f671ikpgnhj30s20as0v3.jpg&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql-sql 语句  &lt;/li&gt;
&lt;li&gt;字符集选utf-8&lt;/li&gt;
&lt;li&gt;我需要学增删改查, 事物, 联合&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;启动数据库&quot;&gt;&lt;a href=&quot;#启动数据库&quot; class=&quot;headerlink&quot; title=&quot;启动数据库&quot;&gt;&lt;/a&gt;启动数据库&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
mysql -u root -p（root是用户名）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据库（所有）&quot;&gt;&lt;a href=&quot;#查看数据库（所有）&quot; class=&quot;headerlink&quot; title=&quot;查看数据库（所有）&quot;&gt;&lt;/a&gt;查看数据库（所有）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show databases
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://carryguan.com/tags/sql/"/>
    
      <category term="mysql" scheme="http://carryguan.com/tags/mysql/"/>
    
      <category term="后台" scheme="http://carryguan.com/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Github预览demo</title>
    <link href="http://carryguan.com/2016/07/15/github%E9%A2%84%E8%A7%88demo/"/>
    <id>http://carryguan.com/2016/07/15/github预览demo/</id>
    <published>2016-07-15T05:18:04.000Z</published>
    <updated>2016-07-26T01:39:20.854Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-fc915701514c515c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题所在？&lt;/li&gt;
&lt;li&gt;解决办法？&lt;/li&gt;
&lt;li&gt;博主建议？&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/75e30889e70a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一：问题的所在&quot;&gt;&lt;a href=&quot;#一：问题的所在&quot; class=&quot;headerlink&quot; title=&quot;一：问题的所在&quot;&gt;&lt;/a&gt;一：问题的所在&lt;/h2&gt;&lt;p&gt;相信很多小胖友们在把自己的网页上传到github仓库中，都会有一个疑问？是什么呢？&lt;br&gt;那就是上传完网页后，自己的仓库中是这个样子的&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-44104fdfe222e566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;，点进去相应的html文件是出来的是代码&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;可是自己想在网上看到自己仓库中的demo(也就是网页的效果)&lt;br&gt;下面博猪为您解答 (^~^)&lt;/p&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;二：解决问题的方法&quot;&gt;&lt;a href=&quot;#二：解决问题的方法&quot; class=&quot;headerlink&quot; title=&quot;二：解决问题的方法&quot;&gt;&lt;/a&gt;二：解决问题的方法&lt;/h2&gt;&lt;h4 id=&quot;1-使用-Githubpages&quot;&gt;&lt;a href=&quot;#1-使用-Githubpages&quot; class=&quot;headerlink&quot; title=&quot;1: 使用 Githubpages&quot;&gt;&lt;/a&gt;1: 使用 Githubpages&lt;/h4&gt;&lt;p&gt;   比如我要上传&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5b4113b7f687b1e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;   按照如下四个步骤上传到名为:flexSupplement的仓库中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init (初始化本地仓库)
git add .  （将本地所有文件加到仓库里）
git commit -m &amp;quot;message&amp;quot; （设置提交信息）
git remote add origin   git@github.com:sunningcarryhaha/flexSupplement.git（本地仓库链接远程仓库）
git push -u origin master （push文件到仓库中）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传成功后是这个效果&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;br&gt;重头戏来了哟！&lt;br&gt;我们现在点击这个html文件，出现的效果全是代码![]&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;()，没有咱们想要的demo效果&lt;br&gt;此时呢，应该植入咱们github爸爸的一个好东西，那就是-githubPages&lt;/p&gt;
&lt;h5 id=&quot;第一步：找到Settings&quot;&gt;&lt;a href=&quot;#第一步：找到Settings&quot; class=&quot;headerlink&quot; title=&quot;第一步：找到Settings&quot;&gt;&lt;/a&gt;第一步：找到Settings&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;![](http://upload-images.jianshu.io/upload_images/2377897-0a301fa6cbc3d33f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;第二布：找到githubPages&quot;&gt;&lt;a href=&quot;#第二布：找到githubPages&quot; class=&quot;headerlink&quot; title=&quot;第二布：找到githubPages&quot;&gt;&lt;/a&gt;第二布：找到githubPages&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5033f61187c659c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;第三步：预览githubPages&quot;&gt;&lt;a href=&quot;#第三步：预览githubPages&quot; class=&quot;headerlink&quot; title=&quot;第三步：预览githubPages&quot;&gt;&lt;/a&gt;第三步：预览githubPages&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-794ba43a2fadab1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;小胖友们看到这里一定会有疑问，预览到的是githubpages的效果，并不是你自己网页的效果，没关系，我下面为你们解答&lt;/p&gt;
&lt;h5 id=&quot;第四步：查看你的分支&quot;&gt;&lt;a href=&quot;#第四步：查看你的分支&quot; class=&quot;headerlink&quot; title=&quot;第四步：查看你的分支&quot;&gt;&lt;/a&gt;第四步：查看你的分支&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fdf9314d74b1a05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;注意：我们生成githubPages的目的就是需要生成一个gh-pages分支(咱们正常情况下只有一个master分支)&lt;/p&gt;
&lt;h5 id=&quot;第五步：将远程仓库克隆到本地&quot;&gt;&lt;a href=&quot;#第五步：将远程仓库克隆到本地&quot; class=&quot;headerlink&quot; title=&quot;第五步：将远程仓库克隆到本地&quot;&gt;&lt;/a&gt;第五步：将远程仓库克隆到本地&lt;/h5&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;$ git clone git@github.com:sunningcarryhaha/flexSupplement.git&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&quot;第六步：将分支切换到gh-Pages&quot;&gt;&lt;a href=&quot;#第六步：将分支切换到gh-Pages&quot; class=&quot;headerlink&quot; title=&quot;第六步：将分支切换到gh-Pages&quot;&gt;&lt;/a&gt;第六步：将分支切换到gh-Pages&lt;/h5&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;  $ cd flexSupplement （进入到你克隆仓库的本地文件夹）&lt;br&gt;  $ git checkout gh-pages（将master分支切换到gh-pages分支上）&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h6 id=&quot;第七步：并重新上传到github上&quot;&gt;&lt;a href=&quot;#第七步：并重新上传到github上&quot; class=&quot;headerlink&quot; title=&quot;第七步：并重新上传到github上&quot;&gt;&lt;/a&gt;第七步：并重新上传到github上&lt;/h6&gt;&lt;p&gt;将本地克隆的文件删了，只留下.git,然后把你想要展示demo页面相关的文件粘进去&lt;br&gt;接着，执行以下语句&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt; git add . （将本地所有文件加到仓库里）&lt;br&gt; git commit -m “message” （设置提交信息）&lt;br&gt; git remote add origin git@github.com:sunningcarryhaha/flexSupplement.git（本地仓库链接远程仓库）&lt;br&gt; git push -u origin gh-pages （push文件到仓库中）&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&quot;第八步：修改地址&quot;&gt;&lt;a href=&quot;#第八步：修改地址&quot; class=&quot;headerlink&quot; title=&quot;第八步：修改地址&quot;&gt;&lt;/a&gt;第八步：修改地址&lt;/h5&gt;&lt;p&gt;我的GithubPages地址是这个：&lt;a href=&quot;http://carryguan.me/flex-add&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://carryguan.me/flex-add&lt;/a&gt;&lt;br&gt;我要预览flex-add中的fb1.html&lt;br&gt;我最后预览的地址应该是这个：&lt;a href=&quot;http://carryguan.me/flex-add/fb1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://carryguan.me/flex-add/fb1.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;第九步：添加read-me&quot;&gt;&lt;a href=&quot;#第九步：添加read-me&quot; class=&quot;headerlink&quot; title=&quot;第九步：添加read.me&quot;&gt;&lt;/a&gt;第九步：添加read.me&lt;/h5&gt;&lt;p&gt;把地址放到read.me中&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;  flex-add&lt;br&gt;  这是一个关于flexbox基础的骰子布局&lt;br&gt;  &lt;a href=&quot;http://carryguan.me/flex-add/fb1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-增加路径前缀（不建议用，会自动更改css的样式）&quot;&gt;&lt;a href=&quot;#2-增加路径前缀（不建议用，会自动更改css的样式）&quot; class=&quot;headerlink&quot; title=&quot;2: 增加路径前缀（不建议用，会自动更改css的样式）&quot;&gt;&lt;/a&gt;2: 增加路径前缀（不建议用，会自动更改css的样式）&lt;/h4&gt;&lt;p&gt;在地址前加&lt;a href=&quot;http://htmlpreview.github.io/?&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?&lt;/a&gt;前缀（不建议用这个，会更改css样式）&lt;br&gt;例如，你想预览这个：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;&quot;&gt;https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;你在这个地址前加&lt;a href=&quot;http://htmlpreview.github.io/?&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;最后预览demo地址是：&lt;br&gt;&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; 博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=28756834&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-fc915701514c515c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题所在？&lt;/li&gt;
&lt;li&gt;解决办法？&lt;/li&gt;
&lt;li&gt;博主建议？&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/75e30889e70a&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一：问题的所在&quot;&gt;&lt;a href=&quot;#一：问题的所在&quot; class=&quot;headerlink&quot; title=&quot;一：问题的所在&quot;&gt;&lt;/a&gt;一：问题的所在&lt;/h2&gt;&lt;p&gt;相信很多小胖友们在把自己的网页上传到github仓库中，都会有一个疑问？是什么呢？&lt;br&gt;那就是上传完网页后，自己的仓库中是这个样子的&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-44104fdfe222e566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;，点进去相应的html文件是出来的是代码&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;可是自己想在网上看到自己仓库中的demo(也就是网页的效果)&lt;br&gt;下面博猪为您解答 (^~^)&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="demo" scheme="http://carryguan.com/tags/demo/"/>
    
      <category term="githubPages" scheme="http://carryguan.com/tags/githubPages/"/>
    
  </entry>
  
  <entry>
    <title>最详尽-hexo+GithubPages搭建博客</title>
    <link href="http://carryguan.com/2016/07/02/hexo-gihubpages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://carryguan.com/2016/07/02/hexo-gihubpages-搭建博客/</id>
    <published>2016-07-01T16:00:00.000Z</published>
    <updated>2016-07-17T09:01:04.566Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5ms460e6tj30zk0aqgn1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么选择hexo？&lt;/li&gt;
&lt;li&gt;搭建博客的基本步骤&lt;/li&gt;
&lt;li&gt;部署到Github Pages&lt;/li&gt;
&lt;li&gt;域名解析&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 )&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/0321cb243963&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么选择hexo？&quot;&gt;&lt;a href=&quot;#为什么选择hexo？&quot; class=&quot;headerlink&quot; title=&quot;为什么选择hexo？&quot;&gt;&lt;/a&gt;为什么选择hexo？&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;搭建博客的基本步骤&quot;&gt;&lt;a href=&quot;#搭建博客的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建博客的基本步骤&quot;&gt;&lt;/a&gt;搭建博客的基本步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购买域名&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;li&gt;注册github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一：购买域名&quot;&gt;&lt;a href=&quot;#一：购买域名&quot; class=&quot;headerlink&quot; title=&quot;一：购买域名&quot;&gt;&lt;/a&gt;一：购买域名&lt;/h3&gt;&lt;p&gt;   若小胖友们想把个人博客挂到属于自己的域名上，博主在这里建议大家提前把域名买好。&lt;br&gt;博主购买域名的地方是&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;万网&lt;/a&gt;,注册登录后，填写你想要的域名&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a9273887335cde2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;选择完自己域名后，付费就可以了！&lt;br&gt;(博主建议个人域名选择.me为后缀的较好-博主的域名就为&lt;a href=&quot;http://carryguan.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;carryguan.me&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;二：安装hexo&quot;&gt;&lt;a href=&quot;#二：安装hexo&quot; class=&quot;headerlink&quot; title=&quot;二：安装hexo&quot;&gt;&lt;/a&gt;二：安装hexo&lt;/h3&gt;&lt;p&gt;  装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：&lt;br&gt;&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 若你是IT小白，安装git/node没成功,博主carry给你个福利贴士&lt;br&gt; (博主就是这样一点点过来的 （＃￣▽￣＃）)&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows安装git&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows安装node.js&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里建议小胖友们，先预习一下:&lt;br&gt;  &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git入门教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/20070065&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github趣味详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。&lt;br&gt;先进入一个文件夹路径：例如我的&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5fbuje1hjj30l50bd75k.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;再执行下面的命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;&lt;/pre&gt; 

&lt;h3 id=&quot;初始化框架&quot;&gt;&lt;a href=&quot;#初始化框架&quot; class=&quot;headerlink&quot; title=&quot;初始化框架&quot;&gt;&lt;/a&gt;初始化框架&lt;/h3&gt;&lt;h4 id=&quot;1执行如下语句&quot;&gt;&lt;a href=&quot;#1执行如下语句&quot; class=&quot;headerlink&quot; title=&quot;1执行如下语句&quot;&gt;&lt;/a&gt;1执行如下语句&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; hexo init blog&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; (blog是我自己建立的用来装博客的文件夹)&lt;/p&gt;
&lt;h4 id=&quot;2：再执行&quot;&gt;&lt;a href=&quot;#2：再执行&quot; class=&quot;headerlink&quot; title=&quot;2：再执行&quot;&gt;&lt;/a&gt;2：再执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;cd blog&lt;/code&gt;&lt;/pre&gt; 



&lt;h4 id=&quot;3-最后执行&quot;&gt;&lt;a href=&quot;#3-最后执行&quot; class=&quot;headerlink&quot; title=&quot;3: 最后执行&quot;&gt;&lt;/a&gt;3: 最后执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;以上三条语句执行完毕后， 你会在blog文件夹里看到如下:&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml //网站的配置信息，您可以在此配置大部分的参数。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scaffolds //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── source //资源文件夹是存放用户资源的地方。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | ├── _drafts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | └── _posts &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes //主题文件夹。Hexo会根据主题来生成静态页面。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;最后看看你自己的个人网站：&quot;&gt;&lt;a href=&quot;#最后看看你自己的个人网站：&quot; class=&quot;headerlink&quot; title=&quot;最后看看你自己的个人网站：&quot;&gt;&lt;/a&gt;最后看看你自己的个人网站：&lt;/h4&gt;&lt;p&gt;在blog目录下执行gitbash命令:&lt;/p&gt;
&lt;p&gt;1：新建一篇文章（我的第一篇文章）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
 hexo new &quot;我的第一篇文章&quot;
&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;会在/source/_post里自动生成了“我的第一篇文章.md”文件，之后新建的文章都将存放在此目录下。编辑“我的第一篇文章.md”文件可修改内容。&lt;/p&gt;
&lt;p&gt;2：生成网站&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
hexo generate (可简写成 hexo g)
&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;3:启动本地服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
 hexo server (可简写成 hexo s)
&lt;/code&gt;&lt;/pre&gt; 


&lt;p&gt;4:在浏览器输入&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 即可查看网站。&lt;/p&gt;
&lt;h3 id=&quot;三：注册github&quot;&gt;&lt;a href=&quot;#三：注册github&quot; class=&quot;headerlink&quot; title=&quot;三：注册github&quot;&gt;&lt;/a&gt;三：注册github&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;填写完相应信息，注册成功后，重新登录，进入到这个页面&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f5md7zebr5j30wp0gnq5f.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击图片中所圈位置出现了如下：&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdn65brmj30ng0h0dh1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Repository name里填写:你的用户名.github.io&lt;br&gt;(例如我的用户名是&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sunningcarryhaha&lt;/a&gt;,所以我的Repository name:sunningcarryhaha.github.io)&lt;br&gt;Description里随便填一下你的描述就好&lt;br&gt;Public选中&lt;br&gt;选中Initilize this respository with a README&lt;br&gt;最后点击绿色按钮创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdofjeuij30pv0k9tab.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;创建成功后&lt;br&gt;配置SSH-Key&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细步骤请点击此文章&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;将blog部署到Github-Pages-上&quot;&gt;&lt;a href=&quot;#将blog部署到Github-Pages-上&quot; class=&quot;headerlink&quot; title=&quot;将blog部署到Github Pages 上&quot;&gt;&lt;/a&gt;将blog部署到Github Pages 上&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 两种方法:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用hexo deploy部署&lt;/li&gt;
&lt;li&gt;使用git push 部署&lt;h3 id=&quot;1：hexo-deploy部署&quot;&gt;&lt;a href=&quot;#1：hexo-deploy部署&quot; class=&quot;headerlink&quot; title=&quot;1：hexo deploy部署&quot;&gt;&lt;/a&gt;1：hexo deploy部署&lt;/h3&gt;&lt;h4 id=&quot;配置deploy&quot;&gt;&lt;a href=&quot;#配置deploy&quot; class=&quot;headerlink&quot; title=&quot;配置deploy&quot;&gt;&lt;/a&gt;配置deploy&lt;/h4&gt;找到blog目录下的配置文件_config.yml,用编辑器打开此文件&lt;br&gt;找到此文件中的deploy字段，按照以下配置&lt;pre&gt;&lt;code&gt;deploy: 
 type: git 
 repo: git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git   
 branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注意需要提前安装一个扩展：&quot;&gt;&lt;a href=&quot;#注意需要提前安装一个扩展：&quot; class=&quot;headerlink&quot; title=&quot;注意需要提前安装一个扩展：&quot;&gt;&lt;/a&gt;注意需要提前安装一个扩展：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;然后在命令行中执行&quot;&gt;&lt;a href=&quot;#然后在命令行中执行&quot; class=&quot;headerlink&quot; title=&quot;然后在命令行中执行&quot;&gt;&lt;/a&gt;然后在命令行中执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;hexo d
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;不幸的是，上述命令虽然简单方便，但是偶尔会有莫名其妙的问题出现，因此，我们也可以追本溯源，使用git命令来完成部署的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-使用gitbash，将public文件夹上传到自己的仓库中&quot;&gt;&lt;a href=&quot;#2-使用gitbash，将public文件夹上传到自己的仓库中&quot; class=&quot;headerlink&quot; title=&quot;2:使用gitbash，将public文件夹上传到自己的仓库中&quot;&gt;&lt;/a&gt;2:使用gitbash，将public文件夹上传到自己的仓库中&lt;/h3&gt;&lt;h4 id=&quot;第一步：进入到你的blog目录&quot;&gt;&lt;a href=&quot;#第一步：进入到你的blog目录&quot; class=&quot;headerlink&quot; title=&quot;第一步：进入到你的blog目录&quot;&gt;&lt;/a&gt;第一步：进入到你的blog目录&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; 
 cd blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;第二步-初始化博客&quot;&gt;&lt;a href=&quot;#第二步-初始化博客&quot; class=&quot;headerlink&quot; title=&quot;第二步 :初始化博客&quot;&gt;&lt;/a&gt;第二步 :初始化博客&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;
hexo g
&lt;/code&gt;&lt;/pre&gt; 

&lt;h4 id=&quot;第三步-把public文件夹上传到github仓库中&quot;&gt;&lt;a href=&quot;#第三步-把public文件夹上传到github仓库中&quot; class=&quot;headerlink&quot; title=&quot;第三步:把public文件夹上传到github仓库中&quot;&gt;&lt;/a&gt;第三步:把public文件夹上传到github仓库中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; 
cd public
&lt;/code&gt;&lt;/pre&gt; 

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init (初始化本地仓库)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .  （将本地文件加到仓库里）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;message&amp;quot; （设置提交信息）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git（本地仓库链接远程仓库）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master （push文件到仓库中）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git&lt;br&gt;解释一下   ：&lt;br&gt;sunningcarryhaha是用户名&lt;br&gt;sunningcarryhaha.github.io是仓库名称&lt;br&gt;.git是后缀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详细的步骤可参考此&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/steven6977/article/details/10567719&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github push&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/chaihuasong/article/details/37911723&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git github 问题总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部署成功以后，在浏览器中输入你的repository名字：例如我的&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sunningcarryhaha.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;就可以看到你的网站了&quot;&gt;&lt;a href=&quot;#就可以看到你的网站了&quot; class=&quot;headerlink&quot; title=&quot;就可以看到你的网站了&quot;&gt;&lt;/a&gt;就可以看到你的网站了&lt;/h4&gt;&lt;hr&gt;
&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入万网进行域名绑定&lt;/li&gt;
&lt;li&gt;进入public,新建CNAME&lt;/li&gt;
&lt;li&gt;把域名写到CNAME里&lt;/li&gt;
&lt;li&gt;传到github仓库里&lt;h3 id=&quot;1-进入万网进行域名绑定&quot;&gt;&lt;a href=&quot;#1-进入万网进行域名绑定&quot; class=&quot;headerlink&quot; title=&quot;1:进入万网进行域名绑定&quot;&gt;&lt;/a&gt;1:进入万网进行域名绑定&lt;/h3&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5feoitevaj30ah0bit9r.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5fepmf432j31hb0jgthk.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5fer7xepxj319r0d2gpx.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;安照以上图片进行操作&lt;br&gt;&lt;strong&gt; 尤其注意:记录值那里填写的是:sunningcarryhaha.github.io.，也就是你的仓库名字后还有个”.”  &lt;/strong&gt;&lt;br&gt;以上进行完毕后，接着下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-进入blog下的public文件夹-新建-CNAME&quot;&gt;&lt;a href=&quot;#2-进入blog下的public文件夹-新建-CNAME&quot; class=&quot;headerlink&quot; title=&quot;2:进入blog下的public文件夹,新建 CNAME&quot;&gt;&lt;/a&gt;2:进入blog下的public文件夹,新建 CNAME&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5fe1tnb1pj30rt0h5q7d.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5feuzv6ncj30ip0e5gn3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-将public文件夹下的CNAME上传到github仓库中&quot;&gt;&lt;a href=&quot;#3-将public文件夹下的CNAME上传到github仓库中&quot; class=&quot;headerlink&quot; title=&quot;3:将public文件夹下的CNAME上传到github仓库中&quot;&gt;&lt;/a&gt;3:将public文件夹下的CNAME上传到github仓库中&lt;/h3&gt;&lt;p&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f5feyzubl7j30l50bdq5p.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果上传成功的话，进入到你的github仓库中会看到CNAME文件&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5ff5aey6gj30sj0ndn3i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-为了防止域名解析出问题&quot;&gt;&lt;a href=&quot;#4-为了防止域名解析出问题&quot; class=&quot;headerlink&quot; title=&quot;4:为了防止域名解析出问题&quot;&gt;&lt;/a&gt;4:为了防止域名解析出问题&lt;/h3&gt;&lt;p&gt;博主建议将blog下的public下的CNAME文件，复制到blog下的source文件夹里，这样更新public，不会出现CNAME文件丢失的情况&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果以上步骤都进行完毕的话，博主carry恭喜你:bowtie:,小胖友你zen棒，现在在浏览器输入你的域名，就可以成功的看到你的个人网站啦！&lt;br&gt;当然这个网站还可以换主题，美化！这方面的文章敬请期待，博主会继续出博文的!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;博主感想&quot;&gt;&lt;a href=&quot;#博主感想&quot; class=&quot;headerlink&quot; title=&quot;博主感想&quot;&gt;&lt;/a&gt;博主感想&lt;/h2&gt;&lt;p&gt;这个博客博主搭建了好久，走了好多弯路(原谅博主比较笨，呜呜！)&lt;br&gt;期间出了好多问题，最根本的原因是博主git方面不基础不好,所以建议小胖友们多练习一下git&lt;br&gt;这里推荐:&lt;br&gt;     &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git入门教程&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-install-setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js安装菜鸟教程&lt;/a&gt;&lt;br&gt;   &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;markdown入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/24422335/answer/46357100&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo主题推荐&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next-hexo主题&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo常见问题解决方案&lt;/a&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=3412579&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5ms460e6tj30zk0aqgn1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么选择hexo？&lt;/li&gt;
&lt;li&gt;搭建博客的基本步骤&lt;/li&gt;
&lt;li&gt;部署到Github Pages&lt;/li&gt;
&lt;li&gt;域名解析&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 )&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/0321cb243963&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么选择hexo？&quot;&gt;&lt;a href=&quot;#为什么选择hexo？&quot; class=&quot;headerlink&quot; title=&quot;为什么选择hexo？&quot;&gt;&lt;/a&gt;为什么选择hexo？&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;搭建博客的基本步骤&quot;&gt;&lt;a href=&quot;#搭建博客的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建博客的基本步骤&quot;&gt;&lt;/a&gt;搭建博客的基本步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购买域名&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;li&gt;注册github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一：购买域名&quot;&gt;&lt;a href=&quot;#一：购买域名&quot; class=&quot;headerlink&quot; title=&quot;一：购买域名&quot;&gt;&lt;/a&gt;一：购买域名&lt;/h3&gt;&lt;p&gt;   若小胖友们想把个人博客挂到属于自己的域名上，博主在这里建议大家提前把域名买好。&lt;br&gt;博主购买域名的地方是&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;万网&lt;/a&gt;,注册登录后，填写你想要的域名&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://carryguan.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://carryguan.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>ms</title>
    <link href="http://carryguan.com/2016/06/27/ms/"/>
    <id>http://carryguan.com/2016/06/27/ms/</id>
    <published>2016-06-27T05:28:25.000Z</published>
    <updated>2017-08-07T14:25:41.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;锚点&quot;&gt;&lt;a href=&quot;#锚点&quot; class=&quot;headerlink&quot; title=&quot;锚点&quot;&gt;&lt;/a&gt;锚点&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;代码如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;123.html#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt; &amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;html-获取页面，浏览器，屏幕宽高&quot;&gt;&lt;a href=&quot;#html-获取页面，浏览器，屏幕宽高&quot; class=&quot;headerlink&quot; title=&quot;html 获取页面，浏览器，屏幕宽高&quot;&gt;&lt;/a&gt;html 获取页面，浏览器，屏幕宽高&lt;/h2&gt;&lt;p&gt;一个页面的展示，从外到内的容器为：屏幕-&amp;gt;浏览器-&amp;gt;页面本身。&lt;br&gt;HTML元素展现在页面内-&amp;gt;页面展现在浏览器内-&amp;gt;而浏览器展现在屏幕内。&lt;br&gt;通过Js的一些对象可以获取这些容器的高度、宽度。&lt;br&gt;1：总&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-c6dff4f74e7f2eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2:屏幕&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-f47a188d60bd97a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;3:浏览器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-8e3d9af0d6d264b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5e416993bde1fdb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;5:可视区&lt;br&gt;定义：可视区域是指能显示网页内容区域的宽高。&lt;br&gt;拉动控制台的时候网页可视区域的宽高也会随之改变。&lt;br&gt;可视区宽高跟内容宽高没关系。&lt;/p&gt;
&lt;p&gt;如果内容超过可视区域的高度或者宽度就出现滚动条。要获取可视区域的宽高每个浏览器的获取方法不一样&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/polk6/p/5051935.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参照&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Doctype&quot;&gt;&lt;a href=&quot;#Doctype&quot; class=&quot;headerlink&quot; title=&quot;Doctype&quot;&gt;&lt;/a&gt;Doctype&lt;/h2&gt;&lt;p&gt;1.Doctype作用&lt;br&gt;位置：&amp;lt;!DOCTYPE&amp;gt;声明位于html第一行&lt;br&gt;作用： 告知浏览器用什么标准解析html文档&lt;br&gt;            &amp;lt;!DOCTYPE&amp;gt;不存在，或者格式不正确，会导致文档以兼容模 (怪异模式)式出现&lt;/p&gt;
&lt;p&gt;语法：&lt;br&gt;      HTML 顶级元素 可用性 “注册//组织//类型 标签//定义 语言””URL”&lt;br&gt;&amp;lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.0//EN”&amp;gt;&lt;br&gt;&amp;lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.0 Strict//EN”&amp;gt;&lt;/p&gt;
&lt;p&gt;其中，DTD的是W3C所发布的一个文档类型定义，简单的说，就是告诉浏览器你的这个HTML，是根据那个标准写的，解析的时候用哪个标准解析。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.qdfuns.com/notes/21146/12ba5b538dd5974b1bee88f77c71b0a0.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.qdfuns.com/notes/21146/12ba5b538dd5974b1bee88f77c71b0a0.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##为什么HTML5就只要写&amp;lt;!DOCTYPE HTML&amp;gt;?&lt;br&gt;HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基于 SGML。 HTML 5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为。&lt;br&gt;其中，SGML是标准通用标记语言,简单的说，就是比HTML,XML更老的标准，这两者都是由SGML发展而来的。BUT，HTML5不是的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;标准模式与兼容模式（怪异模式）各有什么区别&quot;&gt;&lt;a href=&quot;#标准模式与兼容模式（怪异模式）各有什么区别&quot; class=&quot;headerlink&quot; title=&quot;标准模式与兼容模式（怪异模式）各有什么区别?&quot;&gt;&lt;/a&gt;标准模式与兼容模式（怪异模式）各有什么区别?&lt;/h2&gt;&lt;p&gt;A：在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松向后兼容的方式显示。简单的说，就是尽可能的显示能显示的东西给用户看。（但是会有些样式失效）&lt;/p&gt;
&lt;p&gt;1：width不同&lt;br&gt;在严格模式中 ：width是内容宽度 ，元素真正的宽度 = width+（padding+border+margin）2&lt;br&gt;在兼容模式中 ：width则是元素的实际宽度 ，内容宽度 = width - ( padding2+border2)&lt;/p&gt;
&lt;p&gt;2.兼容模式下可设置百分比的高度和行内元素的高宽&lt;br&gt;    在Standards模式下，给span等行内元素设置wdith和height都不会生效，而在兼容模式下，则会生效。&lt;br&gt;    在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。&lt;/p&gt;
&lt;p&gt;3.用margin:0 auto设置水平居中在IE下会失效&lt;br&gt;    使用margin:0 auto在standards模式下可以使元素水平居中，但在兼容模式下却会失效（用text-align属性解决）&lt;br&gt;    body{text-align:center};#content{text-align:left}&lt;/p&gt;
&lt;p&gt;4.兼容模式下Table中的字体属性不能继承上层的设置，white-space:pre会失效，设置图片的padding会失效&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;行内元素有哪些？块级元素有哪些？-空-void-元素有那些？&quot;&gt;&lt;a href=&quot;#行内元素有哪些？块级元素有哪些？-空-void-元素有那些？&quot; class=&quot;headerlink&quot; title=&quot;行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？&quot;&gt;&lt;/a&gt;行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？&lt;/h2&gt;&lt;p&gt; 首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）行内元素有：a b span img input select strong（强调的语气）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（3）常见的空元素：&amp;lt;hr&amp;gt; &amp;lt;img&amp;gt; &amp;lt;input&amp;gt; &amp;lt;link&amp;gt; &amp;lt;meta&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      鲜为人知的是：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;area&amp;gt; &amp;lt;base&amp;gt; &amp;lt;col&amp;gt; &amp;lt;command&amp;gt; &amp;lt;embed&amp;gt; &amp;lt;keygen&amp;gt; &amp;lt;param&amp;gt; &amp;lt;source&amp;gt; &amp;lt;track&amp;gt; &amp;lt;wbr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;页面导入样式时，使用link和-import有什么区别？&quot;&gt;&lt;a href=&quot;#页面导入样式时，使用link和-import有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;页面导入样式时，使用link和@import有什么区别？&quot;&gt;&lt;/a&gt;页面导入样式时，使用link和@import有什么区别？&lt;/h2&gt;&lt;p&gt;1 : 属于&lt;br&gt;link属于xml 标签，除了加载css以外，还能定义rss和rel等 。@import是css提供的，只能用于加载css&lt;br&gt;2 :页面加载&lt;br&gt;页面在加载时候，link同时被加载；而@import引用的css等页面加载完毕再加载&lt;br&gt;3：兼容性&lt;br&gt;@import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;&lt;/p&gt;
&lt;p&gt;（4）link方式的样式权重高于@import的权重。&lt;br&gt;（5）使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下你对浏览器内核的理解？&quot;&gt;&lt;a href=&quot;#介绍一下你对浏览器内核的理解？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下你对浏览器内核的理解？&quot;&gt;&lt;/a&gt;介绍一下你对浏览器内核的理解？&lt;/h2&gt;&lt;p&gt;主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。&lt;br&gt;  渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。&lt;/p&gt;
&lt;p&gt;JS引擎则：解析和执行javascript来实现网页的动态效果。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;常见的浏览器内核有哪些？&lt;br&gt; Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]&lt;br&gt;  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等&lt;br&gt;  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]&lt;br&gt;  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HTML、XML、XHTML-有什么区别？&quot;&gt;&lt;a href=&quot;#HTML、XML、XHTML-有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;HTML、XML、XHTML 有什么区别？&quot;&gt;&lt;/a&gt;HTML、XML、XHTML 有什么区别？&lt;/h2&gt;&lt;p&gt;HTML是被设计用来显示数据的，重点是:显示数据以及如何显示数据更好上面。&lt;br&gt;XML是被设计用来描述数据的，重点是:什么是数据，如何存放数据。&lt;br&gt;XHTML基于HTML的基础上进行了扩展和规范，让XHTML更加严格，主要目的是促进HTML向XML过渡。&lt;/p&gt;
&lt;p&gt;HTML的弊端：&lt;br&gt;编码不规范，结构混乱臃肿，需要智能的终端才能很好的显示；&lt;br&gt;表现和结构混乱，不利于开发和维护；&lt;br&gt;不能使用于更多的网络设备中，比如手机；&lt;br&gt;为了让HTML逐渐过渡到XML阶段，w3c又定制了XHTML标准。&lt;/p&gt;
&lt;p&gt;而XML的弊端也不少：&lt;br&gt;在数据中寻找信息非常难&lt;br&gt;大数据量效率低&lt;br&gt;使用XML传输数据时没有数据库系统那样的信息管理功能&lt;br&gt;因此XML因为自身严苛限制等因素逐渐被HTML5取代。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;怎样理解-HTML-语义化？&quot;&gt;&lt;a href=&quot;#怎样理解-HTML-语义化？&quot; class=&quot;headerlink&quot; title=&quot;怎样理解 HTML 语义化？&quot;&gt;&lt;/a&gt;怎样理解 HTML 语义化？&lt;/h2&gt;&lt;p&gt;HTML语义化能提高网页语义的清晰度，方便爬虫工具识别网站内容，爬虫工具在识别网站内容时不会受到网站样式的影响，只会关注网站内容本身&lt;br&gt;HTML的语义化能够提高团队对网站的维护和改进效率&lt;br&gt;改善网页的可访问性，遇到视觉障碍用户时屏幕阅读器能够更好的系别网页内容&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;怎样理解内容与样式分离的原则&quot;&gt;&lt;a href=&quot;#怎样理解内容与样式分离的原则&quot; class=&quot;headerlink&quot; title=&quot;怎样理解内容与样式分离的原则&quot;&gt;&lt;/a&gt;怎样理解内容与样式分离的原则&lt;/h2&gt;&lt;p&gt;在 Web 开发中，所谓内容与样式分离，就是让内容的归 HTML, 样式归 CSS, 不要混着用。&lt;br&gt;样式单独抽离出来,代码会得到精简和重用，后期的维护会变得非常简单。我只用写一个 class 的样式，就可以同时更改多个有相同 class 的元素的样式；只用一个 css 文件，就可以同时链接到多个 HTML 页面上。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;title与h1的区别、b与strong的区别、i与em的区别？&quot;&gt;&lt;a href=&quot;#title与h1的区别、b与strong的区别、i与em的区别？&quot; class=&quot;headerlink&quot; title=&quot;title与h1的区别、b与strong的区别、i与em的区别？&quot;&gt;&lt;/a&gt;title与h1的区别、b与strong的区别、i与em的区别？&lt;/h2&gt;&lt;p&gt; title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；&lt;/p&gt;
&lt;p&gt;  strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;b&gt;是展示强调内容。&lt;/b&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  i内容展示为斜体，em表示强调的文本；&lt;/p&gt;
&lt;p&gt;  Physical Style Elements – 自然样式标签&lt;br&gt;  b, i, u, s, pre&lt;br&gt;  Semantic Style Elements – 语义样式标签&lt;br&gt;  strong, em, ins, del, code&lt;br&gt;  应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;页面可见性（Page-Visibility-API）-可以有哪些用途？&quot;&gt;&lt;a href=&quot;#页面可见性（Page-Visibility-API）-可以有哪些用途？&quot; class=&quot;headerlink&quot; title=&quot;页面可见性（Page Visibility API） 可以有哪些用途？&quot;&gt;&lt;/a&gt;页面可见性（Page Visibility API） 可以有哪些用途？&lt;/h2&gt;&lt;p&gt;  通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;&lt;br&gt;  在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;iframe有那些缺点？&quot;&gt;&lt;a href=&quot;#iframe有那些缺点？&quot; class=&quot;headerlink&quot; title=&quot;iframe有那些缺点？&quot;&gt;&lt;/a&gt;iframe有那些缺点？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;iframe会阻塞主页面的Onload事件；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搜索引擎的检索程序无法解读这种页面，不利于SEO;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。&lt;/p&gt;
&lt;p&gt;使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript&lt;br&gt;动态给iframe添加src属性值，这样可以绕开以上两个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Label的作用是什么？是怎么用的？&quot;&gt;&lt;a href=&quot;#Label的作用是什么？是怎么用的？&quot; class=&quot;headerlink&quot; title=&quot;Label的作用是什么？是怎么用的？&quot;&gt;&lt;/a&gt;Label的作用是什么？是怎么用的？&lt;/h2&gt;&lt;p&gt;label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。&lt;/p&gt;
&lt;p&gt;  &lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;&lt;br&gt;  &lt;input type=&quot;“text“name=&quot;Name&quot;&quot; id=&quot;Name&quot;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;&gt;&lt;/label&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;meta？&quot;&gt;&lt;a href=&quot;#meta？&quot; class=&quot;headerlink&quot; title=&quot;meta？&quot;&gt;&lt;/a&gt;meta？&lt;/h2&gt;&lt;p&gt;&amp;lt; meta &amp;gt; 元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标签提供关于HTML文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。它可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。 —— &lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3School&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2d0d78b921025fc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-7c1119be0da3d0f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/8c3dbfc02fdb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/8c3dbfc02fdb&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.xuanfengge.com/html-meta-used-in-sorting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.xuanfengge.com/html-meta-used-in-sorting.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;p&gt;1:标签语义化，比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签&lt;/p&gt;
&lt;p&gt;2、音视频元素，video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。&lt;/p&gt;
&lt;p&gt;3、新增很多api，比如获取用户地理位置的window.navigator.geoloaction&lt;/p&gt;
&lt;p&gt;4、websocket&lt;br&gt;websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。&lt;br&gt;主要通信过程：先借http完成握手，达到了长连接&lt;br&gt;第一步：浏览器基于tcp，发送http请求&lt;br&gt;第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手&lt;br&gt;第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息&lt;br&gt;websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;5、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&lt;br&gt;HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;6：请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/p&gt;
&lt;p&gt;  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。&lt;br&gt;  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。&lt;br&gt;  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。&lt;/p&gt;
&lt;p&gt;  存储大小：&lt;br&gt;      cookie数据大小不能超过4k。&lt;br&gt;      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。&lt;/p&gt;
&lt;p&gt;  有期时间：&lt;br&gt;      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；&lt;br&gt;      sessionStorage  数据在当前浏览器窗口关闭后自动删除。&lt;br&gt;      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;7、应用程序缓存：&lt;br&gt;在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。&lt;br&gt;  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。&lt;/p&gt;
&lt;p&gt;html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：&lt;/p&gt;
&lt;p&gt;1、首先给html添加manifest属性，并赋值为cache.manifest&lt;br&gt;2、cache.manifest的内容为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;7、web worker，web worker是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;对html5的语义话的理解&quot;&gt;&lt;a href=&quot;#对html5的语义话的理解&quot; class=&quot;headerlink&quot; title=&quot;对html5的语义话的理解&quot;&gt;&lt;/a&gt;对html5的语义话的理解&lt;/h2&gt;&lt;p&gt;html5的语义化指的是用正确的标签包含正确的内容，比如nav标签，里面就应该包含导航条的内容，而不是用做其他的用途，标签语义化的好处就是结构良好，便于阅读，方便威化，也有利于爬虫的查找，提高搜索率。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何实现浏览器内多个标签页之间的通信-阿里&quot;&gt;&lt;a href=&quot;#如何实现浏览器内多个标签页之间的通信-阿里&quot; class=&quot;headerlink&quot; title=&quot;如何实现浏览器内多个标签页之间的通信? (阿里)&quot;&gt;&lt;/a&gt;如何实现浏览器内多个标签页之间的通信? (阿里)&lt;/h2&gt;&lt;p&gt;WebSocket、SharedWorker；&lt;br&gt;  也可以调用localstorge、cookies等本地存储方式；&lt;br&gt;  localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，&lt;br&gt;  我们通过监听事件，控制它的值来进行页面信息通信；&lt;br&gt;  注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HTML5-能够本地存储数据webstorage&quot;&gt;&lt;a href=&quot;#HTML5-能够本地存储数据webstorage&quot; class=&quot;headerlink&quot; title=&quot;HTML5 能够本地存储数据webstorage&quot;&gt;&lt;/a&gt;HTML5 能够本地存储数据webstorage&lt;/h2&gt;&lt;p&gt;HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&lt;br&gt;HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，&lt;/p&gt;
&lt;h2 id=&quot;请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h2&gt;&lt;p&gt;  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。&lt;br&gt;  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。&lt;br&gt;  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。&lt;/p&gt;
&lt;p&gt;  存储大小：&lt;br&gt;      cookie数据大小不能超过4k。&lt;br&gt;      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。&lt;/p&gt;
&lt;p&gt;  有期时间：&lt;br&gt;      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；&lt;br&gt;      sessionStorage  数据在当前浏览器窗口关闭后自动删除。&lt;br&gt;      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;应用程序缓存-离线缓存-：&quot;&gt;&lt;a href=&quot;#应用程序缓存-离线缓存-：&quot; class=&quot;headerlink&quot; title=&quot;应用程序缓存(离线缓存)：&quot;&gt;&lt;/a&gt;应用程序缓存(离线缓存)：&lt;/h2&gt;&lt;p&gt;在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。&lt;br&gt;  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。&lt;/p&gt;
&lt;p&gt;html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：&lt;/p&gt;
&lt;p&gt;1、首先给html添加manifest属性，并赋值为cache.manifest&lt;br&gt;2、cache.manifest的内容为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;websocket&quot;&gt;&lt;a href=&quot;#websocket&quot; class=&quot;headerlink&quot; title=&quot;websocket&quot;&gt;&lt;/a&gt;websocket&lt;/h2&gt;&lt;p&gt;websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。&lt;br&gt;主要通信过程：先借http完成握手，达到了长连接&lt;br&gt;第一步：浏览器基于tcp，发送http请求&lt;br&gt;第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手&lt;br&gt;第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息&lt;br&gt;websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h1&gt;&lt;p&gt;新特性&lt;em&gt;&lt;br&gt; 响应式布局&lt;/em&gt;&lt;br&gt; 媒体查询具体到语句_&lt;br&gt; 动画&lt;br&gt;css3新增的选择器&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;a href=&quot;#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;/a&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;/h2&gt;&lt;p&gt;每个HTML元素都是长方形盒子。&lt;br&gt;  （1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;  （2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;  （3）区  别： IE的content部分把 border 和 padding计算了进去;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fc97e71155223a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-502ce3aaecc4b38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS选择符有哪些？哪些属性可以继承？&quot;&gt;&lt;a href=&quot;#CSS选择符有哪些？哪些属性可以继承？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择符有哪些？哪些属性可以继承？&quot;&gt;&lt;/a&gt;CSS选择符有哪些？哪些属性可以继承？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.id选择器（ # myid）&lt;br&gt; 2.类选择器（.myclassname）&lt;br&gt; 3.标签选择器（div, h1, p）&lt;br&gt; 4.相邻选择器（h1 + p）&lt;br&gt; 5.子选择器（ul &amp;gt; li）&lt;br&gt; 6.后代选择器（li a）&lt;br&gt; 7.通配符选择器（ * ）&lt;br&gt; 8.属性选择器（a[rel = “external”]）&lt;br&gt; 9.伪类选择器（a:hover, li:nth-child）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可继承的样式： font-size font-family color, UL LI DL DD DT;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不可继承的样式：border padding margin width height ;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;a href=&quot;#CSS优先级算法如何计算？&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;/a&gt;CSS优先级算法如何计算？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先级就近原则，同权重情况下样式定义最近者为准;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;载入样式以最后载入的定位为准;&lt;/p&gt;
&lt;p&gt;优先级为:&lt;br&gt;同权重: 内联样式表（标签内部）&amp;gt; 嵌入样式表（当前文件中）&amp;gt; 外部样式表（外部文件中）。&lt;br&gt;!important &amp;gt;  id &amp;gt; class &amp;gt; tag&lt;br&gt;important 比 内联优先级高&lt;br&gt;!important 为优先权&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伪类-伪元素&quot;&gt;&lt;a href=&quot;#伪类-伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h2&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些？&quot; class=&quot;headerlink&quot; title=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;/a&gt;CSS3新增伪类有那些？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;举例：
  p:first-of-type    选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:last-of-type    选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-of-type    选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-child        选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。
  p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。

 inptut
    :enabled          
   :disabled         控制表单控件的禁用状态。
  :checked        单选框或复选框被选中。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;请解释一下为什么需要清除浮动？清除浮动的方式&quot;&gt;&lt;a href=&quot;#请解释一下为什么需要清除浮动？清除浮动的方式&quot; class=&quot;headerlink&quot; title=&quot;请解释一下为什么需要清除浮动？清除浮动的方式&quot;&gt;&lt;/a&gt;请解释一下为什么需要清除浮动？清除浮动的方式&lt;/h2&gt;&lt;p&gt;清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1、父级div定义height；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 2、父级div 也一起浮动；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 3、常规的使用一个class；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	.clearfix:before, .clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	    content: &amp;quot; &amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	    display: table;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	.clearfix &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	    *zoom: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;清除浮动方式：&lt;br&gt;  1) display:block 使生成的元素以块级元素显示,占满剩余空间;&lt;br&gt;  2) height:0 避免生成内容破坏原有布局的高度。&lt;br&gt;  3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;&lt;br&gt;  4）通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:”.”,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”” 仍然会产生额外的空隙；&lt;br&gt;  5）zoom：1 触发IE hasLayout。&lt;/p&gt;
&lt;p&gt;  通过分析发现，除了clear：both用来闭合浮动的，&lt;br&gt;其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么要初始化CSS样式。&quot;&gt;&lt;a href=&quot;#为什么要初始化CSS样式。&quot; class=&quot;headerlink&quot; title=&quot;为什么要初始化CSS样式。&quot;&gt;&lt;/a&gt;为什么要初始化CSS样式。&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。&lt;br&gt;淘宝的样式初始化代码：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &amp;#123; margin:0; padding:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body, button, input, select, textarea &amp;#123; font:12px/1.5tahoma, arial, \5b8b\4f53; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1, h2, h3, h4, h5, h6&amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address, cite, dfn, em, var &amp;#123; font-style:normal; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code, kbd, pre, samp &amp;#123; font-family:couriernew, courier, monospace; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;small&amp;#123; font-size:12px; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ul, ol &amp;#123; list-style:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;#123; text-decoration:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a:hover &amp;#123; text-decoration:underline; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sup &amp;#123; vertical-align:text-top; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub&amp;#123; vertical-align:text-bottom; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;legend &amp;#123; color:#000; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fieldset, img &amp;#123; border:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button, input, select, textarea &amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table &amp;#123; border-collapse:collapse; border-spacing:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用纯CSS创建一个三角形的原理是什么？&quot;&gt;&lt;a href=&quot;#用纯CSS创建一个三角形的原理是什么？&quot; class=&quot;headerlink&quot; title=&quot;用纯CSS创建一个三角形的原理是什么？&quot;&gt;&lt;/a&gt;用纯CSS创建一个三角形的原理是什么？&lt;/h2&gt;&lt;p&gt; 把上、左、右三条边隐藏掉（颜色设为 transparent）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; #demo {&lt;br&gt;    width: 0;&lt;br&gt;    height: 0;&lt;br&gt;    border-width: 20px;&lt;br&gt;    border-style: solid;&lt;br&gt;    border-color: transparent transparent red transparent;&lt;br&gt;  }&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？&quot;&gt;&lt;a href=&quot;#经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧-？&quot; class=&quot;headerlink&quot; title=&quot;经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？&quot;&gt;&lt;/a&gt;经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。&lt;/p&gt;
&lt;p&gt;浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}&lt;/p&gt;
&lt;p&gt;这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——&lt;em&gt;display:inline;将其转化为行内属性。(&lt;/em&gt;这个符号只有ie6会识别)&lt;/p&gt;
&lt;p&gt;渐进识别的方式，从总体中逐渐排除局部。&lt;/p&gt;
&lt;p&gt;首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。&lt;br&gt;接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。&lt;/p&gt;
&lt;p&gt;css&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.bb{
    background-color:red;/*所有识别*/
    background-color:#00deff\9; /*IE6、7、8识别*/
    +background-color:#a200ff;/*IE6、7识别*/
    _background-color:#1e0bd1;/*IE6识别*/
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IE下,可以使用获取常规属性的方法来获取自定义属性,&lt;br&gt;也可以使用getAttribute()获取自定义属性;&lt;br&gt;Firefox下,只能使用getAttribute()获取自定义属性。&lt;br&gt;解决方法:统一通过getAttribute()获取自定义属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE下,even对象有x,y属性,但是没有pageX,pageY属性;&lt;br&gt;Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,&lt;br&gt;可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。&lt;/p&gt;
&lt;p&gt;超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:&lt;br&gt;L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;什么是外边距合并？&quot;&gt;&lt;a href=&quot;#什么是外边距合并？&quot; class=&quot;headerlink&quot; title=&quot;什么是外边距合并？&quot;&gt;&lt;/a&gt;什么是外边距合并？&lt;/h2&gt;&lt;p&gt;外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。&lt;br&gt;  合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。&lt;br&gt;  w3school介绍网址： &lt;a href=&quot;http://www.w3school.com.cn/css/css_margin_collapsing.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3school.com.cn/css/css_margin_collapsing.asp&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;zoom-1的清除浮动原理&quot;&gt;&lt;a href=&quot;#zoom-1的清除浮动原理&quot; class=&quot;headerlink&quot; title=&quot;zoom:1的清除浮动原理?&quot;&gt;&lt;/a&gt;zoom:1的清除浮动原理?&lt;/h2&gt;&lt;p&gt;清除浮动，触发hasLayout；&lt;br&gt;  Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。&lt;br&gt;  譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。&lt;/p&gt;
&lt;p&gt;  来龙去脉大概如下：&lt;br&gt;  当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。&lt;/p&gt;
&lt;p&gt;  Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。&lt;/p&gt;
&lt;p&gt;  目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？&lt;br&gt;  可以通过css3里面的动画属性scale进行缩放。 &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何居中div？&quot;&gt;&lt;a href=&quot;#如何居中div？&quot; class=&quot;headerlink&quot; title=&quot;如何居中div？&quot;&gt;&lt;/a&gt;如何居中div？&lt;/h2&gt;&lt;p&gt;水平居中：给div设置一个宽度，然后添加margin:0 auto属性&lt;/p&gt;
&lt;p&gt; div{&lt;br&gt;     width:200px;&lt;br&gt;     margin:0 auto;&lt;br&gt;  }&lt;br&gt;让绝对定位的div居中&lt;/p&gt;
&lt;p&gt; div {&lt;br&gt;     position: absolute;&lt;br&gt;     width: 300px;&lt;br&gt;     height: 300px;&lt;br&gt;     margin: auto;&lt;br&gt;     top: 0;&lt;br&gt;     left: 0;&lt;br&gt;     bottom: 0;&lt;br&gt;     right: 0;&lt;br&gt;     background-color: pink;    /&lt;em&gt; 方便看效果 &lt;/em&gt;/&lt;br&gt; }&lt;br&gt;水平垂直居中一&lt;/p&gt;
&lt;p&gt; 确定容器的宽高 宽500 高 300 的层&lt;br&gt; 设置层的外边距&lt;/p&gt;
&lt;p&gt; div {&lt;br&gt;     position: relative;        /&lt;em&gt; 相对定位或绝对定位均可 &lt;/em&gt;/&lt;br&gt;     width:500px;&lt;br&gt;     height:300px;&lt;br&gt;     top: 50%;&lt;br&gt;     left: 50%;&lt;br&gt;     margin: -150px 0 0 -250px;         /&lt;em&gt; 外边距为自身宽高的一半 &lt;/em&gt;/&lt;br&gt;     background-color: pink;         /&lt;em&gt; 方便看效果 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;  }&lt;br&gt;水平垂直居中二&lt;/p&gt;
&lt;p&gt; 未知容器的宽高，利用 &lt;code&gt;transform&lt;/code&gt; 属性&lt;/p&gt;
&lt;p&gt; div {&lt;br&gt;     position: absolute;        /&lt;em&gt; 相对定位或绝对定位均可 &lt;/em&gt;/&lt;br&gt;     width:500px;&lt;br&gt;     height:300px;&lt;br&gt;     top: 50%;&lt;br&gt;     left: 50%;&lt;br&gt;     transform: translate(-50%, -50%);&lt;br&gt;     background-color: pink;         /&lt;em&gt; 方便看效果 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt; }&lt;br&gt;水平垂直居中三&lt;/p&gt;
&lt;p&gt; 利用 flex 布局&lt;br&gt; 实际使用时应考虑兼容性&lt;/p&gt;
&lt;p&gt; .container {&lt;br&gt;     display: flex;&lt;br&gt;     align-items: center;         /&lt;em&gt; 垂直居中 &lt;/em&gt;/&lt;br&gt;     justify-content: center;    /&lt;em&gt; 水平居中 &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt; }&lt;br&gt; .container div {&lt;br&gt;     width: 100px;&lt;br&gt;     height: 100px;&lt;br&gt;     background-color: pink;        /&lt;em&gt; 方便看效果 &lt;/em&gt;/&lt;br&gt; }  &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position的值relative和absolute定位原点是？&quot;&gt;&lt;a href=&quot;#position的值relative和absolute定位原点是？&quot; class=&quot;headerlink&quot; title=&quot;position的值relative和absolute定位原点是？&quot;&gt;&lt;/a&gt;position的值relative和absolute定位原点是？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;absolute
  生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
fixed （老IE不支持）
  生成绝对定位的元素，相对于浏览器窗口进行定位。
relative
  生成相对定位的元素，相对于其正常位置进行定位。
static
  默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
inherit
  规定从父元素继承 position 属性的值。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;p&gt;  响应式布局&lt;br&gt;css3新增的选择器&lt;br&gt;伪类选择器&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:first-of-type	选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:last-of-type	选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-of-type	选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-child		选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:nth-child(2)	选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-27f724e1cacd45e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;css-新增属性5个&quot;&gt;&lt;a href=&quot;#css-新增属性5个&quot; class=&quot;headerlink&quot; title=&quot;css 新增属性5个&quot;&gt;&lt;/a&gt;css 新增属性5个&lt;/h2&gt;&lt;p&gt;CSS3有哪些新内容，请至少说出5个。&lt;/p&gt;
&lt;p&gt;   1）border-radius。CSS3圆角表格&lt;/p&gt;
&lt;p&gt;   2）font-effect。以往对网页上的文字加特效只能用filter属性，但是在CSS3中专门制定了一个加文字特效的属性，而且不止加阴影这种效果。&lt;/p&gt;
&lt;p&gt;   3）text-underline-style，text-underline-color，text-underline-mode，text-underline-position。丰富了对链接下划线的样式，以往的下划线都是直线，这次可不一样了，有波浪线、点线、虚线等等，更可对下划线的颜色和&lt;br&gt;位置进行任意改变，哈哈~~下划线的世界从此不再单一。（还有对应顶线和中横线的样式，效果与下划线类似）&lt;/p&gt;
&lt;p&gt;   4）font-emphasize-style和font-emphasize-position。我们在做笔记时经常要在文字下点几个点或打个圈什么的，以示重点，CSS3也开始加入了这项功能，这应该在某些特定网页上很有用。&lt;/p&gt;
&lt;p&gt;   5）Font-face可以用来加载字体样式，而且它还能够加载服务器端的字体文件，显示客户端没有安装的字体。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot;&gt;&lt;a href=&quot;#请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot; class=&quot;headerlink&quot; title=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&quot;&gt;&lt;/a&gt;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&lt;/h2&gt;&lt;p&gt; 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。&lt;br&gt;   较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。&lt;br&gt;   采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。&lt;br&gt;   它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。&lt;br&gt;   常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。&lt;br&gt;   在布局上有了比以前更加灵活的空间&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/flexbox-basics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/flexbox-basics.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3-的-Transitions-Transforms-和-Animation&quot;&gt;&lt;a href=&quot;#CSS3-的-Transitions-Transforms-和-Animation&quot; class=&quot;headerlink&quot; title=&quot;CSS3 的 Transitions, Transforms 和 Animation&quot;&gt;&lt;/a&gt;CSS3 的 Transitions, Transforms 和 Animation&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.skew &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform: skew(50deg); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .scale &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform: scale(2, 0.5); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .rotate &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform: rotate(30deg); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .translate &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform: translate(50px, 50px); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .all_in_one_transform &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -webkit-transform: skew(20deg) scale(1.1, 1.1) rotate(40deg) translate(10px, 15px); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;媒体查询&quot;&gt;&lt;a href=&quot;#媒体查询&quot; class=&quot;headerlink&quot; title=&quot;媒体查询&quot;&gt;&lt;/a&gt;媒体查询&lt;/h2&gt;&lt;p&gt;作用：媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，检测的媒体特性有 width 、 height 和 color （等）。&lt;/p&gt;
&lt;p&gt;怎样使用media?&lt;/p&gt;
&lt;p&gt;第一步：&lt;br&gt; 首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果&lt;/p&gt;
&lt;p&gt;&amp;lt;meta name=”viewport content=”width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no”/&amp;gt;&lt;/p&gt;
&lt;p&gt;ps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;width=device-width:宽度等于当前设备的宽度&lt;br&gt;initial-scale=1：初始的缩放比例（默认为1）&lt;br&gt;maximum-scale=1：允许用户缩放到得最大比例（默认为1）&lt;br&gt;user-scalable=no：用户不能手动缩放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二步：怎样在CSS文件中写CSS响应式媒体查询&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:720px) and (min-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;p&gt;内存泄露&lt;/p&gt;
&lt;p&gt;eval&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;p&gt;1:jsonp跨域&lt;br&gt;JSONP（JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料&lt;br&gt;因为通过script标签引入的js是不受同源策略的限制的。所以我们可以通过script标签引入一个js或者是一个其他后缀形式（如php，jsp等）的文件，此文件返回一个js函数的调用。 比如，有个a.html页面，它里面的代码需要利用ajax获取一个不同域上的json数据，假设这个json数据地址是&lt;a href=&quot;http://damonare.cn/data.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://damonare.cn/data.php&lt;/a&gt;, 那么a.html中的代码就可以这样&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function dosomething(jsondata)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //处理获得的json数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;\/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//因为是markdown写的，所以页面显示内容可能有部分差异&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=\&amp;quot;http://example.com/data.php?callback=dosomething&amp;quot;&amp;gt;&amp;lt;\/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2:通过修改document.domain来跨子域&lt;br&gt;仅在相同主域下才有效，且window.domain需要设置为相同的父域 不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。&lt;br&gt;比如，有一个页面，它的地址是&lt;a href=&quot;http://www.example.com/a.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.example.com/a.html&lt;/a&gt; ，&lt;br&gt;在这个页面里面有一个iframe，它的src是&lt;a href=&quot;http://example.com/b.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://example.com/b.html&lt;/a&gt;,&lt;br&gt;很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var iframe = document.getElementById(&amp;apos;iframe&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var win = document.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var doc = win.document;//这里获取不到iframe里的document对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var name = win.name;//这里同样获取不到window对象的name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;iframe id = &amp;quot;iframe&amp;quot; src=&amp;quot;http://example.com/b.html&amp;quot; onload = &amp;quot;test()&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b81be614658808c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d51bad8105ff7116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;4：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-665a15e11ea92788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;5：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2e14787d1c2eae05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Ajax实现流程&quot;&gt;&lt;a href=&quot;#Ajax实现流程&quot; class=&quot;headerlink&quot; title=&quot;Ajax实现流程&quot;&gt;&lt;/a&gt;Ajax实现流程&lt;/h2&gt;&lt;p&gt;创建一个XMLHttpRequest()实例&lt;br&gt;准备一个Ajax请求以待发送&lt;br&gt;发送Ajax请求&lt;br&gt;根据服务器响应的结果，将相应数据填充到xhr对象的属性中 注意url是相对于执行代码的当前页面，也可以是绝对路径。&lt;/p&gt;
&lt;p&gt;var xhr = new XMLHttpRequest();&lt;br&gt;xhr.open(Type,URL,Boolean);&lt;br&gt;//请求类型，请求地址，是否异步&lt;br&gt;xhr.send(null);&lt;br&gt;xhr.onreadystatechange = function(){&lt;br&gt;    if(xhr.readyState == 4){&lt;br&gt;        if(xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300 || xhr.status == 304){&lt;br&gt;            alert(xhr.responseText);&lt;br&gt;        }else {&lt;br&gt;            alert(‘unsuccessful ‘ + xhr.status);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;};&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h2&gt;&lt;p&gt;为什么javascrip是单线程&lt;br&gt;JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。&lt;br&gt;浏览器端多线程&lt;br&gt;js&lt;br&gt;css&lt;br&gt;事件&lt;br&gt;数据交互&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;p&gt;垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存，内存泄露和浏览器实现的垃圾回收机制息息相关， 而浏览器实现标识无用变量的策略主要有下两个方法：&lt;br&gt;第一，引用计数法&lt;br&gt;跟踪记录每个值被引用的次数。当声明一个变量并将引用类型的值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次 数加1.相反，如果包含对这个值引用的变量又取得另外一个值，则这个值的引用次数减1.当这个值的引用次数变成0时，则说明没有办法访问这个值了，因此就 可以将其占用的内存空间回收回来。&lt;/p&gt;
&lt;p&gt;如： var a = {};     //对象{}的引用计数为1&lt;br&gt;     b = a;          //对象{}的引用计数为 1+1&lt;br&gt;     a = null;       //对象{}的引用计数为2-1&lt;br&gt;所以这时对象{}不会被回收;&lt;br&gt;IE 6, 7 对DOM对象进行引用计数回收， 这样简单的垃圾回收机制，非常容易出现循环引用问题导致内存不能被回收， 进行导致内存泄露等问题，一般不用引用计数法。&lt;br&gt;第二，标记清除法&lt;br&gt;到2008年为止，IE,Firefox,Opera,Chrome和Safari的javascript实现使用的都是标记清除式的垃圾收集策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。&lt;br&gt;标记清除的算法分为两个阶段，标记(mark)和清除(sweep). 第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JavaScript的数据类型&quot;&gt;&lt;a href=&quot;#JavaScript的数据类型&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的数据类型&quot;&gt;&lt;/a&gt;JavaScript的数据类型&lt;/h2&gt;&lt;p&gt;基本数据类型：Number，String，Boolean，Undefined，Null&lt;br&gt;复杂数据类型：Object，Array，Function，RegExp，Date，Error&lt;br&gt;全局数据类型：Math&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/humin/p/4556820.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参照&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/search?type=content&amp;amp;q=js+%E7%BB%A7%E6%89%BF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 原型链继承()&lt;br&gt;  Child.prototype = new Parent(‘father’);&lt;br&gt;  可复用，子类型无法给超类型传递参数&lt;/li&gt;
&lt;li&gt;2 类继承&lt;br&gt; Parent.call(this, parentName);&lt;br&gt;  this.name = name;&lt;br&gt;相当于 Parent 这个函数在 Child 函数中执行了一遍，并且将所有与 this 绑定的变量都切换到了 Child 上&lt;/li&gt;
&lt;li&gt;3 组合式继承&lt;br&gt;组合式继承是比较常用的一种继承方法，其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。&lt;br&gt;这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。&lt;br&gt;组合式继承是 JS 最常用的继承模式，但组合继承使用过程中会被调用两次：一次是创建子类型的时候，另一次是在子类型构造函数的内部。&lt;/li&gt;
&lt;li&gt;4 寄生组合继承&lt;/li&gt;
&lt;li&gt;5 ES 6 继承：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;a href=&quot;#javascript创建对象的几种方式？&quot; class=&quot;headerlink&quot; title=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;/a&gt;javascript创建对象的几种方式？&lt;/h2&gt;&lt;p&gt; javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。&lt;/p&gt;
&lt;p&gt; 1、对象字面量的方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;person={firstname:&amp;quot;Mark&amp;quot;,lastname:&amp;quot;Yun&amp;quot;,age:25,eyecolor:&amp;quot;black&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、用function来模拟无参的构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(){}
var person=new Person();//定义一个function，如果使用new&amp;quot;实例化&amp;quot;,该function可以看作是一个Class
person.name=&amp;quot;Mark&amp;quot;;
person.age=&amp;quot;25&amp;quot;;
person.work=function(){
alert(person.name+&amp;quot; hello...&amp;quot;);
}
person.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pet(name,age,hobby){
   this.name=name;//this作用域：当前对象
   this.age=age;
   this.hobby=hobby;
   this.eat=function(){
      alert(&amp;quot;我叫&amp;quot;+this.name+&amp;quot;,我喜欢&amp;quot;+this.hobby+&amp;quot;,是个程序员&amp;quot;);
   }
}
var maidou =new Pet(&amp;quot;麦兜&amp;quot;,25,&amp;quot;coding&amp;quot;);//实例化、创建对象
maidou.eat();//调用eat方法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 4、用工厂方式来创建（内置对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var wcDog =new Object();
wcDog.name=&amp;quot;旺财&amp;quot;;
wcDog.age=3;
wcDog.work=function(){
  alert(&amp;quot;我是&amp;quot;+wcDog.name+&amp;quot;,汪汪汪......&amp;quot;);
}
wcDog.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用原型方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Dog(){

 }
 Dog.prototype.name=&amp;quot;旺财&amp;quot;;
 Dog.prototype.eat=function(){
 alert(this.name+&amp;quot;是个吃货&amp;quot;);
 }
 var wangcai =new Dog();
 wangcai.eat();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用混合方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Car(name,price){
  this.name=name;
  this.price=price;
}
 Car.prototype.sell=function(){
   alert(&amp;quot;我是&amp;quot;+this.name+&amp;quot;，我现在卖&amp;quot;+this.price+&amp;quot;万元&amp;quot;);
  }
var camry =new Car(&amp;quot;凯美瑞&amp;quot;,27);
camry.sell();
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;a href=&quot;#JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;/a&gt;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&lt;/h2&gt;&lt;p&gt; 栈：原始数据类型（Undefined，Null，Boolean，Number、String）&lt;br&gt; 堆：引用数据类型（对象、数组和函数）&lt;/p&gt;
&lt;p&gt; 两种类型的区别是：存储位置不同；&lt;br&gt; 原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；&lt;br&gt; 引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-f0c90cfaba1aabac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;a href=&quot;#说几条写JavaScript的基本规范？&quot; class=&quot;headerlink&quot; title=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;/a&gt;说几条写JavaScript的基本规范？&lt;/h2&gt;&lt;p&gt; 1.不要在同一行声明多个变量。&lt;br&gt; 2.请使用 ===/!==来比较true/false或者数值&lt;br&gt; 3.使用对象字面量替代new Array这种形式&lt;br&gt; 4.不要使用全局函数。&lt;br&gt; 5.Switch语句必须带有default分支&lt;br&gt; 6.函数不应该有时候有返回值，有时候没有返回值。&lt;br&gt; 7.For循环必须使用大括号&lt;br&gt; 8.If语句必须使用大括号&lt;br&gt; 9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;封装cookie的添加，删除，查询方法&quot;&gt;&lt;a href=&quot;#封装cookie的添加，删除，查询方法&quot; class=&quot;headerlink&quot; title=&quot;封装cookie的添加，删除，查询方法&quot;&gt;&lt;/a&gt;封装cookie的添加，删除，查询方法&lt;/h2&gt;&lt;p&gt;cookie是存储在浏览器端的，可以用于存储sessionID，也可以用于自动登陆，记住密码等，但是在浏览器端并没有官方的操作cookie的方法，下面我们来封装一下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CookieUtil=｛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addCookie:function(key,value,options)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var str=key+&amp;quot;=&amp;quot;+escape(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(options.expires)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           var curr=new Date();   //options.expires的单位是小时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           curr.setTime(curr.getTime()+options.expires*3600*1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           options.expires=curr.toGMTString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var k in options)&amp;#123;   //有可能指定了cookie的path，cookie的domain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           str+=&amp;quot;;&amp;quot;+k+&amp;quot;=&amp;quot;+options[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        document.cookie=str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    queryCookie:function(key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var cookies=document.cookie;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     //获得浏览器端存储的cookie,格式是key=value;key=value;key=value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cookies+=&amp;quot;;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var start=cookies.indexOf(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(start&amp;lt;=-1)&amp;#123; return null; &amp;#125;  //说明不存在该cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var end=cookies.indexOf(&amp;quot;;&amp;quot;,start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var value=cookies.slice(start+key.length+1,end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return unescape(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deleteCookie:function(key)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var value=CookieUtil.queryCookie(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(value===null)&amp;#123;return false;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      CookieUtil.addCookie(key,value,&amp;#123;expires:0&amp;#125;);//把过期时间设置为0，浏览器会马上自动帮我们删除cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;同源策略是浏览器有一个很重要的概念。所谓同源是指，域名，协议，端口相同。不同源的客户端脚本(javascript、ActionScript)在没明确授权的情况下，不能读写对方的资源。简单的来说，浏览器允许包含在页面A的脚本访问第二个页面B的数据资源，这一切是建立在A和B页面是同源的基础上。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍js有哪些内置对象？&quot;&gt;&lt;a href=&quot;#介绍js有哪些内置对象？&quot; class=&quot;headerlink&quot; title=&quot;介绍js有哪些内置对象？&quot;&gt;&lt;/a&gt;介绍js有哪些内置对象？&lt;/h2&gt;&lt;p&gt; Object 是 JavaScript 中所有对象的父对象&lt;br&gt; 数据封装类对象：Object、Array、Boolean、Number 和 String&lt;br&gt; 其他对象：Function、Arguments、Math、Date、RegExp、Error&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;原型和原型链（-prototype-proto）&quot;&gt;&lt;a href=&quot;#原型和原型链（-prototype-proto）&quot; class=&quot;headerlink&quot; title=&quot;原型和原型链（ prototype, proto）&quot;&gt;&lt;/a&gt;原型和原型链（ prototype, &lt;em&gt;proto&lt;/em&gt;）&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;一切引用类型（数组，函数，Object,null,new Number（）等）都是对象，对象是属性的集合&lt;br&gt;一般对象通过函数来创建（new Object()，new Array();），但是函数还是一个对象。–鸡生蛋蛋生鸡&lt;/p&gt;
&lt;h3 id=&quot;1，原型&quot;&gt;&lt;a href=&quot;#1，原型&quot; class=&quot;headerlink&quot; title=&quot;1，原型&quot;&gt;&lt;/a&gt;1，原型&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3978131.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参照&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;prototype&quot;&gt;&lt;a href=&quot;#prototype&quot; class=&quot;headerlink&quot; title=&quot;prototype&quot;&gt;&lt;/a&gt;prototype&lt;/h4&gt;&lt;p&gt;每一个函数都有一个默认的属性是prototype，这个prototype属性值是一个对象。他里面有好多属性集合。所以可以函数的Prototype中增加自己的属性&lt;/p&gt;
&lt;h4 id=&quot;proto&quot;&gt;&lt;a href=&quot;#proto&quot; class=&quot;headerlink&quot; title=&quot;proto&quot;&gt;&lt;/a&gt;&lt;em&gt;proto&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;每一个对象都有一个隐藏属性&lt;em&gt;proto&lt;/em&gt;（可称之为为隐式原型），指向创建该对象的函数的prototype。&lt;br&gt;obj.proto = Object.prototype;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-44303899b95bcf41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5b833e45a89e197c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;2，原型-链&quot;&gt;&lt;a href=&quot;#2，原型-链&quot; class=&quot;headerlink&quot; title=&quot;2，原型 链&quot;&gt;&lt;/a&gt;2，原型 链&lt;/h4&gt;&lt;p&gt;访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着&lt;strong&gt;proto&lt;/strong&gt;这条链向上找，这就是原型链。&lt;br&gt;补充：直到Object.protype.proto = null; ，这就是出口&lt;/p&gt;
&lt;h4 id=&quot;3，-instanceOf&quot;&gt;&lt;a href=&quot;#3，-instanceOf&quot; class=&quot;headerlink&quot; title=&quot;3， instanceOf&quot;&gt;&lt;/a&gt;3， instanceOf&lt;/h4&gt;&lt;p&gt;判断 引用类型和父子关系&lt;br&gt;A instanceof B;&lt;br&gt;A.proto = B prototype;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-c5addb1b296e74ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;h3 id=&quot;闭包的定义？&quot;&gt;&lt;a href=&quot;#闭包的定义？&quot; class=&quot;headerlink&quot; title=&quot;闭包的定义？&quot;&gt;&lt;/a&gt;闭包的定义？&lt;/h3&gt;&lt;p&gt;创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的参数变量。&lt;/p&gt;
&lt;h2 id=&quot;闭包缺点&quot;&gt;&lt;a href=&quot;#闭包缺点&quot; class=&quot;headerlink&quot; title=&quot;闭包缺点&quot;&gt;&lt;/a&gt;闭包缺点&lt;/h2&gt;&lt;p&gt;因为内部函数可以访问外部函数的变量，所以外部函数的变量不能被释放，如果闭包嵌套过多，会导致内存占用大，要合理使用闭包。&lt;/p&gt;
&lt;h2 id=&quot;闭包与隔离作用域&quot;&gt;&lt;a href=&quot;#闭包与隔离作用域&quot; class=&quot;headerlink&quot; title=&quot;闭包与隔离作用域&quot;&gt;&lt;/a&gt;闭包与隔离作用域&lt;/h2&gt;&lt;p&gt;当闭包和立即函数结合使用的时候可以隔离作用域&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;for(var i=0;i&amp;lt;2;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (function(i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             setTimeout(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;作用域与作用域链-？&quot;&gt;&lt;a href=&quot;#作用域与作用域链-？&quot; class=&quot;headerlink&quot; title=&quot;作用域与作用域链 ？&quot;&gt;&lt;/a&gt;作用域与作用域链 ？&lt;/h2&gt;&lt;p&gt;0：函数作用域&lt;br&gt;1：作用域&lt;br&gt;2：作用域链&lt;br&gt;3：with语句主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。&lt;/p&gt;
&lt;p&gt;而Javascript压根没有块级作用域，而是有函数作用域.&lt;br&gt;作用域指的是变量的作用范围。&lt;br&gt;内部作用域由函数的参数，局部变量，函数构成。内部作用域和外部的作用域一层层的链接起来形成作用域链。&lt;br&gt;当在函数内部要访问一个变量的时候，首先查找自己的内部作用域有没有这个变量，如果没有就到这个函数所在的外层作用域中找，直到到window所在的作用域。&lt;br&gt;每个函数在声明的时候就默认有一个外部作用域的存在了，比如：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var t=4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var tem=12;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      funciton bar()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var temo=34;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       console.log(t+&amp;quot; &amp;quot;+tem+&amp;quot; &amp;quot;+temo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;bar（）的外部作用域是foo()作用域。foo()的外部作用域是window&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;this指向&quot;&gt;&lt;a href=&quot;#this指向&quot; class=&quot;headerlink&quot; title=&quot;this指向&quot;&gt;&lt;/a&gt;this指向&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在javascript当中每一个function都是一个对象，所以在这个里var temp=this 指的是function当前的对象。this是Javascript语言的一个关键字。它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一共有四种指向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数有所属对象时：指向所属对象&lt;/li&gt;
&lt;li&gt;没调用对象就指向全局对象&lt;/li&gt;
&lt;li&gt;构造函数中的 this：指向新对象&lt;/li&gt;
&lt;li&gt;通过 apply 或 call 或 bind 来改变 this 的所指。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;函数有所属对象时：指向所属对象&quot;&gt;&lt;a href=&quot;#函数有所属对象时：指向所属对象&quot; class=&quot;headerlink&quot; title=&quot;函数有所属对象时：指向所属对象&quot;&gt;&lt;/a&gt;函数有所属对象时：指向所属对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myObject = &amp;#123;value: 100&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myObject.getValue = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; console.log(this.value); // 输出 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // 输出 &amp;#123; value: 100, getValue: [Function] &amp;#125;，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; // 其实就是 myObject 对象本身&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; console.log(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; return this.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(myObject.getValue()); // =&amp;gt; 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;没调用对象就指向全局对象&quot;&gt;&lt;a href=&quot;#没调用对象就指向全局对象&quot; class=&quot;headerlink&quot; title=&quot;没调用对象就指向全局对象&quot;&gt;&lt;/a&gt;没调用对象就指向全局对象&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myObject = &amp;#123;value: 100&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myObject.getValue = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; var foo = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(this.value) // =&amp;gt; undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(this);// 输出全局对象 global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; foo(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; return this.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(myObject.getValue()); // =&amp;gt; 100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;构造器中的-this：指向新对象&quot;&gt;&lt;a href=&quot;#构造器中的-this：指向新对象&quot; class=&quot;headerlink&quot; title=&quot;构造器中的 this：指向新对象&quot;&gt;&lt;/a&gt;构造器中的 this：指向新对象&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var SomeClass = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; this.value = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myCreate = new SomeClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(myCreate.value); // 输出100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;apply-和-call-调用以及-bind-绑定：指向绑定的对象&quot;&gt;&lt;a href=&quot;#apply-和-call-调用以及-bind-绑定：指向绑定的对象&quot; class=&quot;headerlink&quot; title=&quot;apply 和 call 调用以及 bind 绑定：指向绑定的对象&quot;&gt;&lt;/a&gt;apply 和 call 调用以及 bind 绑定：指向绑定的对象&lt;/h3&gt;&lt;p&gt;call和apply，假设要改变fn函数内部的this的指向，指向obj，那么可以fn.call(obj);或者fn.apply(obj);&lt;br&gt;call和apply的区别是什么&lt;br&gt;其是call和apply的区别在于参数，他们两个的第一个参数都是一样的，表示调用该函数的对象，apply的第二个参数是数组，是[arg1,arg2,arg3]这种形式，而call是arg1,arg2,arg3这样的形式。&lt;br&gt;还有一个bind函数，var bar=fn.bind(obj);那么fn中的this就指向obj对象了，bind函数返回新的函数，这个函数内(bar)的this指针指向obj对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var myObject = &amp;#123;value: 100&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var foo = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; console.log(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(); // 全局变量 global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.apply(myObject); // &amp;#123; value: 100 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.call(myObject); // &amp;#123; value: 100 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var newFoo = foo.bind(myObject);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newFoo(); // &amp;#123; value: 100 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;事件模型&quot;&gt;&lt;a href=&quot;#事件模型&quot; class=&quot;headerlink&quot; title=&quot;事件模型&quot;&gt;&lt;/a&gt;事件模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原始事件模型&lt;/li&gt;
&lt;li&gt;捕获型事件模型&lt;/li&gt;
&lt;li&gt;冒泡事件模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DOM0:&lt;br&gt;原始事件模型就是btn.onclick=function(){}这种类型的事件模型（btn.onclick = null;）&lt;br&gt;基于DOM0的事件，对于同一个dom节点而言，只能注册一个，  取后面事件。后边注册的同种事件会覆盖之前注册的。&lt;/p&gt;
&lt;p&gt;DOM2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM2支持同一dom元素注册多个同种事件。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DOM2新增了捕获和冒泡的概念。&lt;/p&gt;
&lt;p&gt;DOM2事件通过addEventListener和removeEventListener管理，当然，这是标准。&lt;br&gt;  但IE8及其以下版本浏览器，自娱自乐，搞出了对应的attachEvent和detachEvent。&lt;br&gt;是通过addEventListener绑定的事件, 还有IE下的DOM2事件通过attachEvent绑定;&lt;br&gt;addEventListener当然就是注册事件，她有三个参数，分别为：”事件名称”, “事件回调”, “捕获/冒泡”。举个例子：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var btn = document.getElementById(&amp;quot;test&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;btn.addEventListener(&amp;quot;click&amp;quot;, function(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&amp;quot;ok&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, false);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-3fdcd14b524df962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;1：&lt;br&gt;冒泡事件模型是指事件从事件的发生地（目标元素），一直向上传递，直到window，&lt;br&gt;捕获型则恰好相反，事件是从window向下传递，直到事件的发生地（目标元素）&lt;br&gt;2：&lt;br&gt;同一个节点元素，给她添加捕获和冒泡事件模型，捕获比冒泡快 .&lt;br&gt;3：&lt;br&gt;比如说一下子注册了3个冒泡事件，那么执行顺序就按照注册的顺序来，先注册先执行。&lt;br&gt;4:&lt;br&gt;假如说外层div和内层div同时注册了捕获事件，那么点击内层div时，外层div的事件一定是先触发.&lt;br&gt;假如外层div和内层div都是注册的冒泡事件，点击内层div时，一定是内层div事件先执行，原理相同。&lt;br&gt;5:&lt;br&gt;事件触发时，会默认传入一个event对象，前边提过了，这个event对象上有一个方法：stopPropagation，通过此方法，可以阻止冒泡，这样外层div就接收不到事件了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IE是只支持冒泡事件模型的，下面是兼容各个浏览器的事件监听代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;EventUtil=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addListener:function(target,type,handler)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(target.addEventListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.addEventListener(type,handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else if(target.attachEvent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.attach(&amp;quot;on&amp;quot;+type,function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              handler.call(target);  //让handler中的this指向目标元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target[&amp;quot;on&amp;quot;+type]=handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; removeListener:function(target,type,handler)&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(target.removeEventListener)&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.removeEventListener(type,handler);          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;else if(target.detachEvent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.detachEvent(&amp;quot;on&amp;quot;+type,handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target[&amp;quot;on&amp;quot;+type]=null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getEvent:function(e)&amp;#123;      //获取事件对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var evt=window.event||e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     return evt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; getTarget:function(e)&amp;#123;      //获得目标对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var evt=EventUtil.getEvent(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     if(evt.target)&amp;#123; target=evt.target;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     else &amp;#123;target=evt.srcElement;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     return target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; stopPropagation:function(e)&amp;#123;  //停止冒泡&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var evt=EventUtil.getEvent(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     if(evt.stopPropagation) &amp;#123;evt.stopPropagation();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     else &amp;#123;evt.cancelBubble=true;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; preventDefault:function(e)&amp;#123;   //阻值默认行为的发生&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var evt=EventUtil.getEvent(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     if(evt.preventDefault)&amp;#123; evt.preventDefault(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     else &amp;#123;e.returnValue=false;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h2&gt;&lt;p&gt;应用场景：动态添加 或删除孩子的时候&lt;br&gt;含义：孩子的事委托父亲做&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ul id=&amp;quot;ul1&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;111&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;222&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;333&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;444&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oUl.onclick = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发.&lt;br&gt;当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：&lt;br&gt;Event对象提供了一个属性叫target，可以返回事件的目标节点，我们成为事件源，也就是说，target就可以表示为当前的事件操作的dom，但是不是真正操作dom，当然，这个是有兼容性的，标准浏览器用ev.target，IE浏览器用event.srcElement。&lt;br&gt;这里我们用nodeName来获取具体是什么标签名，这个返回的是一个大写的，我们需要转成小写再做比较（习惯问题）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　oUl.onclick = function(ev)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var ev = ev || window.event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var target = ev.target || ev.srcElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　if(target.nodeName.toLowerCase() == &amp;apos;li&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　 　　　　　　	alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　　  alert(target.innerHTML);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/liugang-vip/p/5616484.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h1&gt;&lt;h2 id=&quot;AMD与CMD&quot;&gt;&lt;a href=&quot;#AMD与CMD&quot; class=&quot;headerlink&quot; title=&quot;AMD与CMD&quot;&gt;&lt;/a&gt;AMD与CMD&lt;/h2&gt;&lt;p&gt;AMD 和 CMD&lt;/p&gt;
&lt;p&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。 CMD 是 SeaJS 在推广过程中对模块定义的规范化产出，类似的还有 CommonJS Modules/2.0 规范。 区别： AMD是提前执行，CMD是延迟执行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(function(require, exports, module)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a = require(&amp;apos;./a&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.doSomething();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 省略100行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var b = require(&amp;apos;./b&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.doSomething()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// CMD 依赖一开始就需要写好&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define([&amp;apos;./a&amp;apos;, &amp;apos;./b&amp;apos;], function(a, b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.doSomething()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 此处省略100行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.doSomething()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;CMD是服务端模块的规范，一个单独的文件就是一个模块。每个模块都是一个单独的作用域。CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。&lt;br&gt;所有代码都运行在模块作用域，不会污染全局作用域。&lt;br&gt;模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。&lt;br&gt;模块加载的顺序，按照其在代码中出现的顺序。&lt;br&gt;AMD是异步加载模块。由于Node.js主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快。不用考虑异步方式。但是浏览器端就比较适合AMD规范。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Node-amp-Express&quot;&gt;&lt;a href=&quot;#Node-amp-Express&quot; class=&quot;headerlink&quot; title=&quot;Node&amp;amp;Express&quot;&gt;&lt;/a&gt;Node&amp;amp;Express&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于node的其他web开发框架&lt;/li&gt;
&lt;li&gt;node 有关的知识点&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;对Node的优点和缺点提出了自己的看法？&quot;&gt;&lt;a href=&quot;#对Node的优点和缺点提出了自己的看法？&quot; class=&quot;headerlink&quot; title=&quot;对Node的优点和缺点提出了自己的看法？&quot;&gt;&lt;/a&gt;对Node的优点和缺点提出了自己的看法？&lt;/h2&gt;&lt;p&gt;  *（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，&lt;br&gt;    因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。&lt;br&gt;    此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，&lt;br&gt;    因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。&lt;/p&gt;
&lt;p&gt;  *（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，&lt;br&gt;    而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h2&gt;&lt;p&gt;Express 是一个基于 Node的极简灵活的web 应用开发框架。Express是在Node之上扩展了 Web 应用所需的基本功能。&lt;br&gt;Express完全是由中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。&lt;/p&gt;
&lt;h3 id=&quot;中间件含义&quot;&gt;&lt;a href=&quot;#中间件含义&quot; class=&quot;headerlink&quot; title=&quot;中间件含义&quot;&gt;&lt;/a&gt;中间件含义&lt;/h3&gt;&lt;p&gt;是一个函数或功能，（err,res,rep,next），是封装在程序中处理请求的功能。后台的请求分为一部分一部分，每一部分都有中间件来完成,之道响应完毕&lt;/p&gt;
&lt;h3 id=&quot;Express-几种中间件：&quot;&gt;&lt;a href=&quot;#Express-几种中间件：&quot; class=&quot;headerlink&quot; title=&quot;Express 几种中间件：&quot;&gt;&lt;/a&gt;Express 几种中间件：&lt;/h3&gt;&lt;p&gt;应用级中间件&lt;br&gt;绑定到app 对象使用 app.use()和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等&lt;/p&gt;
&lt;p&gt;路由级中间件&lt;br&gt;绑定的对象为 express.Router()。路由级使用 router.use() 加载&lt;/p&gt;
&lt;p&gt;错误处理中间件&lt;br&gt;4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。&lt;/p&gt;
&lt;p&gt;内置的中间件&lt;br&gt;express.static是 Express 唯一内置的中间件。负责在 Express 应用中托管静态资源。&lt;/p&gt;
&lt;p&gt;第三方中间件&lt;br&gt;例如 cookie-parser&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt; 跨域&lt;br&gt;输入url 经历了什么&lt;br&gt;http连接啥的&lt;br&gt;状态码&lt;br&gt;渲染页面&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;httphttps&quot;&gt;&lt;a href=&quot;#httphttps&quot; class=&quot;headerlink&quot; title=&quot;httphttps&quot;&gt;&lt;/a&gt;httphttps&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;a href=&quot;#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot; class=&quot;headerlink&quot; title=&quot;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;/a&gt;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&lt;/h2&gt;&lt;p&gt; 详细版：&lt;br&gt;      1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;&lt;br&gt;      2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;&lt;br&gt;      3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;&lt;br&gt;      4、进行HTTP协议会话，客户端发送报头(请求报头);&lt;br&gt;      5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;&lt;br&gt;      6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;&lt;br&gt;      7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;&lt;br&gt;      8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;&lt;br&gt;      9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;&lt;br&gt;      10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;简洁版：
  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
  载入解析到的资源文件，渲染页面，完成。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;a href=&quot;#页面渲染流程主要分三部分&quot; class=&quot;headerlink&quot; title=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;/a&gt;页面渲染流程主要分三部分&lt;/h2&gt;&lt;p&gt;HTML文档解析生成DOM树&lt;br&gt;DOM树构建完到Webkit绘制上下文&lt;br&gt;上下文到最终生成的图像 (JavaScript省略为JS)&lt;br&gt;当用户输入URL时候，WebKit调用其资源加载器加载该URL对应的网页。&lt;br&gt;加载器依赖网络模块建立连接，发送请求并接受答复。&lt;br&gt;WebKit收到各种网页或资源的数据，可能是同步或者是异步获取的。&lt;br&gt;网页被交给HTML解释器转换成一系列词语(Token)。&lt;br&gt;解释器根据词语构建节点(Node)，形成DOM树。&lt;br&gt;如果节点是JS，调用JS引擎解释并执行。&lt;br&gt;JS代码修改DOM树的结构&lt;br&gt;如果节点需要依赖其他资源，如图片、css等，调用资源加载器来加载他们，但他们是异步的，不会阻碍当前DOM树的继续构建，如果是JS资源URL(未标记异步)，则需要停止当前DOM数的构建，直到JS引擎执行后才继续构建DOM树。 至此会触发两个事件，一个时DOMConent表示DOM构建完全(和jQuery的$(function(){})()一样),后者是 onload 事件，表示DOM树所依赖的各种图片、css等资源加载完毕，通常这两个事件不是同时发生。&lt;br&gt;接下来是利用CSS和DOM树构建RenderObject树直到绘图上下文。&lt;/p&gt;
&lt;p&gt;CSS文件被CSS解释器解释成表示结构。&lt;br&gt;CSS解释器完成工作之后，在DOM树上附加解释后的样式信息，包括布局计算，这就是RenderObject树。&lt;br&gt;RenderObject节点在创建的同时，WebKit会根据网页的层次结构创建RenderLayer树，同时构建一个虚拟的绘图上下文。&lt;br&gt;实际上，DOM树，RenderObject树，RenderLayer树和绘图上下文在关闭浏览器前并不会被销毁。&lt;/p&gt;
&lt;p&gt;最后，根据绘图上下文生成最终图像，主要依赖2D和3D图形库。&lt;/p&gt;
&lt;p&gt;绘图上下文将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类，绘图实现类将2D图形库或者3D图形库绘制的结果保存下来，交给浏览器来显示。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;a href=&quot;#http状态码有那些？分别代表是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;/a&gt;http状态码有那些？分别代表是什么意思？&lt;/h2&gt;&lt;p&gt;简单版&lt;br&gt;      [&lt;br&gt;          100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息&lt;br&gt;          200  OK         正常返回信息&lt;br&gt;          201  Created      请求成功并且服务器创建了新的资源&lt;br&gt;          202  Accepted     服务器已接受请求，但尚未处理&lt;br&gt;          301  Moved Permanently  请求的网页已永久移动到新位置。&lt;br&gt;          302 Found          临时性重定向。&lt;br&gt;          303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。&lt;br&gt;          304  Not Modified 自从上次请求后，请求的网页未修改过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
      401 Unauthorized 请求未授权。
      403 Forbidden      禁止访问。
      404 Not Found      找不到如何与 URI 相匹配的资源。

      500 Internal Server Error  最常见的服务器端错误。
      503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
  ]

完整版
1**(信息类)：表示接收到请求并且继续处理
  100——客户必须继续发出请求
  101——客户要求服务器根据请求转换HTTP协议版本

2**(响应成功)：表示动作被成功接收、理解和接受
  200——表明该请求被成功地完成，所请求的资源发送回客户端
  201——提示知道新文件的URL
  202——接受和处理、但处理未完成
  203——返回信息不确定或不完整
  204——请求收到，但返回信息为空
  205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
  206——服务器已经完成了部分用户的GET请求

3**(重定向类)：为了完成指定的动作，必须接受进一步处理
  300——请求的资源可在多处得到
  301——本网页被永久性转移到另一个URL
  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。
  303——建议客户访问其他URL或访问方式
  304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用
  305——请求的资源必须从服务器指定的地址得到
  306——前一版本HTTP中使用的代码，现行版本中不再使用
  307——申明请求的资源临时性删除

4**(客户端错误类)：请求包含错误语法或不能正确执行
  400——客户端请求有语法错误，不能被服务器所理解
  401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
  HTTP 401.1 - 未授权：登录失败
  　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败
  　　HTTP 401.3 - ACL 禁止访问资源
  　　HTTP 401.4 - 未授权：授权被筛选器拒绝
  HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败
  402——保留有效ChargeTo头响应
  403——禁止访问，服务器收到请求，但是拒绝提供服务
  HTTP 403.1 禁止访问：禁止可执行访问
  　　HTTP 403.2 - 禁止访问：禁止读访问
  　　HTTP 403.3 - 禁止访问：禁止写访问
  　　HTTP 403.4 - 禁止访问：要求 SSL
  　　HTTP 403.5 - 禁止访问：要求 SSL 128
  　　HTTP 403.6 - 禁止访问：IP 地址被拒绝
  　　HTTP 403.7 - 禁止访问：要求客户证书
  　　HTTP 403.8 - 禁止访问：禁止站点访问
  　　HTTP 403.9 - 禁止访问：连接的用户过多
  　　HTTP 403.10 - 禁止访问：配置无效
  　　HTTP 403.11 - 禁止访问：密码更改
  　　HTTP 403.12 - 禁止访问：映射器拒绝访问
  　　HTTP 403.13 - 禁止访问：客户证书已被吊销
  　　HTTP 403.15 - 禁止访问：客户访问许可过多
  　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效
  HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效
  404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL
  405——用户在Request-Line字段定义的方法不允许
  406——根据用户发送的Accept拖，请求资源不可访问
  407——类似401，用户必须首先在代理服务器上得到授权
  408——客户端没有在用户指定的饿时间内完成请求
  409——对当前资源状态，请求不能完成
  410——服务器上不再有此资源且无进一步的参考地址
  411——服务器拒绝用户定义的Content-Length属性请求
  412——一个或多个请求头字段在当前请求中错误
  413——请求的资源大于服务器允许的大小
  414——请求的资源URL长于服务器允许的长度
  415——请求资源不支持请求项目格式
  416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
  417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。

5**(服务端错误类)：服务器不能正确执行一个正确的请求
  HTTP 500 - 服务器遇到错误，无法完成请求
  　　HTTP 500.100 - 内部服务器错误 - ASP 错误
  　　HTTP 500-11 服务器关闭
  　　HTTP 500-12 应用程序重新启动
  　　HTTP 500-13 - 服务器太忙
  　　HTTP 500-14 - 应用程序无效
  　　HTTP 500-15 - 不允许请求 global.asa
  　　Error 501 - 未实现
HTTP 502 - 网关错误
HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;JQUERY&quot;&gt;&lt;a href=&quot;#JQUERY&quot; class=&quot;headerlink&quot; title=&quot;JQUERY&quot;&gt;&lt;/a&gt;JQUERY&lt;/h1&gt;&lt;h2 id=&quot;1-你在公司是怎么用jquery的？&quot;&gt;&lt;a href=&quot;#1-你在公司是怎么用jquery的？&quot; class=&quot;headerlink&quot; title=&quot;1 你在公司是怎么用jquery的？&quot;&gt;&lt;/a&gt;1 你在公司是怎么用jquery的？&lt;/h2&gt;&lt;p&gt;答：在项目中是怎么用的是看看你有没有项目经验(根据自己的实际情况来回答) 你用过的选择器啊，复选框啊，表单啊，ajax啊，事件等配置&lt;a href=&quot;http://lib.csdn.net/base/jquery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;环境 下载jquery类库 在jsp页面引用jquery类库即可&lt;/p&gt;
&lt;p&gt;&lt;script type=&quot;text/[JavaScript](http://lib.csdn.net/base/javascript)&quot; src=&quot;jquery/jquery-1.7.2.min.js&quot;&gt;接下来通过在&lt;script&gt; $(function(){ }); &lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-你为什么要使用jquery？&quot;&gt;&lt;a href=&quot;#2-你为什么要使用jquery？&quot; class=&quot;headerlink&quot; title=&quot;2 你为什么要使用jquery？&quot;&gt;&lt;/a&gt;2 你为什么要使用jquery？&lt;/h2&gt;&lt;p&gt;答：因为jQuery是轻量级的框架，大小不到30kb,它有强大的选择器，出色的DOM操作的封装，有可靠的事件处理机制(jQuery在处理事件绑定的时候相当的可靠)，完善的ajax(它的ajax封装的非常的好，不需要考虑复杂浏览器的兼容性和XMLHttpRequest对象的创建和使用的问题。) 出色的浏览器的兼容性。 而且支持链式操作，隐式迭代。行为层和结构层的分离，还支持丰富的插件，jquery的文档也非常的丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-你觉得jquery有哪些好处？-答案同上&quot;&gt;&lt;a href=&quot;#3-你觉得jquery有哪些好处？-答案同上&quot; class=&quot;headerlink&quot; title=&quot;3 你觉得jquery有哪些好处？ 答案同上&quot;&gt;&lt;/a&gt;3 你觉得jquery有哪些好处？ 答案同上&lt;/h2&gt;&lt;h2 id=&quot;4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;a href=&quot;#4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot; class=&quot;headerlink&quot; title=&quot;4 你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;/a&gt;4 你使用jquery遇到过哪些问题，你是怎么解决的？&lt;/h2&gt;&lt;p&gt;答：这个答案是开发的，看你是否有相关的项目经验。例前台拿不到值，JSON 可是出现的错误(多了一个空格等)这编译是不会报错的 jquery库与其他库冲突：1&amp;gt;如果其他库在jquery库之前导入的话1.我们可以通过jquery.noconflict()将变量的$的控制权过度给其他库2.自定义快捷键,用一个变量接住jquery.noconflict()3.通过函数传参2&amp;gt;如果jquery库在其他库之前导入就直接使用jquery今天在处理一个数据问题时，发现jQuery.ajax()方法返回的值一直有问题，清除缓存后数据无误，多次&lt;a href=&quot;http://lib.csdn.net/base/softwaretest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试&lt;/a&gt;后发现返回的值都是之前的值，并且一直未执行url(后台为&lt;a href=&quot;http://lib.csdn.net/base/javase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;，设置断点一直未进入)。在网上查找下,发现是未设置type的原因。 如果没设置jQuery.ajax的type=”Post”，那么ajax就会默认type=”Get”，这就会导致之前数据被缓存起来。加上type=”Post”，问题解决！&lt;/p&gt;
&lt;h2 id=&quot;5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;a href=&quot;#5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot; class=&quot;headerlink&quot; title=&quot;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;/a&gt;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&lt;/h2&gt;&lt;p&gt;答 ：jQuery中的选择器大致分为:基本选择器，层次选择器，过滤选择器，表单选择器&lt;/p&gt;
&lt;h2 id=&quot;6-jquery中的选择器-和-css中的选择器有区别吗？&quot;&gt;&lt;a href=&quot;#6-jquery中的选择器-和-css中的选择器有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;6 jquery中的选择器 和 css中的选择器有区别吗？&quot;&gt;&lt;/a&gt;6 jquery中的选择器 和 css中的选择器有区别吗？&lt;/h2&gt;&lt;p&gt;答：jQuery选择器支持CSS里的选择器，jQuery选择器可用来添加样式和添加相应的行为CSS 中的选择器是只能添加相应的样式&lt;/p&gt;
&lt;h2 id=&quot;7-你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;a href=&quot;#7-你觉得jquery中的选择器有什么优势？&quot; class=&quot;headerlink&quot; title=&quot;7 你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;/a&gt;7 你觉得jquery中的选择器有什么优势？&lt;/h2&gt;&lt;p&gt;答：简单的写法 $(‘ID’) 来代替 document.getElementById()函数支持CSS1 到&lt;a href=&quot;http://lib.csdn.net/base/css3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt; 选择器完善的处理机制(就算写错了id也不会报错)&lt;/p&gt;
&lt;h2 id=&quot;8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;a href=&quot;#8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot; class=&quot;headerlink&quot; title=&quot;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;/a&gt;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&lt;/h2&gt;&lt;p&gt;答: 1 选择器中含有”.”,”#”,”[“ 等特殊字符的时候需要进行转译2 属性选择器的引号问题3 选择器中含有空格的注意事项&lt;/p&gt;
&lt;h2 id=&quot;9-jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;a href=&quot;#9-jquery对象和dom对象是怎样转换的？&quot; class=&quot;headerlink&quot; title=&quot;9 jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;/a&gt;9 jquery对象和dom对象是怎样转换的？&lt;/h2&gt;&lt;p&gt;答 ：jquery转DOM对象:jQuery 对象是一个数组对象，可以通过[index]的丰富得到相应的DOM对象还可以通过get[index]去得到相应的DOM对象。DOM对象转jQuery对象:$(DOM对象)&lt;/p&gt;
&lt;h2 id=&quot;10-你是如何使用jquery中的ajax的？&quot;&gt;&lt;a href=&quot;#10-你是如何使用jquery中的ajax的？&quot; class=&quot;headerlink&quot; title=&quot;10 你是如何使用jquery中的ajax的？&quot;&gt;&lt;/a&gt;10 你是如何使用jquery中的ajax的？&lt;/h2&gt;&lt;p&gt;答: 如果是一些常规的ajax程序的话，使用load(),$.get(),$.post(),就可以搞定了，一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理)及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;11-你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;a href=&quot;#11-你觉得jquery中的ajax好用吗，为什么？&quot; class=&quot;headerlink&quot; title=&quot;11 你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;/a&gt;11 你觉得jquery中的ajax好用吗，为什么？&lt;/h2&gt;&lt;p&gt;答: 好用的。 因为jQuery提供了一些日常开发中夙瑶的快捷操作，例 load，ajax，get，post等等，所以使用jQuery开发ajax将变得极其简单，我们就可以集中精力在业务和用户的体验上，不需要去理会那些繁琐的XMLHttpRequest对象了。&lt;/p&gt;
&lt;h2 id=&quot;12-jquery中-get-提交和-post-提交有区别吗？&quot;&gt;&lt;a href=&quot;#12-jquery中-get-提交和-post-提交有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;12 jquery中$.get()提交和$.post()提交有区别吗？&quot;&gt;&lt;/a&gt;12 jquery中$.get()提交和$.post()提交有区别吗？&lt;/h2&gt;&lt;p&gt;答: 1 $.get() 方法使用GET方法来进行异步请求的。$.post() 方法使用POST方法来进行异步请求的。2 get请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给Web服务器的，这种传递是对用户不可见的。3 get方式传输的数据大小不能超过2KB 而POST要大的多4 GET 方式请求的数据会被浏览器缓存起来，因此有安全问题。&lt;/p&gt;
&lt;h2 id=&quot;13-jquery中的load方法一般怎么用的？&quot;&gt;&lt;a href=&quot;#13-jquery中的load方法一般怎么用的？&quot; class=&quot;headerlink&quot; title=&quot;13 jquery中的load方法一般怎么用的？&quot;&gt;&lt;/a&gt;13 jquery中的load方法一般怎么用的？&lt;/h2&gt;&lt;p&gt;答：load方法一般在 载入远程HTML 代码并插入到DOM中的时候用，通常用来从Web服务器上获取静态的数据文件。如果要传递参数的话，可以使用$.get() 或 $.post()。&lt;/p&gt;
&lt;h2 id=&quot;14-在jquery中你是如何去操作样式的？&quot;&gt;&lt;a href=&quot;#14-在jquery中你是如何去操作样式的？&quot; class=&quot;headerlink&quot; title=&quot;14 在jquery中你是如何去操作样式的？&quot;&gt;&lt;/a&gt;14 在jquery中你是如何去操作样式的？&lt;/h2&gt;&lt;p&gt;答: addClass() 来追加样式 ，removeClass() 来删除样式，toggle() 来切换样式&lt;/p&gt;
&lt;h2 id=&quot;15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;a href=&quot;#15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot; class=&quot;headerlink&quot; title=&quot;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;/a&gt;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&lt;/h2&gt;&lt;p&gt;答: 首先去装载文档，在页面家在完毕后，浏览器会通过javascript 为DOM元素添加事件。&lt;/p&gt;
&lt;h2 id=&quot;16-你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;a href=&quot;#16-你使用过jquery中的动画吗，是怎样用的？&quot; class=&quot;headerlink&quot; title=&quot;16 你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;/a&gt;16 你使用过jquery中的动画吗，是怎样用的？&lt;/h2&gt;&lt;p&gt;答:使用过。hide() 和 show() 同时修改多个样式属性。像高度，宽度，不透明度。 fadeIn() 和fadeOut() fadeTo() 只改变不透明度slideUp() 和 slideDown() slideToggle() 只改变高度animate() 属于自定义动画的方法.&lt;/p&gt;
&lt;h2 id=&quot;17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot;&gt;&lt;a href=&quot;#17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot; class=&quot;headerlink&quot; title=&quot;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&quot;&gt;&lt;/a&gt;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&lt;/h2&gt;&lt;h2 id=&quot;18-你一般用什么去提交数据，为什么？&quot;&gt;&lt;a href=&quot;#18-你一般用什么去提交数据，为什么？&quot; class=&quot;headerlink&quot; title=&quot;18 你一般用什么去提交数据，为什么？&quot;&gt;&lt;/a&gt;18 你一般用什么去提交数据，为什么？&lt;/h2&gt;&lt;p&gt;答:一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;19-在jquery中引入css有几种方式？&quot;&gt;&lt;a href=&quot;#19-在jquery中引入css有几种方式？&quot; class=&quot;headerlink&quot; title=&quot;19 在jquery中引入css有几种方式？&quot;&gt;&lt;/a&gt;19 在jquery中引入css有几种方式？&lt;/h2&gt;&lt;p&gt;答:四种 行内式，内嵌式，导入式，链接式&lt;/p&gt;
&lt;h2 id=&quot;20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;a href=&quot;#20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;/a&gt;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&lt;/h2&gt;&lt;p&gt;答:append(),appendTo(),prepend(),prependTo(),after(),insertAfter()，before(),insertBefore() 大致可以分为 内部追加和外部追加append() 表式向每个元素内部追加内容。appendTo()表示 讲所有的元素追加到指定的元素中。例$(A)appendTo(B) 是将A追加到B中下面的方法解释类似。&lt;/p&gt;
&lt;h2 id=&quot;21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;a href=&quot;#21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot; class=&quot;headerlink&quot; title=&quot;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;/a&gt;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&lt;/h2&gt;&lt;p&gt;答: wrapAll(),wrap(), wrapInner() 需要在文档中插入额外的结构化标记的时候可以使用这些包裹的方法应为它不会帛画原始文档的语义&lt;/p&gt;
&lt;h2 id=&quot;22-jquery中如何来获取或和设置属性？&quot;&gt;&lt;a href=&quot;#22-jquery中如何来获取或和设置属性？&quot; class=&quot;headerlink&quot; title=&quot;22 jquery中如何来获取或和设置属性？&quot;&gt;&lt;/a&gt;22 jquery中如何来获取或和设置属性？&lt;/h2&gt;&lt;p&gt;jQuery中可以用attr()方法来获取和设置元素属性removeAttr() 方法来删除元素属性&lt;/p&gt;
&lt;h2 id=&quot;23-如何来设置和获取HTML-和文本的值？&quot;&gt;&lt;a href=&quot;#23-如何来设置和获取HTML-和文本的值？&quot; class=&quot;headerlink&quot; title=&quot;23 如何来设置和获取HTML 和文本的值？&quot;&gt;&lt;/a&gt;23 如何来设置和获取HTML 和文本的值？&lt;/h2&gt;&lt;p&gt;答：html()方法 类似于innerHTML属性 可以用来读取或者设置某个元素中的HTML内容注意：html() 可以用于xhtml文档 不能用于xml文档text() 类似于innerText属性 可以用来读取或设置某个元素中文本内容。val() 可以用来设置和获取元素的值&lt;/p&gt;
&lt;h2 id=&quot;24-你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;a href=&quot;#24-你jquery中有哪些方法可以遍历节点？&quot; class=&quot;headerlink&quot; title=&quot;24 你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;/a&gt;24 你jquery中有哪些方法可以遍历节点？&lt;/h2&gt;&lt;p&gt;答 ：children() 取得匹配元素的子元素集合,只考虑子元素不考虑后代元素 next() 取得匹配元素后面紧邻的同辈元素prev() 取得匹配元素前面紧邻的同辈元素siblings() 取得匹配元素前后的所有同辈元素closest() 取得最近的匹配元素find() 取得匹配元素中的元素集合 包括子代和后代&lt;/p&gt;
&lt;h2 id=&quot;25-子元素选择器-和后代选择器元素有什么区别？&quot;&gt;&lt;a href=&quot;#25-子元素选择器-和后代选择器元素有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;25 子元素选择器 和后代选择器元素有什么区别？&quot;&gt;&lt;/a&gt;25 子元素选择器 和后代选择器元素有什么区别？&lt;/h2&gt;&lt;p&gt;答:子代元素是找子节点下的所有元素,后代元素是找子节点或子节点的子节点中的元素&lt;/p&gt;
&lt;h2 id=&quot;26-在jquery中可以替换节点吗？&quot;&gt;&lt;a href=&quot;#26-在jquery中可以替换节点吗？&quot; class=&quot;headerlink&quot; title=&quot;26 在jquery中可以替换节点吗？&quot;&gt;&lt;/a&gt;26 在jquery中可以替换节点吗？&lt;/h2&gt;&lt;p&gt;答：可以 在jQuery中有两者替换节点的方式 replaceWith() 和 replaceAll()例如在&lt;/p&gt;&lt;p title=&quot;hao are you&quot;&gt;hao are you&lt;/p&gt;替换成&lt;strong&gt;I am fine&lt;/strong&gt;$(‘p’).replaceWith(‘&lt;strong&gt;I am fine&lt;/strong&gt;‘); replaceAll 与replaceWith的用法前后调换一下即可。&lt;em&gt;**&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;27-你觉得beforeSend方法有什么用？&quot;&gt;&lt;a href=&quot;#27-你觉得beforeSend方法有什么用？&quot; class=&quot;headerlink&quot; title=&quot;27 你觉得beforeSend方法有什么用？&quot;&gt;&lt;/a&gt;27 你觉得beforeSend方法有什么用？&lt;/h2&gt;&lt;p&gt;答：发送请求前可以修改XMLHttpRequest对象的函数，在beforeSend中如果返回false 可以取消本次的Ajax请求。XMLHttpRequest对象是唯一的参数所以在这个方法里可以做验证&lt;/p&gt;
&lt;h2 id=&quot;28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot;&gt;&lt;a href=&quot;#28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot; class=&quot;headerlink&quot; title=&quot;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&quot;&gt;&lt;/a&gt;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&lt;/h2&gt;&lt;p&gt;答: $(‘prev~div’) 只能选择’#prev’元素后面的同辈&lt;div&gt;元素而siblings()方法与前后的文职无关，只要是同辈节点就都能匹配。&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;29-你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;a href=&quot;#29-你在ajax中使用过JSON吗，你是如何用的？&quot; class=&quot;headerlink&quot; title=&quot;29 你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;/a&gt;29 你在ajax中使用过JSON吗，你是如何用的？&lt;/h2&gt;&lt;p&gt;答:使用过，在$.getJSON() 方法的时候就是。因为 $.getJSON() 就是用于加载JSON文件的&lt;/p&gt;
&lt;h2 id=&quot;30-有哪些查询节点的选择器？&quot;&gt;&lt;a href=&quot;#30-有哪些查询节点的选择器？&quot; class=&quot;headerlink&quot; title=&quot;30 有哪些查询节点的选择器？&quot;&gt;&lt;/a&gt;30 有哪些查询节点的选择器？&lt;/h2&gt;&lt;p&gt;答：我在公司使用过 :first 查询第一个，:last 查询最后一个，:odd查询奇数但是索引从0开始:even 查询偶数，:eq(index)查询相等的 ,:gt(index)查询大于index的 ,:lt查询小于index:header 选取所有的标题等&lt;/p&gt;
&lt;h2 id=&quot;31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot;&gt;&lt;a href=&quot;#31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot; class=&quot;headerlink&quot; title=&quot;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&quot;&gt;&lt;/a&gt;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&lt;/h2&gt;&lt;p&gt;答:能。 使用nextAll() 和使用$(‘prev~siblindgs’) 是一样的&lt;/p&gt;
&lt;h2 id=&quot;32-jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;a href=&quot;#32-jQuery中有几种方法可以来设置和获取样式&quot; class=&quot;headerlink&quot; title=&quot;32 jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;/a&gt;32 jQuery中有几种方法可以来设置和获取样式&lt;/h2&gt;&lt;p&gt;答 ：addClass() 方法，attr() 方法&lt;/p&gt;
&lt;h2 id=&quot;33-document-ready-方法和window-onload有什么区别？&quot;&gt;&lt;a href=&quot;#33-document-ready-方法和window-onload有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;33 $(document).ready()方法和window.onload有什么区别？&quot;&gt;&lt;/a&gt;33 $(document).ready()方法和window.onload有什么区别？&lt;/h2&gt;&lt;p&gt;答: 两个方法有相似的功能，但是在实行时机方面是有区别的。 1window.onload方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。2 $(document).ready() 方法可以在DOM载入就绪时就对其进行操纵，并调用执行绑定的函数。&lt;/p&gt;
&lt;h2 id=&quot;34-jQuery是如何处理缓存的？&quot;&gt;&lt;a href=&quot;#34-jQuery是如何处理缓存的？&quot; class=&quot;headerlink&quot; title=&quot;34 jQuery是如何处理缓存的？&quot;&gt;&lt;/a&gt;34 jQuery是如何处理缓存的？&lt;/h2&gt;&lt;p&gt;答 ：要处理缓存就是禁用缓存.1 通过$.post() 方法来获取数据，那么默认就是禁用缓存的。2 通过$.get()方法 来获取数据，可以通过设置时间戳来避免缓存。可以在URL后面加上+(+new Date)例 $.get(‘ajax.xml?’+(+new Date),function () { //内容 }); 3 通过$.ajax 方法来获取数据，只要设置cache:false即可。&lt;/p&gt;
&lt;h2 id=&quot;35-getScript-方法-和-getJson-方法有什么区别？&quot;&gt;&lt;a href=&quot;#35-getScript-方法-和-getJson-方法有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&quot;&gt;&lt;/a&gt;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&lt;/h2&gt;&lt;p&gt;答: 1 $.getScript() 方法可以直接加载.js文件，并且不需要对javascript文件进行处理，javascript文件会自动执行。2 $.getJson() 是用于加载JSON 文件的 ，用法和$.getScript()&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;锚点&quot;&gt;&lt;a href=&quot;#锚点&quot; class=&quot;headerlink&quot; title=&quot;锚点&quot;&gt;&lt;/a&gt;锚点&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
