<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>关凯丽的博客</title>
  <subtitle>前端打杂</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://carryguan.com/"/>
  <updated>2017-09-17T15:47:01.276Z</updated>
  <id>http://carryguan.com/</id>
  
  <author>
    <name>Carry Guan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>a</title>
    <link href="http://carryguan.com/2017/09/17/a/"/>
    <id>http://carryguan.com/2017/09/17/a/</id>
    <published>2017-09-17T15:47:01.000Z</published>
    <updated>2017-09-17T15:47:01.276Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>隐藏元素display与visibility的区别</title>
    <link href="http://carryguan.com/2017/07/07/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A0/"/>
    <id>http://carryguan.com/2017/07/07/隐藏元素/</id>
    <published>2017-07-07T04:50:21.000Z</published>
    <updated>2017-08-07T14:57:49.000Z</updated>
    
    <content type="html">&lt;p&gt;最近项目中涉及到节点隐藏的问题，发现自己不太了解，趁热打铁，我们一起来学习一下吧！&lt;br&gt;着重讲一下 display和visibility在隐藏元素时候的区别:&lt;/p&gt;
&lt;h1 id=&quot;属性说明&quot;&gt;&lt;a href=&quot;#属性说明&quot; class=&quot;headerlink&quot; title=&quot;属性说明&quot;&gt;&lt;/a&gt;属性说明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;display:none&lt;br&gt;隐藏元素时：渲染树不构建元素，通俗说，页面没有这个节点，所以其不占位置空间&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;visibility:hidden&lt;br&gt; 隐藏元素时：渲染树构建元素（页面有这个节点）但是不渲染出来，页面上不可见这个元素，但是会占空间&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;例如&quot;&gt;&lt;a href=&quot;#例如&quot; class=&quot;headerlink&quot; title=&quot;例如&quot;&gt;&lt;/a&gt;例如&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-15007a1f549aa94e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;点击display-none-红色方块不见了&quot;&gt;&lt;a href=&quot;#点击display-none-红色方块不见了&quot; class=&quot;headerlink&quot; title=&quot;点击display:none,红色方块不见了&quot;&gt;&lt;/a&gt;点击display:none,红色方块不见了&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-8b5de54bf8f747c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;点击-visibility&quot;&gt;&lt;a href=&quot;#点击-visibility&quot; class=&quot;headerlink&quot; title=&quot;点击 visibility&quot;&gt;&lt;/a&gt;点击 visibility&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-71652ba59b060d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;如果想让某一段代码在前台不显示，最简单的方法是用css的display:none,这样，下边的内容就自动填补这个空隙。但是在一些特殊的情况下，我们只需要隐藏这个元素，但它的位置不能被占用了，那么，visibility:hidden就可以实现这个要求。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;源码&quot;&gt;&lt;a href=&quot;#源码&quot; class=&quot;headerlink&quot; title=&quot;源码&quot;&gt;&lt;/a&gt;源码&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;title&amp;gt;Hello, World&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/style.css&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #one&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: pink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #two&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #three&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #four&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #five&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: orange;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .wh&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;div id = &amp;quot;one&amp;quot; class=&amp;quot;wh&amp;quot;&amp;gt;这是第一个&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;div id = &amp;quot;two&amp;quot; class=&amp;quot;wh&amp;quot;&amp;gt;被隐藏方式为：display = &amp;quot;none&amp;quot;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;div id = &amp;quot;three&amp;quot; class=&amp;quot;wh&amp;quot;&amp;gt;第三个&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;div id = &amp;quot;four&amp;quot; class=&amp;quot;wh&amp;quot;&amp;gt;被隐藏2方式为：visibility = &amp;quot;hidden&amp;quot;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;div id = &amp;quot;five&amp;quot; class=&amp;quot;wh&amp;quot;&amp;gt;第三个&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;button id = &amp;quot;btn1&amp;quot;&amp;gt;display:none&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;button id = &amp;quot;btn2&amp;quot;&amp;gt;visibility:hidden&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var btn1 = document.getElementById(&amp;quot;btn1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var btn2 = document.getElementById(&amp;quot;btn2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var two = document.getElementById(&amp;quot;two&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var four = document.getElementById(&amp;quot;four&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btn1.onclick = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(two.style.display === &amp;quot;none&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        two.style.display = &amp;quot;block&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        two.style.display = &amp;quot;none&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btn2.onclick = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(four.style.visibility === &amp;quot;visible&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        four.style.visibility = &amp;quot;hidden&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        four.style.visibility = &amp;quot;visible&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中涉及到节点隐藏的问题，发现自己不太了解，趁热打铁，我们一起来学习一下吧！&lt;br&gt;着重讲一下 display和visibility在隐藏元素时候的区别:&lt;/p&gt;
&lt;h1 id=&quot;属性说明&quot;&gt;&lt;a href=&quot;#属性说明&quot; class=&quot;headerlink&quot; title=&quot;属性说明&quot;&gt;&lt;/a&gt;属性说明&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;display:none&lt;br&gt;隐藏元素时：渲染树不构建元素，通俗说，页面没有这个节点，所以其不占位置空间
    
    </summary>
    
    
      <category term="visible" scheme="http://carryguan.com/tags/visible/"/>
    
      <category term="display" scheme="http://carryguan.com/tags/display/"/>
    
  </entry>
  
  <entry>
    <title>动态生成dom事件失效</title>
    <link href="http://carryguan.com/2017/06/03/%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90dom%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88/"/>
    <id>http://carryguan.com/2017/06/03/动态生成dom事件失效/</id>
    <published>2017-06-03T07:37:09.000Z</published>
    <updated>2017-08-07T15:02:11.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-6150a13b12b6623a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题来由&quot;&gt;&lt;a href=&quot;#问题来由&quot; class=&quot;headerlink&quot; title=&quot;问题来由&quot;&gt;&lt;/a&gt;问题来由&lt;/h2&gt;&lt;p&gt;最近在项目中有涉及到排序后回写按钮元素，按钮的事件失效。&lt;br&gt;这可以分为一类问题：重写元素/动态生成元素后，事件的失效。&lt;br&gt;想给每一行的 td&amp;gt;button添加点击事件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;td class=&amp;quot;action&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;button class=&amp;quot;mark&amp;quot; name=&amp;quot;ignore&amp;quot; &amp;gt; &amp;lt;/button&amp;gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给表格数据排序后，表格中的按钮事件失效。追溯了一下原因，排序后，初始化事件无法获取到button.&lt;br&gt;类似问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增加删除子节点&lt;/li&gt;
&lt;li&gt;表格排序后的节点&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;原理是利用冒泡实现事件委托，也就是给生成节点的父节点预先绑定事件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;jq的解决办法：&quot;&gt;&lt;a href=&quot;#jq的解决办法：&quot; class=&quot;headerlink&quot; title=&quot;jq的解决办法：&quot;&gt;&lt;/a&gt;jq的解决办法：&lt;/h3&gt;&lt;p&gt;$(‘.tablesort’).on(‘click’,’.mark’,function () {})&lt;br&gt;这里提一下：&lt;br&gt;早期对页面上后期加载的动态元素,赋事件或值的时候,是使用live的.&lt;br&gt; 由于效率比较低(其实数据不多也感觉不出来),后面使用delegate委托来代替了,&lt;br&gt;再后面,1.7以后使用on 来代替delegate了. live,delegate在新版本中都还可以用&lt;br&gt;网上有很多教程是利用 $(‘.action .mark’).live(‘click’,function () {})，但是现在不建议使用&lt;br&gt;&lt;a href=&quot;http://www.jb51.net/article/105869.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;原生js&quot;&gt;&lt;a href=&quot;#原生js&quot; class=&quot;headerlink&quot; title=&quot;原生js&quot;&gt;&lt;/a&gt;原生js&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/88164e43d7b3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/88164e43d7b3&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用这个事件对象给父节点绑定事件&lt;/li&gt;
&lt;li&gt;当事件触发的时候判断事件源对象是否是按钮&lt;/li&gt;
&lt;li&gt;如果是按钮的话再执行事件行为&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-6150a13b12b6623a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题来由&quot;&gt;&lt;a href=&quot;#问题来由&quot; class=&quot;headerlink&quot; title=&quot;问题来由&quot;&gt;&lt;/a&gt;问题来由&lt;/h2&gt;&lt;p&gt;最近在项目中有涉及到排序后回写按钮元素，按钮的事件失效。&lt;br&gt;这可以分为一类问题：重写元素/动态生成元素后，事件的失效。&lt;br&gt;想给每一行的 td&amp;gt;button添加点击事件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;td class=&amp;quot;action&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;button class=&amp;quot;mark&amp;quot; name=&amp;quot;ignore&amp;quot; &amp;gt; &amp;lt;/button&amp;gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;给表格数据排序后，表格中的按钮事件失效。追溯了一下原因，排序后，初始化事件无法获取到button.&lt;br&gt;类似问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增加删除子节点&lt;/li&gt;
&lt;li&gt;表格排序后的节点
    
    </summary>
    
    
      <category term="dom" scheme="http://carryguan.com/tags/dom/"/>
    
      <category term="事件" scheme="http://carryguan.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="动态dom" scheme="http://carryguan.com/tags/%E5%8A%A8%E6%80%81dom/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://carryguan.com/2017/04/27/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://carryguan.com/2017/04/27/git常用命令/</id>
    <published>2017-04-27T14:28:33.000Z</published>
    <updated>2017-08-07T14:34:33.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c62584774ba542.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A7BB8518D944E893213CFB6274266A8D.JPG&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;git-流程&quot;&gt;&lt;a href=&quot;#git-流程&quot; class=&quot;headerlink&quot; title=&quot;git 流程&quot;&gt;&lt;/a&gt;git 流程&lt;/h1&gt;&lt;p&gt;git status&lt;br&gt;git add .&lt;br&gt;git commit&lt;br&gt;git pull&lt;br&gt;git push origin branchName:refs/for/branchName&lt;br&gt;git pull&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;create-branch&quot;&gt;&lt;a href=&quot;#create-branch&quot; class=&quot;headerlink&quot; title=&quot;create branch&quot;&gt;&lt;/a&gt;create branch&lt;/h1&gt;&lt;p&gt;git checkout -b featureOne&lt;br&gt;git push —set-upstream origin featureOne&lt;br&gt;git add .&lt;br&gt;git commit -m ‘msg’&lt;br&gt;git pull&lt;br&gt;git push origin featureOne:refs/for/featureOne&lt;br&gt;git pull&lt;/p&gt;
&lt;h1 id=&quot;merge-to-master&quot;&gt;&lt;a href=&quot;#merge-to-master&quot; class=&quot;headerlink&quot; title=&quot;merge to master&quot;&gt;&lt;/a&gt;merge to master&lt;/h1&gt;&lt;p&gt;git checkout master&lt;br&gt;git merge featureOne&lt;br&gt;git add .&lt;br&gt;git commit -m ‘merge’&lt;br&gt;git pull&lt;br&gt;git push origin master:refs/for/master&lt;br&gt;git pull&lt;/p&gt;
&lt;p&gt;done&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c62584774ba542.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;A7BB8518D944E893213CFB6274266A8D.JPG&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;git-流程&quot;&gt;&lt;a href=&quot;#git-流程&quot; class=&quot;headerlink&quot; title=&quot;git 流程&quot;&gt;&lt;/a&gt;git 流程&lt;/h1&gt;&lt;p&gt;git status&lt;br&gt;git add .&lt;br&gt;git commit&lt;br&gt;git pull&lt;br&gt;git push origin branchName:refs/for/branchName&lt;br&gt;git pull&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://carryguan.com/tags/git/"/>
    
      <category term="工作开发" scheme="http://carryguan.com/tags/%E5%B7%A5%E4%BD%9C%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验</title>
    <link href="http://carryguan.com/2017/03/20/os/"/>
    <id>http://carryguan.com/2017/03/20/os/</id>
    <published>2017-03-20T14:34:54.000Z</published>
    <updated>2017-03-20T14:41:20.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;操作系统实验总结&quot;&gt;&lt;a href=&quot;#操作系统实验总结&quot; class=&quot;headerlink&quot; title=&quot;操作系统实验总结&quot;&gt;&lt;/a&gt;操作系统实验总结&lt;/h1&gt;&lt;h2 id=&quot;实验源码&quot;&gt;&lt;a href=&quot;#实验源码&quot; class=&quot;headerlink&quot; title=&quot;实验源码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实验一 进程控制 processProject &lt;/li&gt;
&lt;li&gt;实验二  分页式存储管理 changeAdress&lt;/li&gt;
&lt;li&gt;实验三 页面置换算法 pageDispatch&lt;/li&gt;
&lt;li&gt;实验四  进程调度算法 dispachPro&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验一：进程调度-processProject&quot;&gt;&lt;a href=&quot;#实验一：进程调度-processProject&quot; class=&quot;headerlink&quot; title=&quot;实验一：进程调度 processProject&quot;&gt;&lt;/a&gt;实验一：进程调度 processProject&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b6aaedeba9ad2a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实验过程：&quot;&gt;&lt;a href=&quot;#实验过程：&quot; class=&quot;headerlink&quot; title=&quot;实验过程：&quot;&gt;&lt;/a&gt;实验过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义数据结构pcb和相应的队列（入，出，显示）操作&lt;/li&gt;
&lt;li&gt;编写函数：&lt;pre&gt;&lt;code&gt;创建进程（-就绪），
进程调度（就绪-执行），
进程阻塞（执行-阻塞），
进程激活（阻塞-就绪），
时间片用完（执行-就绪）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;输入相应的字母，进行相应操作&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d3abb5576e2dae6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;运行代码-实验源码&quot;&gt;&lt;a href=&quot;#运行代码-实验源码&quot; class=&quot;headerlink&quot; title=&quot;运行代码 实验源码&quot;&gt;&lt;/a&gt;运行代码 &lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;命令行输入 &lt;/p&gt;
&lt;h4 id=&quot;node-test3-js&quot;&gt;&lt;a href=&quot;#node-test3-js&quot; class=&quot;headerlink&quot; title=&quot;node test3.js&quot;&gt;&lt;/a&gt;node test3.js&lt;/h4&gt;&lt;hr&gt;
&lt;h2 id=&quot;实验二：分页式存储管理-changeAdress&quot;&gt;&lt;a href=&quot;#实验二：分页式存储管理-changeAdress&quot; class=&quot;headerlink&quot; title=&quot;实验二：分页式存储管理 changeAdress&quot;&gt;&lt;/a&gt;实验二：分页式存储管理 changeAdress&lt;/h2&gt;&lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的 :&quot;&gt;&lt;/a&gt;目的 :&lt;/h3&gt;&lt;p&gt;分页式存储管理系统是内存非连续存储管理中基本的方法，可以通过把一个作业分成多个页面分配到不连续的内存块中去。实验可以通过位示图的方式来模拟内存的使用情况，为每个作业建立页表用于完成正确的地址转换。&lt;/p&gt;
&lt;h3 id=&quot;内容和步骤：&quot;&gt;&lt;a href=&quot;#内容和步骤：&quot; class=&quot;headerlink&quot; title=&quot;内容和步骤：&quot;&gt;&lt;/a&gt;内容和步骤：&lt;/h3&gt;&lt;p&gt;利用键盘输入本模拟系统的物理块的大小，作业的页表中的块号；完成逻辑地址转换成相应的物理地址的过程。&lt;/p&gt;
&lt;h3 id=&quot;具体过程：&quot;&gt;&lt;a href=&quot;#具体过程：&quot; class=&quot;headerlink&quot; title=&quot;具体过程：&quot;&gt;&lt;/a&gt;具体过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;建立一张位示图，用来模拟内存的分配情况，利用随机数产生一组0和1的数对应内存的使用情况。&lt;/li&gt;
&lt;li&gt;输入块（页）的大小，通过模拟位示图为本作业分配内存空间建立相应的页表（长度不定）；&lt;/li&gt;
&lt;li&gt;录入逻辑地址转换成相应的物理地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;运行代码-实验源码-1&quot;&gt;&lt;a href=&quot;#运行代码-实验源码-1&quot; class=&quot;headerlink&quot; title=&quot;运行代码 实验源码&quot;&gt;&lt;/a&gt;运行代码 &lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实验源码&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;命令行输入&lt;/p&gt;
&lt;h4 id=&quot;node-main-js&quot;&gt;&lt;a href=&quot;#node-main-js&quot; class=&quot;headerlink&quot; title=&quot;node main.js&quot;&gt;&lt;/a&gt;node main.js&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-80700832d08db17d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验三-页面置换算法-pageDispatch&quot;&gt;&lt;a href=&quot;#实验三-页面置换算法-pageDispatch&quot; class=&quot;headerlink&quot; title=&quot;实验三 页面置换算法 pageDispatch&quot;&gt;&lt;/a&gt;实验三 页面置换算法 pageDispatch&lt;/h2&gt;&lt;h3 id=&quot;目的：&quot;&gt;&lt;a href=&quot;#目的：&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h3&gt;&lt;p&gt;实现请求页式地址转换中出现的缺页现象中，用到的先进先出FIFO、最近最久未使用LRU、最佳OPT置换算法。熟悉文件的基本操作（读、写）。&lt;/p&gt;
&lt;h3 id=&quot;内容和步骤：-1&quot;&gt;&lt;a href=&quot;#内容和步骤：-1&quot; class=&quot;headerlink&quot; title=&quot;内容和步骤：&quot;&gt;&lt;/a&gt;内容和步骤：&lt;/h3&gt;&lt;p&gt;利用键盘输入本模拟系统分配给作业的内存物理块个数，作业在执行过程中的页面调度次序。计算出三种算法的缺页次数和缺页率。&lt;/p&gt;
&lt;h3 id=&quot;OPT-FIFO-LRU&quot;&gt;&lt;a href=&quot;#OPT-FIFO-LRU&quot; class=&quot;headerlink&quot; title=&quot;OPT ,FIFO ,LRU&quot;&gt;&lt;/a&gt;OPT ,FIFO ,LRU&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;OPT :(最佳置换算法) 将内存块里面找到未来最晚出现的值（某值将来第一次出现的下标）,删掉&lt;/li&gt;
&lt;li&gt;FIFO：（first in first out）将内存块中最早进的最早删了&lt;/li&gt;
&lt;li&gt;LRU：(least recently used) 最近最少使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;具体过程：-1&quot;&gt;&lt;a href=&quot;#具体过程：-1&quot; class=&quot;headerlink&quot; title=&quot;具体过程：&quot;&gt;&lt;/a&gt;具体过程：&lt;/h3&gt;&lt;p&gt;１、输入分配给本作业的块数，模拟作业执行的逻辑地址转换成页面调度次序；&lt;br&gt;２、分别采用OPT、FIFO、LRU置换算法，利用堆栈结构完成页面置换；记录被换出的页面和新换入的页面。&lt;br&gt;３、将得到的结果写入到文本文件中。&lt;/p&gt;
&lt;h3 id=&quot;执行结果&quot;&gt;&lt;a href=&quot;#执行结果&quot; class=&quot;headerlink&quot; title=&quot;执行结果&quot;&gt;&lt;/a&gt;执行结果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-ae8ad77a4cd48b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-aa36a5dc63ad68e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验四-进程调度算法-dispachPro&quot;&gt;&lt;a href=&quot;#实验四-进程调度算法-dispachPro&quot; class=&quot;headerlink&quot; title=&quot;实验四  进程调度算法 dispachPro&quot;&gt;&lt;/a&gt;实验四  进程调度算法 dispachPro&lt;/h2&gt;&lt;h3 id=&quot;目的：-1&quot;&gt;&lt;a href=&quot;#目的：-1&quot; class=&quot;headerlink&quot; title=&quot;目的：&quot;&gt;&lt;/a&gt;目的：&lt;/h3&gt;&lt;p&gt;在实验一的基础上实现先来先服务FCFS、短作业优先ＳＪＦ以及时间片轮转调度算法。&lt;br&gt;（五）实验内容与步骤：&lt;br&gt;我们可以根据创建进程的系统时钟，取相对时钟作为进程的到达时间，利用随机数产生每个进程的估计运行时间。利用模拟系统中提供的算法分别计算其相应的周转时间和带权周转时间。&lt;/p&gt;
&lt;h3 id=&quot;过程：&quot;&gt;&lt;a href=&quot;#过程：&quot; class=&quot;headerlink&quot; title=&quot;过程：&quot;&gt;&lt;/a&gt;过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用绝对时间和相对时钟产生一组进程的到达时刻和运行时间。&lt;/li&gt;
&lt;li&gt;实现FCFS算法：(First Come First Served )先来先服务&lt;/li&gt;
&lt;li&gt;实现ＳＪＦ算法：（Shortest Job First）短工作优先&lt;/li&gt;
&lt;li&gt;实现时间片轮转算法：首先要求确定时间片的大小，依据进程的到达时间依次加入队列，每次分配一个时间片大小的时间，如果没有完成参与下一次的竞争，当最后需要一个小于等于时间片的时间时本进程完成，同时退出队列。&lt;/li&gt;
&lt;li&gt;计算每种算法调度后，系统的平均周转时间和平均带权周转时间。&lt;h3 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e28908a8a5d10683.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a8c0d09589d38630.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-ed7ca4d9e4dd5843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;操作系统实验总结&quot;&gt;&lt;a href=&quot;#操作系统实验总结&quot; class=&quot;headerlink&quot; title=&quot;操作系统实验总结&quot;&gt;&lt;/a&gt;操作系统实验总结&lt;/h1&gt;&lt;h2 id=&quot;实验源码&quot;&gt;&lt;a href=&quot;#实验源码&quot; class=&quot;headerlink&quot; title=&quot;实验源码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot;&gt;实验源码&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;实验一 进程控制 processProject &lt;/li&gt;
&lt;li&gt;实验二  分页式存储管理 changeAdress&lt;/li&gt;
&lt;li&gt;实验三 页面置换算法 pageDispatch&lt;/li&gt;
&lt;li&gt;实验四  进程调度算法 dispachPro&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;实验一：进程调度-processProject&quot;&gt;&lt;a href=&quot;#实验一：进程调度-processProject&quot; class=&quot;headerlink&quot; title=&quot;实验一：进程调度 processProject&quot;&gt;&lt;/a&gt;实验一：进程调度 processProject&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b6aaedeba9ad2a15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;实验过程：&quot;&gt;&lt;a href=&quot;#实验过程：&quot; class=&quot;headerlink&quot; title=&quot;实验过程：&quot;&gt;&lt;/a&gt;实验过程：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义数据结构pcb和相应的队列（入，出，显示）操作&lt;/li&gt;
&lt;li&gt;编写函数：&lt;pre&gt;&lt;code&gt;创建进程（-就绪），
进程调度（就绪-执行），
进程阻塞（执行-阻塞），
进程激活（阻塞-就绪），
时间片用完（执行-就绪）
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;输入相应的字母，进行相应操作&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://carryguan.com/tags/node/"/>
    
      <category term="js" scheme="http://carryguan.com/tags/js/"/>
    
      <category term="os" scheme="http://carryguan.com/tags/os/"/>
    
      <category term="lru" scheme="http://carryguan.com/tags/lru/"/>
    
      <category term="fifo" scheme="http://carryguan.com/tags/fifo/"/>
    
      <category term="opt" scheme="http://carryguan.com/tags/opt/"/>
    
      <category term="sjf" scheme="http://carryguan.com/tags/sjf/"/>
    
  </entry>
  
  <entry>
    <title>playFair算法-古典密码学</title>
    <link href="http://carryguan.com/2017/02/20/playFair/"/>
    <id>http://carryguan.com/2017/02/20/playFair/</id>
    <published>2017-02-20T14:11:10.000Z</published>
    <updated>2017-08-07T14:53:48.914Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Playfair密码（英文：Playfair cipher 或 Playfair square）是一种替换密码，1854年由查尔斯·惠斯通（Charles Wheatstone）的英国人发明。经莱昂·普莱费尔提倡在英国军地和政府使用。　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   PlayFair算法是古典密码学中的多表代替算法.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# PlayFair算法分以下几步：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1：将给出的密钥去重与26个字母拼接成后，生成5X5的矩阵也称作密码表（矩阵中I和J位置相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2：将明文两个两个为一对儿&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3：利用加密方法来将明文加密&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加密方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2右端的字母。其中第一列被看作是最后一列的右方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2下方的字母。其中第一行看作是最后一行的下方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2不同行、不同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C1和C2是由P1和P2确定的矩形的其它两角的字母，并且C1和P1、C2和P2同行。（解密时处理方法相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1＝P2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则插入一个字母于重复字母之间，并用前述方法处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若明文字母数为奇数时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则在明文的末端添加某个事先约定的字母作为填充&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;举例说明&quot;&gt;&lt;a href=&quot;#举例说明&quot; class=&quot;headerlink&quot; title=&quot;举例说明&quot;&gt;&lt;/a&gt;举例说明&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-12c2fb222130656b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;这是demo-可以点击&quot;&gt;&lt;a href=&quot;#这是demo-可以点击&quot; class=&quot;headerlink&quot; title=&quot;这是demo,可以点击&quot;&gt;&lt;/a&gt;这是demo,可以点击&lt;/h2&gt;&lt;h2 id=&quot;demo&quot;&gt;&lt;a href=&quot;#demo&quot; class=&quot;headerlink&quot; title=&quot;demo&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://carryguan.me/PlayFair/first.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;实验代码&quot;&gt;&lt;a href=&quot;#实验代码&quot; class=&quot;headerlink&quot; title=&quot;实验代码&quot;&gt;&lt;/a&gt;实验代码&lt;/h1&gt;&lt;h2 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var skid = document.getElementById(&amp;quot;secretKey&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var secretKey = &amp;apos; &amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr = new Array();//拆分密钥字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var sk = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var keyTable = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var ekid = document.getElementById(&amp;quot;expressWords&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var expressKey = ekid.value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arrEK = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var secretWords = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第一步：定义密钥一维数组，并将密钥去重&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//去重函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Array.prototype.unique = function()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var n = &amp;#123;&amp;#125;,r=[]; //n为键值对集合，r为临时数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  for(var i = 0; i &amp;lt; this.length; i++) //遍历当前数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (!n[this[i]]) //如果表中没有当前项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      n[this[i]] = true; //存入表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      r.push(this[i]); //把当前数组的当前项push到临时数组里面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //console.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sk.push(this[i]);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return r;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步，创建密码表,用去重后的密钥和26个英文字母创建&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function createKey(sk)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //字母顺序数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var allChars = [&amp;apos;A&amp;apos;,&amp;apos;B&amp;apos;,&amp;apos;C&amp;apos;,&amp;apos;D&amp;apos;,&amp;apos;E&amp;apos;,&amp;apos;F&amp;apos;,&amp;apos;G&amp;apos;,&amp;apos;H&amp;apos;,&amp;apos;I&amp;apos;||&amp;apos;J&amp;apos;,&amp;apos;K&amp;apos;,&amp;apos;L&amp;apos;,&amp;apos;M&amp;apos;,&amp;apos;N&amp;apos;,&amp;apos;O&amp;apos;,&amp;apos;P&amp;apos;,&amp;apos;Q&amp;apos;,&amp;apos;R&amp;apos;,&amp;apos;S&amp;apos;,&amp;apos;T&amp;apos;,&amp;apos;U&amp;apos;,&amp;apos;V&amp;apos;,&amp;apos;W&amp;apos;,&amp;apos;X&amp;apos;,&amp;apos;Y&amp;apos;,&amp;apos;Z&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //删除去重后的密钥在26字母中的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0 ;i&amp;lt;sk.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var index = allChars.indexOf(sk[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (index &amp;gt; -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            allChars.splice(index, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //将未出现过的26个字母与去重密钥合并成密码表一维数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allChars = sk.concat(allChars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //将一维数组转成二维&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0 ; i&amp;lt;5 ; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyTable[i] = new Array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var j = 0;j&amp;lt;5;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyTable[i][j] = allChars[i*5+j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // console.log(&amp;apos;keyTablellll:&amp;apos;+keyTable[3][3]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三步：处理明文  ，将明文两个两个为一对,并且将明文中的J换成I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function produceExpress(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //console.log(&amp;apos;e：&amp;apos;+e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arr = e.split(&amp;apos;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(arr.length%2==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i=0 ; i&amp;lt;arr.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          if(arr[i] == &amp;apos;J&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arr[i] = &amp;apos;I&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i=0 ; i&amp;lt;arr.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          arrEK.push([arr[i],arr[i+1]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          i = i+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arrEK.push(&amp;apos;X&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i = 0;i&amp;lt;7;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;arrEKllll:&amp;apos;+arrEK[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 第四步：利用playfair算法，求出密文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getSecret(a,b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //a为密码表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //b为分组后的明文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var secretTable = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var express = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    secretTable = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    express = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var p1,p2,c1,c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var row1,col1,row2,col2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var k =0;k&amp;lt;express.length;k++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i = 0;i&amp;lt;secretTable.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          for(var j=0;j&amp;lt;secretTable[i].length;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(express[k][0] == secretTable[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                row1=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                col1=j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(express[k][1] == secretTable[i][j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                row2=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                col2=j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(row1 == row2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][(col1+1)%5]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][(col2+1)%5])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else if (col1 == col2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[(row1+1)%5][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[(row2+1)%5][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //不同行不同列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row1][col2]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            secretWords.push(secretTable[row2][col1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a = document.getElementById(&amp;apos;secretWords&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var btn = document.getElementById(&amp;apos;button&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    btn.addEventListener(&amp;apos;click&amp;apos;,function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //a.value = secretWords.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(skid.value!= &amp;apos; &amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           secretKey =  skid.value.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           arr = secretKey.split(&amp;apos;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(ekid.value!= &amp;apos; &amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           expressKey = ekid.value.toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arr.unique();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;quchonghou:&amp;apos;+sk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //创建密码表为keyTable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        createKey(sk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;-----------------------------&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(var i = 0;i&amp;lt;5;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           console.log(&amp;apos;keyTable:&amp;apos;+keyTable[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;-----------------------------&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //处理明文后为arrEK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        produceExpress(expressKey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;mingwen:&amp;apos;+arrEK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //求密文secretWords&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getSecret(keyTable,arrEK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;secretWords:&amp;apos;+secretWords);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a.value = secretWords.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;playfair加密算法&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            font-family: &amp;apos;Open Sans&amp;apos;, sans-serif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            font-size: 20px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            line-height: 1.42857143;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color: #fff;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background-color: #F39D7C;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #container&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin:0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background-color: #2A1106;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border-radius: 50px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-top:100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        box-shadow: 0 0 15px #F13006;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #container&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          flex-direction: column;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          justify-content: space-between;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          align-items: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       input&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 30px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #button&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 80px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 35px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        background: #ef9a79;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        font-size: 15px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border:none; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        border-radius: 3px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       #button:hover&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          background: #f47c20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;!-- top-start --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;h1&amp;gt;playFair加密算法&amp;lt;/h1&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输入密钥:&amp;lt;/span&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;secretKey&amp;quot; name=&amp;quot;secretKey&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输入明文:&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;expressWords&amp;quot; name=&amp;quot;expressWords&amp;quot; value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;span&amp;gt;输出密文:&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;secretWords&amp;quot; name=&amp;quot;secretWords&amp;quot;value=&amp;quot;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;button id =&amp;quot;button&amp;quot; type=&amp;quot;submit&amp;quot; &amp;gt;加密&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;p id=&amp;quot;demo&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;script src=&amp;quot;first.js&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Playfair密码（英文：Playfair cipher 或 Playfair square）是一种替换密码，1854年由查尔斯·惠斯通（Charles Wheatstone）的英国人发明。经莱昂·普莱费尔提倡在英国军地和政府使用。　&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   PlayFair算法是古典密码学中的多表代替算法.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# PlayFair算法分以下几步：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1：将给出的密钥去重与26个字母拼接成后，生成5X5的矩阵也称作密码表（矩阵中I和J位置相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2：将明文两个两个为一对儿&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3：利用加密方法来将明文加密&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;加密方法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2右端的字母。其中第一列被看作是最后一列的右方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对应的C1和C2分别是紧靠P1、P2下方的字母。其中第一行看作是最后一行的下方。（解密时反向）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1、P2不同行、不同列：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C1和C2是由P1和P2确定的矩形的其它两角的字母，并且C1和P1、C2和P2同行。（解密时处理方法相同）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;P1＝P2：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则插入一个字母于重复字母之间，并用前述方法处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;若明文字母数为奇数时：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;则在明文的末端添加某个事先约定的字母作为填充&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="http://carryguan.com/tags/Javascript/"/>
    
      <category term="Playfair" scheme="http://carryguan.com/tags/Playfair/"/>
    
      <category term="html" scheme="http://carryguan.com/tags/html/"/>
    
      <category term="古典密码" scheme="http://carryguan.com/tags/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81/"/>
    
      <category term="对称密码" scheme="http://carryguan.com/tags/%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>JS进阶以及重要知识点</title>
    <link href="http://carryguan.com/2016/12/05/js%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://carryguan.com/2016/12/05/js重要知识点/</id>
    <published>2016-12-05T01:59:02.000Z</published>
    <updated>2017-08-07T15:02:09.841Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2a12c8caef6e4f37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;/p&gt;
&lt;h2 id=&quot;前端进阶-（以下是豪大大的干货）&quot;&gt;&lt;a href=&quot;#前端进阶-（以下是豪大大的干货）&quot; class=&quot;headerlink&quot; title=&quot;前端进阶: （以下是豪大大的干货）&quot;&gt;&lt;/a&gt;前端进阶: （以下是豪大大的干货）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3600308.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第一阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3601666.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第二阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3604459.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第三阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3607133.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第四阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3611394.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第五阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3632392.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第六阶段&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文目前依据是菜鸟教程：&lt;br&gt;&lt;a href=&quot;http://www.runoob.com/js/js-functions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JS菜鸟&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3school.com.cn/js/index.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSw3c&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS基本编程语法&quot;&gt;&lt;a href=&quot;#JS基本编程语法&quot; class=&quot;headerlink&quot; title=&quot;JS基本编程语法&quot;&gt;&lt;/a&gt;JS基本编程语法&lt;/h2&gt;&lt;p&gt;变量&lt;br&gt;运算&lt;br&gt;流程控制&lt;br&gt;数组&lt;br&gt;调用函数&lt;br&gt;自定义函数&lt;br&gt;自定义对象&lt;br&gt;string对象原型(prototype)&lt;br&gt;this事件&lt;br&gt;json&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS函数&quot;&gt;&lt;a href=&quot;#JS函数&quot; class=&quot;headerlink&quot; title=&quot;JS函数&quot;&gt;&lt;/a&gt;JS函数&lt;/h2&gt;&lt;p&gt;函数定义&lt;br&gt;函数调用&lt;br&gt;函数的参数&lt;br&gt;闭包&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS-HTML-DOM&quot;&gt;&lt;a href=&quot;#JS-HTML-DOM&quot; class=&quot;headerlink&quot; title=&quot;JS HTML DOM&quot;&gt;&lt;/a&gt;JS HTML DOM&lt;/h2&gt;&lt;p&gt;目前来看都要&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JS高级教程&quot;&gt;&lt;a href=&quot;#JS高级教程&quot; class=&quot;headerlink&quot; title=&quot;JS高级教程&quot;&gt;&lt;/a&gt;JS高级教程&lt;/h2&gt;&lt;p&gt;string,prototype&lt;br&gt;array&lt;br&gt;regExp&lt;br&gt;Boolean&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;js继承(call,prototype,apply)//红皮书第六章&lt;br&gt;js的执行顺序&lt;br&gt;js事件机制(委托，绑定，监听，冒泡和阻止冒泡，兼容性)//红皮书13章&lt;br&gt;了解ajax的xmlhttprequest及其创建方法(多浏览器兼容)，跨域，明白其工作原理，http协议(get,post;如何传递参数，设置cookie)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前端学习计划推荐：&quot;&gt;&lt;a href=&quot;#前端学习计划推荐：&quot; class=&quot;headerlink&quot; title=&quot;前端学习计划推荐：&quot;&gt;&lt;/a&gt;前端学习计划推荐：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下都是我从知乎里面找到的干货&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e5c3d5a2eed28410.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机行业很多都符合82定律，也就是20%的东西的使用频率占到80%，所以很适合囫囵吞枣，我们的重点就是把这20%学起来，而首先要做的就是把这20%的东西找出来。&lt;br&gt;在我看来前端这20%的东西大概就是常用的html标签，css的盒子模型，基本的原生js，以及熟练使用jquery，ajax，常见浏览器的兼容。&lt;br&gt;拿下这些东西意义非凡，一方面证明你适合做前端这份工作，另一方面这些技能能让你找到一份工作。让你能够从容地去学习剩下的80%。&lt;br&gt;总之就是专心对付最重要的东西，那些什么less、sass、angular这类的东西，当你把我之前说的基础打好之后，学习起来畅通无阻，随学随用。&lt;br&gt;最后我觉得最难的就是实践，只有实践才能学到真正的技术，新人很难参与一些有价值有意义的项目，没有这些项目又很难成长，所以自己有项目可参与应该珍惜，没项目应该多造一些有价值的轮子。&lt;/p&gt;
&lt;p&gt;1.html的语法、格式，常用的标签极其作用，理解标签的嵌套，学习使用firefox+firebug或者chrom的调试工具，能够使用这些工具调试html、css、js、断点调试、抓包&lt;/p&gt;
&lt;p&gt;2.如何引入css、js（有多少种方法，各种方法有什么区别），理解id、class属性的区别，学会css的常用选择器，理解盒子模型（padding，margin，border，width，height，），css坐标系，css布局（position的absolute、relative 、fixed、static），css浮动（float：left、right ）和清除浮动（clear）,display:inline、block、inline-block、flex&lt;/p&gt;
&lt;p&gt;3.js的执行顺序，基本的编程基础（变量、运算、流程控制、数组、调用函数、自定义函数、对象）、json、js的dom操作、js的事件机制（委托、绑定、监听，冒泡和阻止冒泡，兼容性），了解ajax的xmlhttprequest及其创建方法（多浏览器兼容）、跨域，明白其工作原理，评论里有朋友说http协议，确实是我疏忽，在学习ajax这部分免不了需要懂点http协议，比如什么是get和post，这两种如何传递参数，设置cookie等&lt;/p&gt;
&lt;p&gt;4、使用jquery解放你的开发工作，学会jq选择器，修改属性、监听事件、修改css，学会写jquery插件。这一步我觉得可以和第3步穿插学习&lt;/p&gt;
&lt;p&gt;5、搭建服务器，弄个傻瓜服务器比如wamp，phpstudy等软件，可以一键建立一个apache+php+mysql的服务器，前期可以把你的静态页发布到本地服务器，使用本地服务器配合ajax学习。&lt;/p&gt;
&lt;p&gt;6、学点服务器端，建议php+mysql  (博主学的是nodejs+mysql)&lt;br&gt;服务器端脚本其实很简单，总结起来就是4个东西：SESSION、COOKIE、Request、Response，结合http协议理解如何从Request取得数据，经过处理后Response给客户端。这就是整个过程。&lt;br&gt;至于mysql也就是基本的sql语句。如何使用php进行CURD操作。这块其实很难总结，基本上以实现业务为主。&lt;/p&gt;
&lt;p&gt;7、来点框架，理解MVC模式、推荐个比较流行的MVC框架：ThinkPHP，简洁好用不解释，国人弄的，文档和例子什么的非常丰富。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;博主感想&quot;&gt;&lt;a href=&quot;#博主感想&quot; class=&quot;headerlink&quot; title=&quot;博主感想&quot;&gt;&lt;/a&gt;博主感想&lt;/h2&gt;&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32737469&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2a12c8caef6e4f37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;/p&gt;
&lt;h2 id=&quot;前端进阶-（以下是豪大大的干货）&quot;&gt;&lt;a href=&quot;#前端进阶-（以下是豪大大的干货）&quot; class=&quot;headerlink&quot; title=&quot;前端进阶: （以下是豪大大的干货）&quot;&gt;&lt;/a&gt;前端进阶: （以下是豪大大的干货）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3600308.html&quot;&gt;第一阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3601666.html&quot;&gt;第二阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3604459.html&quot;&gt;第三阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3607133.html&quot;&gt;第四阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3611394.html&quot;&gt;第五阶段&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/jikey/p/3632392.html&quot;&gt;第六阶段&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascrpt" scheme="http://carryguan.com/tags/javascrpt/"/>
    
      <category term="前端" scheme="http://carryguan.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="进阶" scheme="http://carryguan.com/tags/%E8%BF%9B%E9%98%B6/"/>
    
      <category term="js知识点" scheme="http://carryguan.com/tags/js%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Mysql-sql语法(入门)</title>
    <link href="http://carryguan.com/2016/11/21/mysql%E8%AF%AD%E6%B3%95/"/>
    <id>http://carryguan.com/2016/11/21/mysql语法/</id>
    <published>2016-11-21T05:57:37.000Z</published>
    <updated>2017-08-07T15:02:08.784Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f671ikpgnhj30s20as0v3.jpg&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql-sql 语句  &lt;/li&gt;
&lt;li&gt;字符集选utf-8&lt;/li&gt;
&lt;li&gt;我需要学增删改查, 事物, 联合&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;启动数据库&quot;&gt;&lt;a href=&quot;#启动数据库&quot; class=&quot;headerlink&quot; title=&quot;启动数据库&quot;&gt;&lt;/a&gt;启动数据库&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
mysql -u root -p（root是用户名）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据库（所有）&quot;&gt;&lt;a href=&quot;#查看数据库（所有）&quot; class=&quot;headerlink&quot; title=&quot;查看数据库（所有）&quot;&gt;&lt;/a&gt;查看数据库（所有）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show databases
&lt;/code&gt;&lt;/pre&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

## 进入数据库
&lt;pre&gt;&lt;code&gt;
use one ;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;展示当前数据库的所有表&quot;&gt;&lt;a href=&quot;#展示当前数据库的所有表&quot; class=&quot;headerlink&quot; title=&quot;展示当前数据库的所有表&quot;&gt;&lt;/a&gt;展示当前数据库的所有表&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show tables;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;创建个名为user的表的结构&quot;&gt;&lt;a href=&quot;#创建个名为user的表的结构&quot; class=&quot;headerlink&quot; title=&quot;创建个名为user的表的结构&quot;&gt;&lt;/a&gt;创建个名为user的表的结构&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
create table user(
id int,
name  varchar(30),
pass varchar(30)
);（字符串长度最长是30）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看表结构&quot;&gt;&lt;a href=&quot;#查看表结构&quot; class=&quot;headerlink&quot; title=&quot;查看表结构&quot;&gt;&lt;/a&gt;查看表结构&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
desc user; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据从表里面&quot;&gt;&lt;a href=&quot;#查看数据从表里面&quot; class=&quot;headerlink&quot; title=&quot;查看数据从表里面&quot;&gt;&lt;/a&gt;查看数据从表里面&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
select * from user;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;insert-增（我可以随意增加，插入数据到表中）&quot;&gt;&lt;a href=&quot;#insert-增（我可以随意增加，插入数据到表中）&quot; class=&quot;headerlink&quot; title=&quot;insert 增（我可以随意增加，插入数据到表中）&quot;&gt;&lt;/a&gt;insert 增（我可以随意增加，插入数据到表中）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
 insert into table(ct1,ct2,ct3) values(num,&quot;str&quot;,&quot;str&quot;)
 insert into user(id,name,pass) values(1,&quot;leiwei&quot;,&quot;123&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;形成了下表&quot;&gt;&lt;a href=&quot;#形成了下表&quot; class=&quot;headerlink&quot; title=&quot;形成了下表&quot;&gt;&lt;/a&gt;形成了下表&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; select * from user;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name      | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    1 | leiwei    | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2 | yujie     | 13   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    3 | qiancheng | 456  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+-----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 rows in set (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;select-查（我可以随意查找-select-from-table-where…）&quot;&gt;&lt;a href=&quot;#select-查（我可以随意查找-select-from-table-where…）&quot; class=&quot;headerlink&quot; title=&quot;select 查（我可以随意查找 select from table where…）&quot;&gt;&lt;/a&gt;select 查（我可以随意查找 select from table where…）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
select * from user where id=2;
select * from user where pass=13;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;select-like-子段（-我可以随意选取子字段-）&quot;&gt;&lt;a href=&quot;#select-like-子段（-我可以随意选取子字段-）&quot; class=&quot;headerlink&quot; title=&quot;select like 子段（ 我可以随意选取子字段 ）&quot;&gt;&lt;/a&gt;select like 子段（ 我可以随意选取子字段 ）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from user where name like &amp;apos;%carry%&amp;apos;;//选取中间含有carry字段的数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name     | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5 | carryone | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    2 | carry    | 571  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;选取以one结束的字段&quot;&gt;&lt;a href=&quot;#选取以one结束的字段&quot; class=&quot;headerlink&quot; title=&quot;选取以one结束的字段&quot;&gt;&lt;/a&gt;选取以one结束的字段&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from user where name like &amp;apos;%one&amp;apos;;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| id   | name     | pass |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    5 | carryone | 123  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------+----------+------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;select-order-by（排序我们可以随意排序数据）&quot;&gt;&lt;a href=&quot;#select-order-by（排序我们可以随意排序数据）&quot; class=&quot;headerlink&quot; title=&quot;select order by（排序我们可以随意排序数据）&quot;&gt;&lt;/a&gt;select order by（排序我们可以随意排序数据）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
        select * from user order by name; //默认是升序  
         select * from user order by id desc;//desc为降序排列
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;delete-删-（我可以随意删除-delete-from-table-where…）&quot;&gt;&lt;a href=&quot;#delete-删-（我可以随意删除-delete-from-table-where…）&quot; class=&quot;headerlink&quot; title=&quot;delete 删 （我可以随意删除 delete from table where…）&quot;&gt;&lt;/a&gt;delete 删 （我可以随意删除 delete from table where…）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
delete from user where name=&quot;yujie&quot;;
delete from user where id=3;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;update-我可以随意更改-update-user-set-charct-where-…&quot;&gt;&lt;a href=&quot;#update-我可以随意更改-update-user-set-charct-where-…&quot; class=&quot;headerlink&quot; title=&quot;update (我可以随意更改 update user set charct where ….)&quot;&gt;&lt;/a&gt;update (我可以随意更改 update user set charct where ….)&lt;/h2&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;update user set name=”billin” where id=1;&lt;br&gt;update user set id=5 where name=”billin”;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=5179544&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f671ikpgnhj30s20as0v3.jpg&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql-sql 语句  &lt;/li&gt;
&lt;li&gt;字符集选utf-8&lt;/li&gt;
&lt;li&gt;我需要学增删改查, 事物, 联合&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;启动数据库&quot;&gt;&lt;a href=&quot;#启动数据库&quot; class=&quot;headerlink&quot; title=&quot;启动数据库&quot;&gt;&lt;/a&gt;启动数据库&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
mysql -u root -p（root是用户名）
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;查看数据库（所有）&quot;&gt;&lt;a href=&quot;#查看数据库（所有）&quot; class=&quot;headerlink&quot; title=&quot;查看数据库（所有）&quot;&gt;&lt;/a&gt;查看数据库（所有）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;
show databases
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="sql" scheme="http://carryguan.com/tags/sql/"/>
    
      <category term="mysql" scheme="http://carryguan.com/tags/mysql/"/>
    
      <category term="后台" scheme="http://carryguan.com/tags/%E5%90%8E%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端攻城狮的标准</title>
    <link href="http://carryguan.com/2016/10/28/%E5%89%8D%E7%AB%AF%E6%94%BB%E5%9F%8E%E7%8B%AE%E7%9A%84%E6%A0%87%E5%87%86/"/>
    <id>http://carryguan.com/2016/10/28/前端攻城狮的标准/</id>
    <published>2016-10-28T12:47:25.000Z</published>
    <updated>2017-08-07T15:02:07.825Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-df83d5ec13fe30e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;前端工程师该达到的要求&quot;&gt;&lt;a href=&quot;#前端工程师该达到的要求&quot; class=&quot;headerlink&quot; title=&quot;前端工程师该达到的要求&quot;&gt;&lt;/a&gt;前端工程师该达到的要求&lt;/h1&gt;&lt;h2 id=&quot;1-基本功&quot;&gt;&lt;a href=&quot;#1-基本功&quot; class=&quot;headerlink&quot; title=&quot;1 基本功&quot;&gt;&lt;/a&gt;1 基本功&lt;/h2&gt;&lt;p&gt;HTML、CSS、JavaScript基本功，数学、算法、数据结构、操作系统、编译原理基本功。&lt;/p&gt;
&lt;h2 id=&quot;2-资源请求&quot;&gt;&lt;a href=&quot;#2-资源请求&quot; class=&quot;headerlink&quot; title=&quot;2 资源请求&quot;&gt;&lt;/a&gt;2 资源请求&lt;/h2&gt;&lt;p&gt;了解 DNS 解析，充分利用 CDN，使用多个域名来完成资源的请求以缩短加载时间；&lt;/p&gt;
&lt;p&gt;##3 http&lt;br&gt;设置 HTTP Headers（Expires, Cache-Control, If-Modified-Since）；&lt;/p&gt;
&lt;h2 id=&quot;4-遵循hpw规则&quot;&gt;&lt;a href=&quot;#4-遵循hpw规则&quot; class=&quot;headerlink&quot; title=&quot;4 遵循hpw规则&quot;&gt;&lt;/a&gt;4 遵循hpw规则&lt;/h2&gt;&lt;p&gt;遵循 Steve Souders 给出的全部规则（High Performance Websites）&lt;/p&gt;
&lt;h2 id=&quot;5-解决显示的问题&quot;&gt;&lt;a href=&quot;#5-解决显示的问题&quot; class=&quot;headerlink&quot; title=&quot;5 解决显示的问题&quot;&gt;&lt;/a&gt;5 解决显示的问题&lt;/h2&gt;&lt;p&gt;知道如何解决 PageSpeed、YSlow、Chrome Dev Tools Audit、Chrome Dev Tools Timeline 显示的所有问题；&lt;/p&gt;
&lt;h2 id=&quot;6-服务端与客户端&quot;&gt;&lt;a href=&quot;#6-服务端与客户端&quot; class=&quot;headerlink&quot; title=&quot;6 服务端与客户端&quot;&gt;&lt;/a&gt;6 服务端与客户端&lt;/h2&gt;&lt;p&gt;知道什么任务该放在服务端，什么任务该放在客户端；&lt;/p&gt;
&lt;h2 id=&quot;7-缓存&quot;&gt;&lt;a href=&quot;#7-缓存&quot; class=&quot;headerlink&quot; title=&quot;7 缓存&quot;&gt;&lt;/a&gt;7 缓存&lt;/h2&gt;&lt;p&gt;知道使用缓存，DNS 预取和资源预加载技巧；&lt;/p&gt;
&lt;h2 id=&quot;8-js良好学习与利用能力&quot;&gt;&lt;a href=&quot;#8-js良好学习与利用能力&quot; class=&quot;headerlink&quot; title=&quot;8 js良好学习与利用能力&quot;&gt;&lt;/a&gt;8 js良好学习与利用能力&lt;/h2&gt;&lt;p&gt;精通 JavaScript，知道何时自己写何时借组别人的框架或代码，优劣明辨；&lt;/p&gt;
&lt;h2 id=&quot;9-框架，库，工具&quot;&gt;&lt;a href=&quot;#9-框架，库，工具&quot; class=&quot;headerlink&quot; title=&quot;9 框架，库，工具&quot;&gt;&lt;/a&gt;9 框架，库，工具&lt;/h2&gt;&lt;p&gt;熟练使用现代 MVC JavaScript 框架（例如 AngularJS EmberJS React 等），图形库（D3、SnapSVG 等），DOM 操作类库（jQuery、Zepto 等），惰性加载或者模块管理类库（例如 RequireJS、CommonJS 等），任务调用工具（例如 Grunt Gulp 等），包管理工具（Bower Componentjs）以及测试工具（Protractor、Selenium 等）；&lt;/p&gt;
&lt;h2 id=&quot;10-图片&quot;&gt;&lt;a href=&quot;#10-图片&quot; class=&quot;headerlink&quot; title=&quot;10 图片&quot;&gt;&lt;/a&gt;10 图片&lt;/h2&gt;&lt;p&gt;掌握图片的格式，每种格式的优点，适用的场景；知道图片优化技巧以及加载策略（雪碧图、懒加载、缓存刷新以及 PNG 交错）；&lt;/p&gt;
&lt;h2 id=&quot;11-css&quot;&gt;&lt;a href=&quot;#11-css&quot; class=&quot;headerlink&quot; title=&quot;11:css&quot;&gt;&lt;/a&gt;11:css&lt;/h2&gt;&lt;p&gt;熟悉 CSS 标准、最新的转换工具积极策略规范（比如 BEM、SMACSS、OOCSS 等）；&lt;/p&gt;
&lt;h2 id=&quot;12：js-的计算机科学&quot;&gt;&lt;a href=&quot;#12：js-的计算机科学&quot; class=&quot;headerlink&quot; title=&quot;12：js 的计算机科学&quot;&gt;&lt;/a&gt;12：js 的计算机科学&lt;/h2&gt;&lt;p&gt;JavaScript 的计算机科学（内存管理、单进程特性、垃圾回收算法、定时器、作用域、提升以及设计模式）。&lt;/p&gt;
&lt;h2 id=&quot;13-Web前端开发标准&quot;&gt;&lt;a href=&quot;#13-Web前端开发标准&quot; class=&quot;headerlink&quot; title=&quot;13 Web前端开发标准&quot;&gt;&lt;/a&gt;13 Web前端开发标准&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://codecloud.net/5622.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;web前端开发标准&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=408332973&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-df83d5ec13fe30e8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;logo&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="FE" scheme="http://carryguan.com/tags/FE/"/>
    
      <category term="前端之路" scheme="http://carryguan.com/tags/%E5%89%8D%E7%AB%AF%E4%B9%8B%E8%B7%AF/"/>
    
      <category term="迷茫" scheme="http://carryguan.com/tags/%E8%BF%B7%E8%8C%AB/"/>
    
      <category term="学前端" scheme="http://carryguan.com/tags/%E5%AD%A6%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>最流行的Javascript都能做什么？</title>
    <link href="http://carryguan.com/2016/09/08/%E6%9C%80%E7%81%AB%E7%9A%84Javascript%E9%83%BD%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://carryguan.com/2016/09/08/最火的Javascript都能做什么？/</id>
    <published>2016-09-08T07:50:50.000Z</published>
    <updated>2017-08-07T15:02:06.000Z</updated>
    
    <content type="html">&lt;p&gt;JS的应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据可视化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桌面应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;若图片无法加载请点击&lt;a href=&quot;http://www.jianshu.com/p/66e05cc8201d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-bc22cd5fcf7b236a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;数据可视化&quot;&gt;&lt;a href=&quot;#数据可视化&quot; class=&quot;headerlink&quot; title=&quot;数据可视化&quot;&gt;&lt;/a&gt;数据可视化&lt;/h1&gt;&lt;h2 id=&quot;processing-js&quot;&gt;&lt;a href=&quot;#processing-js&quot; class=&quot;headerlink&quot; title=&quot;processing.js&quot;&gt;&lt;/a&gt;processing.js&lt;/h2&gt;&lt;p&gt;Processing.js作者是John Resig，这是继Jquery之后，他的第二个力作。&lt;br&gt;Processing.js使用JavaScript绘制形状sharp和操作HTML5 canvas元素产生图像动画。&lt;br&gt;Processing.js是轻量，易于了解掌握，并提出一个理想的工具，可视化的数据，创建用户界面和开发基于Web的游戏。&lt;br&gt;&lt;a href=&quot;http://blog.jobbole.com/1525/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;processing.js简介&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/bugknightyyp/article/details/8666831&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;processing.js快速入门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;D3-js&quot;&gt;&lt;a href=&quot;#D3-js&quot; class=&quot;headerlink&quot; title=&quot;D3.js&quot;&gt;&lt;/a&gt;D3.js&lt;/h2&gt;&lt;p&gt;D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/c3800c61d2fb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3.js入门指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/library/d3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3.js入门教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;移动应用&quot;&gt;&lt;a href=&quot;#移动应用&quot; class=&quot;headerlink&quot; title=&quot;移动应用&quot;&gt;&lt;/a&gt;移动应用&lt;/h1&gt;&lt;h2 id=&quot;Cordova-phoneGap-ionic&quot;&gt;&lt;a href=&quot;#Cordova-phoneGap-ionic&quot; class=&quot;headerlink&quot; title=&quot;Cordova+phoneGap+ionic&quot;&gt;&lt;/a&gt;Cordova+phoneGap+ionic&lt;/h2&gt;&lt;h3 id=&quot;Cordova&quot;&gt;&lt;a href=&quot;#Cordova&quot; class=&quot;headerlink&quot; title=&quot;Cordova&quot;&gt;&lt;/a&gt;Cordova&lt;/h3&gt;&lt;p&gt;Cordova提供了一组设备相关的API，通过这组API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等。&lt;br&gt;Cordova还提供了一组统一的JavaScript类库，以及为这些类库所用的设备相关的原生后台代码。&lt;br&gt;&lt;a href=&quot;http://www.zhoujingen.cn/blog/7027.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; Cordova教程&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;phoneGap&quot;&gt;&lt;a href=&quot;#phoneGap&quot; class=&quot;headerlink&quot; title=&quot;phoneGap&quot;&gt;&lt;/a&gt;phoneGap&lt;/h3&gt;&lt;p&gt;PhoneGap是一个用基于&lt;a href=&quot;http://baike.baidu.com/view/692.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTML&lt;/a&gt;，&lt;a href=&quot;http://baike.baidu.com/subview/15916/5236733.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS&lt;/a&gt;和&lt;a href=&quot;http://baike.baidu.com/view/16168.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript&lt;/a&gt;的，创建移动跨平台移动应用程序的&lt;a href=&quot;http://baike.baidu.com/view/4112052.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;快速开发平台&lt;/a&gt;。它使开发者能够利用&lt;a href=&quot;http://baike.baidu.com/view/158983.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IOS&lt;/a&gt;，Android，&lt;a href=&quot;http://baike.baidu.com/view/27225.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Palm&lt;/a&gt;，&lt;a href=&quot;http://baike.baidu.com/view/10708.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Symbian&lt;/a&gt;,WP7,&lt;a href=&quot;http://baike.baidu.com/view/7261507.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WP8&lt;/a&gt;,&lt;a href=&quot;http://baike.baidu.com/subview/76548/9852892.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bada&lt;/a&gt;和&lt;a href=&quot;http://baike.baidu.com/view/88648.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Blackberry&lt;/a&gt;智能手机的核心功能——包括地理定位，加速器，联系人，声音和振动等，此外PhoneGap拥有丰富的&lt;a href=&quot;http://baike.baidu.com/view/18979.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件&lt;/a&gt;，可以调用。&lt;br&gt;&lt;a href=&quot;http://www.phonegap100.com/article-462-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PhoneGap官网以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;React-Native&quot;&gt;&lt;a href=&quot;#React-Native&quot; class=&quot;headerlink&quot; title=&quot;React Native&quot;&gt;&lt;/a&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/h2&gt;&lt;h1 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h1&gt;&lt;h2 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h2&gt;&lt;p&gt;正是V8的性能将JavaScript带到了一个新的高度，于是Node.js诞生了——前端、后台都可以用JavaScript，一个JavaScript的全栈时代。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-66ff0354fe02535a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;此篇文章依据&lt;a href=&quot;https://www.zhihu.com/people/phodal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;phodal&lt;/a&gt;大神的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;桌面应用&quot;&gt;&lt;a href=&quot;#桌面应用&quot; class=&quot;headerlink&quot; title=&quot;桌面应用&quot;&gt;&lt;/a&gt;桌面应用&lt;/h1&gt;&lt;h2 id=&quot;NW-js&quot;&gt;&lt;a href=&quot;#NW-js&quot; class=&quot;headerlink&quot; title=&quot;NW.js&quot;&gt;&lt;/a&gt;NW.js&lt;/h2&gt;&lt;p&gt;NW.js 是基于 Chromium 和 Node.js 运行的， 它们可以让我们用HTML和JavaScript来制作桌面应用。&lt;/p&gt;
&lt;h2 id=&quot;Electron&quot;&gt;&lt;a href=&quot;#Electron&quot; class=&quot;headerlink&quot; title=&quot;Electron&quot;&gt;&lt;/a&gt;Electron&lt;/h2&gt;&lt;p&gt;除了NW.js还有最近比较火的Electron，Atom编辑器的&lt;/p&gt;
&lt;h2 id=&quot;全平台应用&quot;&gt;&lt;a href=&quot;#全平台应用&quot; class=&quot;headerlink&quot; title=&quot;全平台应用&quot;&gt;&lt;/a&gt;全平台应用&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-7766c666972e76e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7cb1d8cffa7/comments/1430104&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;全平台应用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;游戏&quot;&gt;&lt;a href=&quot;#游戏&quot; class=&quot;headerlink&quot; title=&quot;游戏&quot;&gt;&lt;/a&gt;游戏&lt;/h1&gt;&lt;h2 id=&quot;WebGL&quot;&gt;&lt;a href=&quot;#WebGL&quot; class=&quot;headerlink&quot; title=&quot;WebGL&quot;&gt;&lt;/a&gt;WebGL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.hewebgl.com/code/show/2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;炫酷的效果展示-旋转纽约&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.hewebgl.com/code/show/4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;炫酷的效果展示-高科技感元素周期表&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://hewebgl.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webGL官网以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;VR&quot;&gt;&lt;a href=&quot;#VR&quot; class=&quot;headerlink&quot; title=&quot;VR&quot;&gt;&lt;/a&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.phodal.com/blog/why-javascript-will-use-vr-world/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vr介绍&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;AR&quot;&gt;&lt;a href=&quot;#AR&quot; class=&quot;headerlink&quot; title=&quot;AR&quot;&gt;&lt;/a&gt;AR&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.tuicool.com/articles/EJfymiz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;介绍以及教程&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;物联网&quot;&gt;&lt;a href=&quot;#物联网&quot; class=&quot;headerlink&quot; title=&quot;物联网&quot;&gt;&lt;/a&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js与物联网&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h1&gt;&lt;p&gt;这里不多介绍&lt;/p&gt;
&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;p&gt;也不错介绍&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文基于&lt;a href=&quot;https://zhuanlan.zhihu.com/phodal&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Phodal&lt;/a&gt;大神的&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21911003&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=29436904&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JS的应用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据可视化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;桌面应用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AR&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物联网&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;若图片无法加载请点击&lt;a href=&quot;http://www.jianshu.com/p/66e05cc8201d&quot;&gt;图片爸爸&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-bc22cd5fcf7b236a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://carryguan.com/tags/JavaScript/"/>
    
      <category term="应用" scheme="http://carryguan.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="移动端" scheme="http://carryguan.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="游戏" scheme="http://carryguan.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="全栈" scheme="http://carryguan.com/tags/%E5%85%A8%E6%A0%88/"/>
    
      <category term="跨平台" scheme="http://carryguan.com/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
      <category term="3D" scheme="http://carryguan.com/tags/3D/"/>
    
      <category term="物联网与js" scheme="http://carryguan.com/tags/%E7%89%A9%E8%81%94%E7%BD%91%E4%B8%8Ejs/"/>
    
  </entry>
  
  <entry>
    <title>Cookie和Session</title>
    <link href="http://carryguan.com/2016/08/28/Cookie%E5%92%8CSession/"/>
    <id>http://carryguan.com/2016/08/28/Cookie和Session/</id>
    <published>2016-08-28T13:18:20.000Z</published>
    <updated>2017-08-07T15:02:10.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-144ce8776fdd3f93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;来由&quot;&gt;&lt;a href=&quot;#来由&quot; class=&quot;headerlink&quot; title=&quot;来由&quot;&gt;&lt;/a&gt;来由&lt;/h2&gt;&lt;p&gt;http协议是stateless的,一旦和后台响应了，就断开了和请求的连接，这时若我们想要了解哪个客户发来的请求，这就需要借助服务器端的session,和浏览器端的cookie  –（可以用express中间件）&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1：cookie-amp-session&quot;&gt;&lt;a href=&quot;#1：cookie-amp-session&quot; class=&quot;headerlink&quot; title=&quot;1：cookie&amp;amp;session&quot;&gt;&lt;/a&gt;1：cookie&amp;amp;session&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/fangaoxin/article/details/6952954&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cookie,session&lt;/a&gt;会话跟踪是Web程序中常用的技术，用来&lt;strong&gt;跟踪用户的整个会话&lt;/strong&gt;。常用的会话跟踪技术是Cookie与Session。&lt;strong&gt;Cookie通过在客户端记录信息确定用户身份&lt;/strong&gt;，&lt;strong&gt;Session通过在服务器端记录信息确定用户身份&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2：Cookie&quot;&gt;&lt;a href=&quot;#2：Cookie&quot; class=&quot;headerlink&quot; title=&quot;2：Cookie&quot;&gt;&lt;/a&gt;2：Cookie&lt;/h3&gt;&lt;p&gt;Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。&lt;/p&gt;
&lt;h3 id=&quot;3：-Session&quot;&gt;&lt;a href=&quot;#3：-Session&quot; class=&quot;headerlink&quot; title=&quot;3： Session&quot;&gt;&lt;/a&gt;3： Session&lt;/h3&gt;&lt;p&gt;Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。&lt;br&gt;如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; #博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;br&gt;&lt;a href=&quot;http://carryguan.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;个人网站&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-144ce8776fdd3f93.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;来由&quot;&gt;&lt;a href=&quot;#来由&quot; class=&quot;headerlink&quot; title=&quot;来由&quot;&gt;&lt;/a&gt;来由&lt;/h2&gt;&lt;p&gt;http协议是stateless的,一旦和后台响应了，就断开了和请求的连接，这时若我们想要了解哪个客户发来的请求，这就需要借助服务器端的session,和浏览器端的cookie  –（可以用express中间件）&lt;br&gt;
    
    </summary>
    
    
      <category term="Cookie" scheme="http://carryguan.com/tags/Cookie/"/>
    
      <category term="Session" scheme="http://carryguan.com/tags/Session/"/>
    
      <category term="Http" scheme="http://carryguan.com/tags/Http/"/>
    
      <category term="数据交互" scheme="http://carryguan.com/tags/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>MyVocation</title>
    <link href="http://carryguan.com/2016/08/16/MyVocation/"/>
    <id>http://carryguan.com/2016/08/16/MyVocation/</id>
    <published>2016-08-16T01:09:04.000Z</published>
    <updated>2016-08-16T03:46:31.787Z</updated>
    
    <content type="html">&lt;h1 id=&quot;一共四周：&quot;&gt;&lt;a href=&quot;#一共四周：&quot; class=&quot;headerlink&quot; title=&quot;一共四周：&quot;&gt;&lt;/a&gt;一共四周：&lt;/h1&gt;&lt;p&gt;第一周：了解一下做的是啥，学习mysql,node.js,coffeescript,socket&lt;br&gt;第二周 : 写了缺货提醒的接口(warehouse-coffee-lib–timer-newStocksInfor),获得缺货详细列表的接口(warehouse-coffee-lib-getStocksList)&lt;br&gt;第三周：写了获得缺货门店的信息接口(warehouse-coffee-lib-AreaLacks)&lt;br&gt;第四周：学express,node.js搭建网站，写后台&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;后台工作流程：&quot;&gt;&lt;a href=&quot;#后台工作流程：&quot; class=&quot;headerlink&quot; title=&quot;后台工作流程：&quot;&gt;&lt;/a&gt;后台工作流程：&lt;/h1&gt;&lt;h2 id=&quot;一：搭建服务器&quot;&gt;&lt;a href=&quot;#一：搭建服务器&quot; class=&quot;headerlink&quot; title=&quot;一：搭建服务器&quot;&gt;&lt;/a&gt;一：搭建服务器&lt;/h2&gt;&lt;h2 id=&quot;二：数据处理：&quot;&gt;&lt;a href=&quot;#二：数据处理：&quot; class=&quot;headerlink&quot; title=&quot;二：数据处理：&quot;&gt;&lt;/a&gt;二：数据处理：&lt;/h2&gt;&lt;p&gt;数据库（mysql）,redis,memcache&lt;/p&gt;
&lt;h2 id=&quot;三：本机启动后台系统&quot;&gt;&lt;a href=&quot;#三：本机启动后台系统&quot; class=&quot;headerlink&quot; title=&quot;三：本机启动后台系统&quot;&gt;&lt;/a&gt;三：本机启动后台系统&lt;/h2&gt;&lt;p&gt;node main.js/supervisor main.js/NODE_ENV=DEV &amp;amp;&amp;amp;supervisor main.j&lt;/p&gt;
&lt;h2 id=&quot;四：与客户端的连接&quot;&gt;&lt;a href=&quot;#四：与客户端的连接&quot; class=&quot;headerlink&quot; title=&quot;四：与客户端的连接&quot;&gt;&lt;/a&gt;四：与客户端的连接&lt;/h2&gt;&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1:&quot;&gt;&lt;/a&gt;1:&lt;/h3&gt;&lt;p&gt;此客户端可以为android,ios,web前台（前端）&lt;/p&gt;
&lt;h3 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;2:&quot;&gt;&lt;/a&gt;2:&lt;/h3&gt;&lt;p&gt;客户端需要知道后台的ip,进行 ping连接&lt;/p&gt;
&lt;h3 id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot; class=&quot;headerlink&quot; title=&quot;3:&quot;&gt;&lt;/a&gt;3:&lt;/h3&gt;&lt;p&gt;客户端也需要知道与后台进行交互的那个接口&lt;/p&gt;
&lt;h2 id=&quot;五：和客户端的交互&quot;&gt;&lt;a href=&quot;#五：和客户端的交互&quot; class=&quot;headerlink&quot; title=&quot;五：和客户端的交互&quot;&gt;&lt;/a&gt;五：和客户端的交互&lt;/h2&gt;&lt;p&gt;后台需要写好接口功能，并把数据通过这个接口传输给客户端(socket.on)&lt;br&gt;后台自己定义好功能（一般是客户端的系统信息推送）自发起一个接口(socket.emit),客户端soket.on接口和数据&lt;/p&gt;
&lt;h2 id=&quot;六：注意&quot;&gt;&lt;a href=&quot;#六：注意&quot; class=&quot;headerlink&quot; title=&quot;六：注意&quot;&gt;&lt;/a&gt;六：注意&lt;/h2&gt;&lt;p&gt;从github拽下来的文件，需要进入其跟目录进行npm install,原因是将package.json中的dependencies依赖包进行下载；&lt;/p&gt;
&lt;h1 id=&quot;More&quot;&gt;&lt;a href=&quot;#More&quot; class=&quot;headerlink&quot; title=&quot;More&quot;&gt;&lt;/a&gt;More&lt;/h1&gt;&lt;p&gt;真的特别感谢公司给的这次机会，让我学到了好多新知识，还结交到了几位盆友，跟他们这样有多年开发经验的人沟通，了解了开发方式与模式，扩展了知识面&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/25e89c1ad4ab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸加载&lt;/a&gt;&lt;br&gt;放一张我男神BI照片来开心一下（原谅博主少女心）&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-895ca3735e03828e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;再放一张博主我的（表杀我，咩咩）&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-1e9289634631a1cc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一共四周：&quot;&gt;&lt;a href=&quot;#一共四周：&quot; class=&quot;headerlink&quot; title=&quot;一共四周：&quot;&gt;&lt;/a&gt;一共四周：&lt;/h1&gt;&lt;p&gt;第一周：了解一下做的是啥，学习mysql,node.js,coffeescript,socket&lt;br&gt;第二周 : 写了缺货提醒的接口(warehouse-coffee-lib–timer-newStocksInfor),获得缺货详细列表的接口(warehouse-coffee-lib-getStocksList)&lt;br&gt;第三周：写了获得缺货门店的信息接口(warehouse-coffee-lib-AreaLacks)&lt;br&gt;第四周：学express,node.js搭建网站，写后台&lt;br&gt;
    
    </summary>
    
    
      <category term="vocation" scheme="http://carryguan.com/tags/vocation/"/>
    
      <category term="life" scheme="http://carryguan.com/tags/life/"/>
    
      <category term="work" scheme="http://carryguan.com/tags/work/"/>
    
      <category term="vocation summing" scheme="http://carryguan.com/tags/vocation-summing/"/>
    
      <category term="暑假生活" scheme="http://carryguan.com/tags/%E6%9A%91%E5%81%87%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Github预览demo</title>
    <link href="http://carryguan.com/2016/07/15/github%E9%A2%84%E8%A7%88demo/"/>
    <id>http://carryguan.com/2016/07/15/github预览demo/</id>
    <published>2016-07-15T05:18:04.000Z</published>
    <updated>2016-07-26T01:39:20.854Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-fc915701514c515c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题所在？&lt;/li&gt;
&lt;li&gt;解决办法？&lt;/li&gt;
&lt;li&gt;博主建议？&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/75e30889e70a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一：问题的所在&quot;&gt;&lt;a href=&quot;#一：问题的所在&quot; class=&quot;headerlink&quot; title=&quot;一：问题的所在&quot;&gt;&lt;/a&gt;一：问题的所在&lt;/h2&gt;&lt;p&gt;相信很多小胖友们在把自己的网页上传到github仓库中，都会有一个疑问？是什么呢？&lt;br&gt;那就是上传完网页后，自己的仓库中是这个样子的&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-44104fdfe222e566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;，点进去相应的html文件是出来的是代码&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;可是自己想在网上看到自己仓库中的demo(也就是网页的效果)&lt;br&gt;下面博猪为您解答 (^~^)&lt;/p&gt;
&lt;hr&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;二：解决问题的方法&quot;&gt;&lt;a href=&quot;#二：解决问题的方法&quot; class=&quot;headerlink&quot; title=&quot;二：解决问题的方法&quot;&gt;&lt;/a&gt;二：解决问题的方法&lt;/h2&gt;&lt;h4 id=&quot;1-使用-Githubpages&quot;&gt;&lt;a href=&quot;#1-使用-Githubpages&quot; class=&quot;headerlink&quot; title=&quot;1: 使用 Githubpages&quot;&gt;&lt;/a&gt;1: 使用 Githubpages&lt;/h4&gt;&lt;p&gt;   比如我要上传&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5b4113b7f687b1e5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;   按照如下四个步骤上传到名为:flexSupplement的仓库中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init (初始化本地仓库)
git add .  （将本地所有文件加到仓库里）
git commit -m &amp;quot;message&amp;quot; （设置提交信息）
git remote add origin   git@github.com:sunningcarryhaha/flexSupplement.git（本地仓库链接远程仓库）
git push -u origin master （push文件到仓库中）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上传成功后是这个效果&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;br&gt;重头戏来了哟！&lt;br&gt;我们现在点击这个html文件，出现的效果全是代码![]&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;()，没有咱们想要的demo效果&lt;br&gt;此时呢，应该植入咱们github爸爸的一个好东西，那就是-githubPages&lt;/p&gt;
&lt;h5 id=&quot;第一步：找到Settings&quot;&gt;&lt;a href=&quot;#第一步：找到Settings&quot; class=&quot;headerlink&quot; title=&quot;第一步：找到Settings&quot;&gt;&lt;/a&gt;第一步：找到Settings&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;![](http://upload-images.jianshu.io/upload_images/2377897-0a301fa6cbc3d33f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;第二布：找到githubPages&quot;&gt;&lt;a href=&quot;#第二布：找到githubPages&quot; class=&quot;headerlink&quot; title=&quot;第二布：找到githubPages&quot;&gt;&lt;/a&gt;第二布：找到githubPages&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-5033f61187c659c7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;第三步：预览githubPages&quot;&gt;&lt;a href=&quot;#第三步：预览githubPages&quot; class=&quot;headerlink&quot; title=&quot;第三步：预览githubPages&quot;&gt;&lt;/a&gt;第三步：预览githubPages&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-794ba43a2fadab1d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;小胖友们看到这里一定会有疑问，预览到的是githubpages的效果，并不是你自己网页的效果，没关系，我下面为你们解答&lt;/p&gt;
&lt;h5 id=&quot;第四步：查看你的分支&quot;&gt;&lt;a href=&quot;#第四步：查看你的分支&quot; class=&quot;headerlink&quot; title=&quot;第四步：查看你的分支&quot;&gt;&lt;/a&gt;第四步：查看你的分支&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fdf9314d74b1a05.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;注意：我们生成githubPages的目的就是需要生成一个gh-pages分支(咱们正常情况下只有一个master分支)&lt;/p&gt;
&lt;h5 id=&quot;第五步：将远程仓库克隆到本地&quot;&gt;&lt;a href=&quot;#第五步：将远程仓库克隆到本地&quot; class=&quot;headerlink&quot; title=&quot;第五步：将远程仓库克隆到本地&quot;&gt;&lt;/a&gt;第五步：将远程仓库克隆到本地&lt;/h5&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;$ git clone git@github.com:sunningcarryhaha/flexSupplement.git&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&quot;第六步：将分支切换到gh-Pages&quot;&gt;&lt;a href=&quot;#第六步：将分支切换到gh-Pages&quot; class=&quot;headerlink&quot; title=&quot;第六步：将分支切换到gh-Pages&quot;&gt;&lt;/a&gt;第六步：将分支切换到gh-Pages&lt;/h5&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;  $ cd flexSupplement （进入到你克隆仓库的本地文件夹）&lt;br&gt;  $ git checkout gh-pages（将master分支切换到gh-pages分支上）&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h6 id=&quot;第七步：并重新上传到github上&quot;&gt;&lt;a href=&quot;#第七步：并重新上传到github上&quot; class=&quot;headerlink&quot; title=&quot;第七步：并重新上传到github上&quot;&gt;&lt;/a&gt;第七步：并重新上传到github上&lt;/h6&gt;&lt;p&gt;将本地克隆的文件删了，只留下.git,然后把你想要展示demo页面相关的文件粘进去&lt;br&gt;接着，执行以下语句&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt; git add . （将本地所有文件加到仓库里）&lt;br&gt; git commit -m “message” （设置提交信息）&lt;br&gt; git remote add origin git@github.com:sunningcarryhaha/flexSupplement.git（本地仓库链接远程仓库）&lt;br&gt; git push -u origin gh-pages （push文件到仓库中）&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h5 id=&quot;第八步：修改地址&quot;&gt;&lt;a href=&quot;#第八步：修改地址&quot; class=&quot;headerlink&quot; title=&quot;第八步：修改地址&quot;&gt;&lt;/a&gt;第八步：修改地址&lt;/h5&gt;&lt;p&gt;我的GithubPages地址是这个：&lt;a href=&quot;http://carryguan.me/flex-add&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://carryguan.me/flex-add&lt;/a&gt;&lt;br&gt;我要预览flex-add中的fb1.html&lt;br&gt;我最后预览的地址应该是这个：&lt;a href=&quot;http://carryguan.me/flex-add/fb1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://carryguan.me/flex-add/fb1.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;第九步：添加read-me&quot;&gt;&lt;a href=&quot;#第九步：添加read-me&quot; class=&quot;headerlink&quot; title=&quot;第九步：添加read.me&quot;&gt;&lt;/a&gt;第九步：添加read.me&lt;/h5&gt;&lt;p&gt;把地址放到read.me中&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;  flex-add&lt;br&gt;  这是一个关于flexbox基础的骰子布局&lt;br&gt;  &lt;a href=&quot;http://carryguan.me/flex-add/fb1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo&lt;/a&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-增加路径前缀（不建议用，会自动更改css的样式）&quot;&gt;&lt;a href=&quot;#2-增加路径前缀（不建议用，会自动更改css的样式）&quot; class=&quot;headerlink&quot; title=&quot;2: 增加路径前缀（不建议用，会自动更改css的样式）&quot;&gt;&lt;/a&gt;2: 增加路径前缀（不建议用，会自动更改css的样式）&lt;/h4&gt;&lt;p&gt;在地址前加&lt;a href=&quot;http://htmlpreview.github.io/?&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?&lt;/a&gt;前缀（不建议用这个，会更改css样式）&lt;br&gt;例如，你想预览这个：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;&quot;&gt;https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;你在这个地址前加&lt;a href=&quot;http://htmlpreview.github.io/?&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;最后预览demo地址是：&lt;br&gt;&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?https://github.com/aisinvon/aisinvon.github.io/blob/master/index.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt; 博主感想&lt;/p&gt;
&lt;p&gt;希望有更多小胖友提出宝贵意见,若有关于前端的问题，或者关于大学方面的感想可以私聊我(^~^)：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/guan-kai-li-88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/users/0293a04839f0/latest_articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://weibo.com/u/5048785433/home?wvr=5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=28756834&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-fc915701514c515c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;young&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题所在？&lt;/li&gt;
&lt;li&gt;解决办法？&lt;/li&gt;
&lt;li&gt;博主建议？&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 ^~^)&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/75e30889e70a&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一：问题的所在&quot;&gt;&lt;a href=&quot;#一：问题的所在&quot; class=&quot;headerlink&quot; title=&quot;一：问题的所在&quot;&gt;&lt;/a&gt;一：问题的所在&lt;/h2&gt;&lt;p&gt;相信很多小胖友们在把自己的网页上传到github仓库中，都会有一个疑问？是什么呢？&lt;br&gt;那就是上传完网页后，自己的仓库中是这个样子的&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-44104fdfe222e566.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;，点进去相应的html文件是出来的是代码&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-933438f6e1551351.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;可是自己想在网上看到自己仓库中的demo(也就是网页的效果)&lt;br&gt;下面博猪为您解答 (^~^)&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="demo" scheme="http://carryguan.com/tags/demo/"/>
    
      <category term="githubPages" scheme="http://carryguan.com/tags/githubPages/"/>
    
  </entry>
  
  <entry>
    <title>最详尽-hexo+GithubPages搭建博客</title>
    <link href="http://carryguan.com/2016/07/02/hexo-gihubpages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://carryguan.com/2016/07/02/hexo-gihubpages-搭建博客/</id>
    <published>2016-07-01T16:00:00.000Z</published>
    <updated>2016-07-17T09:01:04.566Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5ms460e6tj30zk0aqgn1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么选择hexo？&lt;/li&gt;
&lt;li&gt;搭建博客的基本步骤&lt;/li&gt;
&lt;li&gt;部署到Github Pages&lt;/li&gt;
&lt;li&gt;域名解析&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 )&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/0321cb243963&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么选择hexo？&quot;&gt;&lt;a href=&quot;#为什么选择hexo？&quot; class=&quot;headerlink&quot; title=&quot;为什么选择hexo？&quot;&gt;&lt;/a&gt;为什么选择hexo？&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;搭建博客的基本步骤&quot;&gt;&lt;a href=&quot;#搭建博客的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建博客的基本步骤&quot;&gt;&lt;/a&gt;搭建博客的基本步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购买域名&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;li&gt;注册github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一：购买域名&quot;&gt;&lt;a href=&quot;#一：购买域名&quot; class=&quot;headerlink&quot; title=&quot;一：购买域名&quot;&gt;&lt;/a&gt;一：购买域名&lt;/h3&gt;&lt;p&gt;   若小胖友们想把个人博客挂到属于自己的域名上，博主在这里建议大家提前把域名买好。&lt;br&gt;博主购买域名的地方是&lt;a href=&quot;https://wanwang.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;万网&lt;/a&gt;,注册登录后，填写你想要的域名&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a9273887335cde2a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;选择完自己域名后，付费就可以了！&lt;br&gt;(博主建议个人域名选择.me为后缀的较好-博主的域名就为&lt;a href=&quot;http://carryguan.me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;carryguan.me&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;二：安装hexo&quot;&gt;&lt;a href=&quot;#二：安装hexo&quot; class=&quot;headerlink&quot; title=&quot;二：安装hexo&quot;&gt;&lt;/a&gt;二：安装hexo&lt;/h3&gt;&lt;p&gt;  装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：&lt;br&gt;&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 若你是IT小白，安装git/node没成功,博主carry给你个福利贴士&lt;br&gt; (博主就是这样一点点过来的 （＃￣▽￣＃）)&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows安装git&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/b0b63dbfca599a4a483070a5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows安装node.js&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里建议小胖友们，先预习一下:&lt;br&gt;  &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git入门教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/20070065&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github趣味详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。&lt;br&gt;先进入一个文件夹路径：例如我的&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5fbuje1hjj30l50bd75k.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;再执行下面的命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;&lt;/pre&gt; 

&lt;h3 id=&quot;初始化框架&quot;&gt;&lt;a href=&quot;#初始化框架&quot; class=&quot;headerlink&quot; title=&quot;初始化框架&quot;&gt;&lt;/a&gt;初始化框架&lt;/h3&gt;&lt;h4 id=&quot;1执行如下语句&quot;&gt;&lt;a href=&quot;#1执行如下语句&quot; class=&quot;headerlink&quot; title=&quot;1执行如下语句&quot;&gt;&lt;/a&gt;1执行如下语句&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; hexo init blog&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; (blog是我自己建立的用来装博客的文件夹)&lt;/p&gt;
&lt;h4 id=&quot;2：再执行&quot;&gt;&lt;a href=&quot;#2：再执行&quot; class=&quot;headerlink&quot; title=&quot;2：再执行&quot;&gt;&lt;/a&gt;2：再执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;cd blog&lt;/code&gt;&lt;/pre&gt; 



&lt;h4 id=&quot;3-最后执行&quot;&gt;&lt;a href=&quot;#3-最后执行&quot; class=&quot;headerlink&quot; title=&quot;3: 最后执行&quot;&gt;&lt;/a&gt;3: 最后执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;以上三条语句执行完毕后， 你会在blog文件夹里看到如下:&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── _config.yml //网站的配置信息，您可以在此配置大部分的参数。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scaffolds //模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── source //资源文件夹是存放用户资源的地方。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | ├── _drafts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; | └── _posts &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── themes //主题文件夹。Hexo会根据主题来生成静态页面。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;最后看看你自己的个人网站：&quot;&gt;&lt;a href=&quot;#最后看看你自己的个人网站：&quot; class=&quot;headerlink&quot; title=&quot;最后看看你自己的个人网站：&quot;&gt;&lt;/a&gt;最后看看你自己的个人网站：&lt;/h4&gt;&lt;p&gt;在blog目录下执行gitbash命令:&lt;/p&gt;
&lt;p&gt;1：新建一篇文章（我的第一篇文章）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
 hexo new &quot;我的第一篇文章&quot;
&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;会在/source/_post里自动生成了“我的第一篇文章.md”文件，之后新建的文章都将存放在此目录下。编辑“我的第一篇文章.md”文件可修改内容。&lt;/p&gt;
&lt;p&gt;2：生成网站&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
hexo generate (可简写成 hexo g)
&lt;/code&gt;&lt;/pre&gt; 

&lt;p&gt;3:启动本地服务器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 
 hexo server (可简写成 hexo s)
&lt;/code&gt;&lt;/pre&gt; 


&lt;p&gt;4:在浏览器输入&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; 即可查看网站。&lt;/p&gt;
&lt;h3 id=&quot;三：注册github&quot;&gt;&lt;a href=&quot;#三：注册github&quot; class=&quot;headerlink&quot; title=&quot;三：注册github&quot;&gt;&lt;/a&gt;三：注册github&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt;&lt;br&gt;填写完相应信息，注册成功后，重新登录，进入到这个页面&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f5md7zebr5j30wp0gnq5f.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击图片中所圈位置出现了如下：&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdn65brmj30ng0h0dh1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Repository name里填写:你的用户名.github.io&lt;br&gt;(例如我的用户名是&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sunningcarryhaha&lt;/a&gt;,所以我的Repository name:sunningcarryhaha.github.io)&lt;br&gt;Description里随便填一下你的描述就好&lt;br&gt;Public选中&lt;br&gt;选中Initilize this respository with a README&lt;br&gt;最后点击绿色按钮创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5mdofjeuij30pv0k9tab.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;创建成功后&lt;br&gt;配置SSH-Key&lt;br&gt;&lt;a href=&quot;http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细步骤请点击此文章&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;将blog部署到Github-Pages-上&quot;&gt;&lt;a href=&quot;#将blog部署到Github-Pages-上&quot; class=&quot;headerlink&quot; title=&quot;将blog部署到Github Pages 上&quot;&gt;&lt;/a&gt;将blog部署到Github Pages 上&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 两种方法:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用hexo deploy部署&lt;/li&gt;
&lt;li&gt;使用git push 部署&lt;h3 id=&quot;1：hexo-deploy部署&quot;&gt;&lt;a href=&quot;#1：hexo-deploy部署&quot; class=&quot;headerlink&quot; title=&quot;1：hexo deploy部署&quot;&gt;&lt;/a&gt;1：hexo deploy部署&lt;/h3&gt;&lt;h4 id=&quot;配置deploy&quot;&gt;&lt;a href=&quot;#配置deploy&quot; class=&quot;headerlink&quot; title=&quot;配置deploy&quot;&gt;&lt;/a&gt;配置deploy&lt;/h4&gt;找到blog目录下的配置文件_config.yml,用编辑器打开此文件&lt;br&gt;找到此文件中的deploy字段，按照以下配置&lt;pre&gt;&lt;code&gt;deploy: 
 type: git 
 repo: git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git   
 branch: master
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;注意需要提前安装一个扩展：&quot;&gt;&lt;a href=&quot;#注意需要提前安装一个扩展：&quot; class=&quot;headerlink&quot; title=&quot;注意需要提前安装一个扩展：&quot;&gt;&lt;/a&gt;注意需要提前安装一个扩展：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;然后在命令行中执行&quot;&gt;&lt;a href=&quot;#然后在命令行中执行&quot; class=&quot;headerlink&quot; title=&quot;然后在命令行中执行&quot;&gt;&lt;/a&gt;然后在命令行中执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;hexo d
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;不幸的是，上述命令虽然简单方便，但是偶尔会有莫名其妙的问题出现，因此，我们也可以追本溯源，使用git命令来完成部署的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-使用gitbash，将public文件夹上传到自己的仓库中&quot;&gt;&lt;a href=&quot;#2-使用gitbash，将public文件夹上传到自己的仓库中&quot; class=&quot;headerlink&quot; title=&quot;2:使用gitbash，将public文件夹上传到自己的仓库中&quot;&gt;&lt;/a&gt;2:使用gitbash，将public文件夹上传到自己的仓库中&lt;/h3&gt;&lt;h4 id=&quot;第一步：进入到你的blog目录&quot;&gt;&lt;a href=&quot;#第一步：进入到你的blog目录&quot; class=&quot;headerlink&quot; title=&quot;第一步：进入到你的blog目录&quot;&gt;&lt;/a&gt;第一步：进入到你的blog目录&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; 
 cd blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;第二步-初始化博客&quot;&gt;&lt;a href=&quot;#第二步-初始化博客&quot; class=&quot;headerlink&quot; title=&quot;第二步 :初始化博客&quot;&gt;&lt;/a&gt;第二步 :初始化博客&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;
hexo g
&lt;/code&gt;&lt;/pre&gt; 

&lt;h4 id=&quot;第三步-把public文件夹上传到github仓库中&quot;&gt;&lt;a href=&quot;#第三步-把public文件夹上传到github仓库中&quot; class=&quot;headerlink&quot; title=&quot;第三步:把public文件夹上传到github仓库中&quot;&gt;&lt;/a&gt;第三步:把public文件夹上传到github仓库中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; 
cd public
&lt;/code&gt;&lt;/pre&gt; 

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init (初始化本地仓库)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .  （将本地文件加到仓库里）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;message&amp;quot; （设置提交信息）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git（本地仓库链接远程仓库）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master （push文件到仓库中）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;git@github.com:sunningcarryhaha/sunningcarryhaha.github.io.git&lt;br&gt;解释一下   ：&lt;br&gt;sunningcarryhaha是用户名&lt;br&gt;sunningcarryhaha.github.io是仓库名称&lt;br&gt;.git是后缀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详细的步骤可参考此&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/steven6977/article/details/10567719&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github push&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/chaihuasong/article/details/37911723&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git github 问题总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;部署成功以后，在浏览器中输入你的repository名字：例如我的&lt;a href=&quot;https://github.com/sunningcarryhaha&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sunningcarryhaha.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;就可以看到你的网站了&quot;&gt;&lt;a href=&quot;#就可以看到你的网站了&quot; class=&quot;headerlink&quot; title=&quot;就可以看到你的网站了&quot;&gt;&lt;/a&gt;就可以看到你的网站了&lt;/h4&gt;&lt;hr&gt;
&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入万网进行域名绑定&lt;/li&gt;
&lt;li&gt;进入public,新建CNAME&lt;/li&gt;
&lt;li&gt;把域名写到CNAME里&lt;/li&gt;
&lt;li&gt;传到github仓库里&lt;h3 id=&quot;1-进入万网进行域名绑定&quot;&gt;&lt;a href=&quot;#1-进入万网进行域名绑定&quot; class=&quot;headerlink&quot; title=&quot;1:进入万网进行域名绑定&quot;&gt;&lt;/a&gt;1:进入万网进行域名绑定&lt;/h3&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5feoitevaj30ah0bit9r.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5fepmf432j31hb0jgthk.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5fer7xepxj319r0d2gpx.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;安照以上图片进行操作&lt;br&gt;&lt;strong&gt; 尤其注意:记录值那里填写的是:sunningcarryhaha.github.io.，也就是你的仓库名字后还有个”.”  &lt;/strong&gt;&lt;br&gt;以上进行完毕后，接着下一步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-进入blog下的public文件夹-新建-CNAME&quot;&gt;&lt;a href=&quot;#2-进入blog下的public文件夹-新建-CNAME&quot; class=&quot;headerlink&quot; title=&quot;2:进入blog下的public文件夹,新建 CNAME&quot;&gt;&lt;/a&gt;2:进入blog下的public文件夹,新建 CNAME&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5fe1tnb1pj30rt0h5q7d.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005vGbJ7jw1f5feuzv6ncj30ip0e5gn3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-将public文件夹下的CNAME上传到github仓库中&quot;&gt;&lt;a href=&quot;#3-将public文件夹下的CNAME上传到github仓库中&quot; class=&quot;headerlink&quot; title=&quot;3:将public文件夹下的CNAME上传到github仓库中&quot;&gt;&lt;/a&gt;3:将public文件夹下的CNAME上传到github仓库中&lt;/h3&gt;&lt;p&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/005vGbJ7jw1f5feyzubl7j30l50bdq5p.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果上传成功的话，进入到你的github仓库中会看到CNAME文件&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005vGbJ7jw1f5ff5aey6gj30sj0ndn3i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-为了防止域名解析出问题&quot;&gt;&lt;a href=&quot;#4-为了防止域名解析出问题&quot; class=&quot;headerlink&quot; title=&quot;4:为了防止域名解析出问题&quot;&gt;&lt;/a&gt;4:为了防止域名解析出问题&lt;/h3&gt;&lt;p&gt;博主建议将blog下的public下的CNAME文件，复制到blog下的source文件夹里，这样更新public，不会出现CNAME文件丢失的情况&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果以上步骤都进行完毕的话，博主carry恭喜你:bowtie:,小胖友你zen棒，现在在浏览器输入你的域名，就可以成功的看到你的个人网站啦！&lt;br&gt;当然这个网站还可以换主题，美化！这方面的文章敬请期待，博主会继续出博文的!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;博主感想&quot;&gt;&lt;a href=&quot;#博主感想&quot; class=&quot;headerlink&quot; title=&quot;博主感想&quot;&gt;&lt;/a&gt;博主感想&lt;/h2&gt;&lt;p&gt;这个博客博主搭建了好久，走了好多弯路(原谅博主比较笨，呜呜！)&lt;br&gt;期间出了好多问题，最根本的原因是博主git方面不基础不好,所以建议小胖友们多练习一下git&lt;br&gt;这里推荐:&lt;br&gt;     &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git入门教程&lt;/a&gt;&lt;br&gt;    &lt;a href=&quot;http://www.runoob.com/nodejs/nodejs-install-setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node.js安装菜鸟教程&lt;/a&gt;&lt;br&gt;   &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官网&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/1e402922ee32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;markdown入门&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/24422335/answer/46357100&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo主题推荐&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;next-hexo主题&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo常见问题解决方案&lt;/a&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;http://music.163.com/outchain/player?type=2&amp;id=3412579&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005vGbJ7jw1f5ms460e6tj30zk0aqgn1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么选择hexo？&lt;/li&gt;
&lt;li&gt;搭建博客的基本步骤&lt;/li&gt;
&lt;li&gt;部署到Github Pages&lt;/li&gt;
&lt;li&gt;域名解析&lt;br&gt;(原谅博主carry比较变态，在博文加了歌曲，不想听歌的小胖友们可以到博文底部关闭 )&lt;br&gt;图片无法加载可以点击&lt;a href=&quot;http://www.jianshu.com/p/0321cb243963&quot;&gt;图片爸爸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么选择hexo？&quot;&gt;&lt;a href=&quot;#为什么选择hexo？&quot; class=&quot;headerlink&quot; title=&quot;为什么选择hexo？&quot;&gt;&lt;/a&gt;为什么选择hexo？&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;搭建博客的基本步骤&quot;&gt;&lt;a href=&quot;#搭建博客的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建博客的基本步骤&quot;&gt;&lt;/a&gt;搭建博客的基本步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;购买域名&lt;/li&gt;
&lt;li&gt;安装hexo&lt;/li&gt;
&lt;li&gt;注册github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;一：购买域名&quot;&gt;&lt;a href=&quot;#一：购买域名&quot; class=&quot;headerlink&quot; title=&quot;一：购买域名&quot;&gt;&lt;/a&gt;一：购买域名&lt;/h3&gt;&lt;p&gt;   若小胖友们想把个人博客挂到属于自己的域名上，博主在这里建议大家提前把域名买好。&lt;br&gt;博主购买域名的地方是&lt;a href=&quot;https://wanwang.aliyun.com/&quot;&gt;万网&lt;/a&gt;,注册登录后，填写你想要的域名&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://carryguan.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://carryguan.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>book</title>
    <link href="http://carryguan.com/2016/06/28/book/"/>
    <id>http://carryguan.com/2016/06/28/book/</id>
    <published>2016-06-28T01:11:43.000Z</published>
    <updated>2017-09-18T01:13:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTML-amp-CSS&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML&amp;amp;CSS&quot;&gt;&lt;/a&gt;HTML&amp;amp;CSS&lt;/h1&gt;&lt;h2 id=&quot;常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot;&gt;&lt;a href=&quot;#常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot; class=&quot;headerlink&quot; title=&quot;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&quot;&gt;&lt;/a&gt;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;行内元素(inline)：a b span input select strong samll&lt;/li&gt;
&lt;li&gt;块级元素(block)：p div ul ol li dl dt dd h1 table form center&lt;/li&gt;
&lt;li&gt;行内块级元素(inline-block):img（可以设置宽高，多个元素占一行，可设置所有margin和padding）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见的空元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br/&amp;gt; &amp;lt;hr/&amp;gt;  &amp;lt;link/&amp;gt; &amp;lt;meta/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;行内元素与块级元素的区别：&lt;/li&gt;
&lt;li&gt;行内元素一行占好多个，块级元素独占一行&lt;/li&gt;
&lt;li&gt;设置宽度width ,height 无效，可以通过line-height来设置。&lt;/li&gt;
&lt;li&gt;设置左右margin/padding有效，上下margin/padding无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;margin&quot;&gt;&lt;a href=&quot;#margin&quot; class=&quot;headerlink&quot; title=&quot;margin&quot;&gt;&lt;/a&gt;margin&lt;/h2&gt;&lt;p&gt;margin :上   右   下   左&lt;br&gt;margin: 上  右  下&lt;br&gt;margin : 上下  左右&lt;/p&gt;
&lt;h2 id=&quot;居中的常见方法-水平，竖直-5&quot;&gt;&lt;a href=&quot;#居中的常见方法-水平，竖直-5&quot; class=&quot;headerlink&quot; title=&quot;居中的常见方法(水平，竖直) 5%&quot;&gt;&lt;/a&gt;居中的常见方法(水平，竖直) 5%&lt;/h2&gt;&lt;h3 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中&quot;&gt;&lt;/a&gt;1.水平居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自身宽高，块级元素&lt;/li&gt;
&lt;li&gt;margin：0 auto; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-水平居中-父元素-text-align：center；&quot;&gt;&lt;a href=&quot;#2-水平居中-父元素-text-align：center；&quot; class=&quot;headerlink&quot; title=&quot;2.水平居中 父元素 text-align：center；&quot;&gt;&lt;/a&gt;2.水平居中 父元素 text-align：center；&lt;/h3&gt;&lt;p&gt;子元素的display：inline-block；在不受float影响下进行&lt;br&gt;是在父元素上添加：text-align：center；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;水平垂直居中（一）&quot;&gt;&lt;a href=&quot;#水平垂直居中（一）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（一）&quot;&gt;&lt;/a&gt;水平垂直居中（一）&lt;/h4&gt;&lt;p&gt; 自身宽高,position,left,top ,margin-left,top为自身宽高负值一半&lt;br&gt;(left,top,right,bottom使用要，在position ：relative/absolute)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-top: -75px;/*自身 高度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-left: -50px;/*自身 宽度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;a href=&quot;#水平垂直居中（三）绝对定位和transfrom&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;/a&gt;水平垂直居中（三）绝对定位和transfrom&lt;/h3&gt;&lt;p&gt;不需要知道居中元素的宽高&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: translate(-50%,-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（二）&quot;&gt;&lt;a href=&quot;#水平垂直居中（二）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（二）&quot;&gt;&lt;/a&gt;水平垂直居中（二）&lt;/h3&gt;&lt;p&gt;自身宽高，position,定位上下左右为0，margin:atuo（auto等分其余空间）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bottom: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;a href=&quot;#水平垂直居中（四）diplay：table-cell&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;/a&gt;水平垂直居中（四）diplay：table-cell&lt;/h3&gt;&lt;p&gt;其实这个就是把其变成表格样式，再利用表格的样式来进行居中，很方便&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vertical-align: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /*margin: 0 auto;*/  这个也行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;a href=&quot;#水平垂直居中（五）flexBox居中&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;/a&gt;水平垂直居中（五）flexBox居中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            justify-content: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            align-items:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7552ce07c88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/a7552ce07c88&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的垂直居中的方式&quot;&gt;&lt;a href=&quot;#常见的垂直居中的方式&quot; class=&quot;headerlink&quot; title=&quot;常见的垂直居中的方式&quot;&gt;&lt;/a&gt;常见的垂直居中的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vertical-align:middle(table)&lt;/li&gt;
&lt;li&gt;translateY(-50%)&lt;br&gt;-webkit-transform: translateY(-50%);&lt;/li&gt;
&lt;li&gt;css3 flex&lt;br&gt;不定宽高水平垂直居中&lt;br&gt;align-items:center;//子元素垂直居中&lt;br&gt;justify-content:center;//子元素水平居中&lt;br&gt;display:-webkit-flex;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;a href=&quot;#如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot; class=&quot;headerlink&quot; title=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;/a&gt;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一行文本垂直居中：height = line-height&lt;/li&gt;
&lt;li&gt;多行文本固定高度垂直居中：vertical-align（兼容IE7及IE7）&lt;br&gt;因为想使用vertical-align:middle，就要模拟表格：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父元素:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table-cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vertical-align:middle;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多行文本垂直居中：vertical-align+（兼容IE6以上）&lt;br&gt;在IE6中对父元素进行定位后，如果再对子元素进行百分比计算时，计算的基础似乎是有继承性的（使用百分比计算的基础将不再是该元素的高度，而从父元素继承来的定位高度）。&lt;br&gt;父亲元素的外层： display:table;&lt;br&gt;父亲：top:50%&lt;br&gt;孩子：top:-50%&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.wrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow:hidden;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父亲元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subwrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vertical-align:middle;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table-cell;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:absolute;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素 ：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.content&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:-50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;flex弹性布局：&quot;&gt;&lt;a href=&quot;#flex弹性布局：&quot; class=&quot;headerlink&quot; title=&quot;flex弹性布局：&quot;&gt;&lt;/a&gt;flex弹性布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/li&gt;
&lt;li&gt;父块元素：display: flex;&lt;/li&gt;
&lt;li&gt;父行级元素：display: inline-flex;&lt;/li&gt;
&lt;li&gt;设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/li&gt;
&lt;li&gt;具体描述：&lt;br&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;ul&gt;
&lt;li&gt;父亲容器属性：&lt;ul&gt;
&lt;li&gt;flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li&gt;justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/li&gt;
&lt;li&gt;align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;&lt;/li&gt;
&lt;li&gt;孩子項目屬性：&lt;ul&gt;
&lt;li&gt;order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/li&gt;
&lt;li&gt;flex-grow：设置或检索弹性盒的扩展比率。根据弹性盒子元素所设值作为比率来分配剩余空间。&lt;/li&gt;
&lt;li&gt;flex-shrink：属性定义了项目的缩小比例，默认为1，如果没有显示定义该属性，将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flex-basis：设置或检索弹性盒伸缩基准值，如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间。&lt;ul&gt;
&lt;li&gt;align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【问题】：&lt;br&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;/p&gt;
&lt;p&gt;【答案】：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex 是 flex-grow、flex-shrink、flex-basis的缩写。故其取值可以考虑以下情况：&lt;/li&gt;
&lt;li&gt;flex 的默认值是 0 1 auto&lt;/li&gt;
&lt;li&gt;flex : none，则计算值为 0 0 auto&lt;/li&gt;
&lt;li&gt;flex : auto，则计算值为 1 1 auto&lt;/li&gt;
&lt;li&gt;flex :非负值，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%&lt;/li&gt;
&lt;li&gt;flex 长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1&lt;/li&gt;
&lt;li&gt;flex : 非负值　非负值，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浮动元素会脱离文档流并向左/向右浮动（不在正常位置，并且他后面的不浮动元素会占他的位置），浮动直到碰到父元素或者另一个浮动元素。&lt;/li&gt;
&lt;li&gt;浮动不会影响同级别普通元素的布局，同时也存在盖住普通元素的风险。&lt;/li&gt;
&lt;li&gt;clear属性不允许被清除浮动的元素的左边/右边挨着浮动元素，底层原理是在被清除浮动的元素上边或者下边添加足够的清除空间。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a0f4eff0c7cd5c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot;&gt;&lt;a href=&quot;#说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot; class=&quot;headerlink&quot; title=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&quot;&gt;&lt;/a&gt;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&lt;/h2&gt;&lt;p&gt;当一个内层元素是浮动的时候，如果没有关闭浮动时，其父元素也就不会再包含这个浮动的内层元素，因为此时浮动元素已经脱离了文档流。也就是为什么外层不能被撑开了！&lt;br&gt;（2）：边框不能撑开 （3）：margin ,padding设置值不能正确显示（1）：背景不能显示&lt;/p&gt;
&lt;h3 id=&quot;方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot;&gt;&lt;a href=&quot;#方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot; class=&quot;headerlink&quot; title=&quot;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&quot;&gt;&lt;/a&gt;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div class=&amp;quot;outer&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div1&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div2&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div3&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clear&amp;#123;clear:both; height: 0; line-height: 0; font-size: 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二：触发BFC&quot;&gt;&lt;a href=&quot;#方法二：触发BFC&quot; class=&quot;headerlink&quot; title=&quot;方法二：触发BFC&quot;&gt;&lt;/a&gt;方法二：触发BFC&lt;/h3&gt;&lt;p&gt;父级div定义 overflow: hidden（hidden可以兼容IE，就是对seo不太友好,auto不可以兼容IE）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父亲 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.over-flow&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow: hidden; // 是在处理兼容性问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;###方法三： clearfix:before,after&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 全浏览器通用的clearfix方案【推荐】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 同时加入:before以解决现代浏览器上边距折叠的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: table;//block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &amp;quot; &amp;quot;;// &amp;apos;.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *zoom: 1;//引入了zoom以支持IE6/7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/leipeng/blog/221125&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://my.oschina.net/leipeng/blog/221125&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/5138706046b1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/5138706046b1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/09bd5873bed4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/09bd5873bed4&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h2&gt;&lt;p&gt;BFC可以做:BFC清除浮动，BFC解决垂直边距折叠&lt;br&gt;BFC全称是块状格式化上下文，它是按照块级盒子布局的。我们了解他的特征、触发方式、常见使用场景这些就够了。&lt;/p&gt;
&lt;p&gt;BFC的主要特征&lt;/p&gt;
&lt;p&gt;✦ BFC容器是一个隔离的容器，和其他元素互不干扰；所以我们可以用触发两个元素的BFC来解决垂直边距折叠问题。&lt;br&gt;✦ BFC可以包含浮动；通常用来解决浮动父元素高度坍塌的问题。&lt;/p&gt;
&lt;p&gt;其中，BFC清除浮动就是用的“包含浮动”这条特性。&lt;br&gt;那么，怎样才能触发BFC呢？&lt;/p&gt;
&lt;p&gt;BFC的触发方式&lt;/p&gt;
&lt;p&gt;我们可以给父元素添加以下属性来触发BFC(一下任意一条就可以)：&lt;br&gt;✦ float 为 left | right(不为none)&lt;br&gt;✦ overflow 为 hidden | auto | scorll(不为visible   )&lt;br&gt;✦ display 为 table-cell | table-caption | inline-block | flex | inline-flex&lt;br&gt;✦ position 为 absolute | fixed&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;a href=&quot;#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;/a&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;/h2&gt;&lt;p&gt;每个HTML元素都是长方形盒子。&lt;br&gt;  （1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;  （2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;  （3）区  别：&lt;br&gt; 标准盒模型的width为内容区的width，盒子总宽度：width+padding+border+margin&lt;br&gt; IE的width是内容区宽度+padding+border，盒子总宽度：width+margin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fc97e71155223a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-502ce3aaecc4b38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position-的几种值-，详细说明一下每种的区别-3&quot;&gt;&lt;a href=&quot;#position-的几种值-，详细说明一下每种的区别-3&quot; class=&quot;headerlink&quot; title=&quot;position 的几种值 ，详细说明一下每种的区别 3%&quot;&gt;&lt;/a&gt;position 的几种值 ，详细说明一下每种的区别 3%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;static    默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。&lt;/li&gt;
&lt;li&gt;relative    位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。&lt;/li&gt;
&lt;li&gt;absolute    位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。&lt;/li&gt;
&lt;li&gt;fixed    位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;a href=&quot;#如果position设置成absolute属性该元素的display属性会变成什么&quot; class=&quot;headerlink&quot; title=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;/a&gt;如果position设置成absolute属性该元素的display属性会变成什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;position: absolute,float会隐式的改变display类型， 不论之前是什么类型的元素（ display: none除外），&lt;ul&gt;
&lt;li&gt;只要设置了position: absolute或float， 都会让元素以display: inline - block的方式显示， 可以设置长宽，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就算是显示的设置display: inline或display: block， 仍然无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display-有几个值-3&quot;&gt;&lt;a href=&quot;#display-有几个值-3&quot; class=&quot;headerlink&quot; title=&quot;display 有几个值  3%&quot;&gt;&lt;/a&gt;display 有几个值  3%&lt;/h2&gt;&lt;p&gt;每个元素都有display属性，确定该元素的类型，&lt;br&gt;每个元素都有默认的display值，&lt;br&gt;如div的display默认值为“block”，则为“块级”元素；&lt;br&gt;span默认display属性值为“inline”，是“行内”元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-0a9d9c4eb7fc996e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伪类-伪元素&quot;&gt;&lt;a href=&quot;#伪类-伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h2&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些？&quot; class=&quot;headerlink&quot; title=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;/a&gt;CSS3新增伪类有那些？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;举例：
  p:first-of-type    选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:last-of-type    选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-of-type    选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-child        选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。
  p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。

 inptut
    :enabled          
   :disabled         控制表单控件的禁用状态。
  :checked        单选框或复选框被选中。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;a href=&quot;#CSS选择器有哪些？哪些属性可以继承？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;/a&gt;CSS选择器有哪些？哪些属性可以继承？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; 1.id选择器（ # myid）
2.类选择器（.myclassname）
3.标签选择器（div, h1, p）
4.相邻选择器（h1 + p）
5.子选择器（ul &amp;gt; li）
6.后代选择器（li a）
7.通配符选择器（ * ）
8.属性选择器（a[rel = &amp;quot;external&amp;quot;]）
9.伪类选择器（a:hover, li:nth-child）
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可继承的样式： font-size font-family color, UL LI DL DD DT;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不可继承的样式：border padding margin width height ;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;a href=&quot;#CSS优先级算法如何计算？&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;/a&gt;CSS优先级算法如何计算？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先级就近原则，同权重情况下样式定义最近者为准;&lt;/li&gt;
&lt;li&gt;载入样式以最后载入的定位为准;&lt;h3 id=&quot;同权重&quot;&gt;&lt;a href=&quot;#同权重&quot; class=&quot;headerlink&quot; title=&quot;同权重&quot;&gt;&lt;/a&gt;同权重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、 位于 &amp;lt; head / &amp;gt; 标签里的 &amp;lt; style / &amp;gt; 中所定义的CSS拥有最高级的优先权。　　&lt;/li&gt;
&lt;li&gt;2、 第二级的优先属性由位于 &amp;lt; style / &amp;gt; 标签中的 @import 引入样式表所定义。　　&lt;/li&gt;
&lt;li&gt;3、 第三级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表定义。&lt;/li&gt;
&lt;li&gt;4、 第四级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表内的 @import 导入样式表定义。　　&lt;/li&gt;
&lt;li&gt;5、 第五级优先的样式有用户设定。　　 最低级的优先权由浏览器默认。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权重的进制是256&lt;/p&gt;
&lt;h3 id=&quot;属性选择器的权重问题&quot;&gt;&lt;a href=&quot;#属性选择器的权重问题&quot; class=&quot;headerlink&quot; title=&quot;属性选择器的权重问题:&quot;&gt;&lt;/a&gt;属性选择器的权重问题:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// !important ---------&amp;gt;   无穷
// 行间样式-------------&amp;gt;   1000
// id------------------&amp;gt;   100
// class|属性|伪类------&amp;gt;   10
// 标签|伪元素 ---------&amp;gt;    1
// 通配符---------------&amp;gt;   0
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面导入样式时，使用link和-import有什么区别？&quot;&gt;&lt;a href=&quot;#页面导入样式时，使用link和-import有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;页面导入样式时，使用link和@import有什么区别？&quot;&gt;&lt;/a&gt;页面导入样式时，使用link和@import有什么区别？&lt;/h2&gt;&lt;p&gt;1 : 属于link属于xml 标签，除了加载css以外，还能定义rss和rel等 。@import是css提供的，只能用于加载css&lt;br&gt;2 :页面加载页面在加载时候，link同时被加载；而@import引用的css等页面加载完毕再加载&lt;br&gt;3：兼容性@import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;&lt;br&gt;4：link方式的样式权重高于@import的权重。&lt;br&gt;5：使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。&lt;br&gt;6：. 最后一个很有意思， @import url有最大次数的限制， IE6最多引入31次， firefox并没有发现&lt;br&gt;7： @import的优点： 多个样式表导入一个样式表中， 页面只需要引入一个即可&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引入css的几种方式-2&quot;&gt;&lt;a href=&quot;#引入css的几种方式-2&quot; class=&quot;headerlink&quot; title=&quot;引入css的几种方式 2%&quot;&gt;&lt;/a&gt;引入css的几种方式 2%&lt;/h2&gt;&lt;h3 id=&quot;1-行内样式&quot;&gt;&lt;a href=&quot;#1-行内样式&quot; class=&quot;headerlink&quot; title=&quot;1.行内样式&quot;&gt;&lt;/a&gt;1.行内样式&lt;/h3&gt;&lt;p&gt;最直接最简单的一种，直接对HTML标签使用style=””，例如：&lt;/p&gt;
&lt;p style=&quot;color:#F00; &quot;&gt;&lt;/p&gt;

&lt;p&gt;缺点：HTML页面不纯净，文件体积大，不利于蜘蛛爬行，后期维护不方便。&lt;/p&gt;
&lt;h3 id=&quot;2-内嵌样式&quot;&gt;&lt;a href=&quot;#2-内嵌样式&quot; class=&quot;headerlink&quot; title=&quot;2.内嵌样式&quot;&gt;&lt;/a&gt;2.内嵌样式&lt;/h3&gt;&lt;p&gt;内嵌样式就是将CSS代码写在&lt;head&gt;&lt;/head&gt;之间，并且用&lt;style&gt;&lt;/style&gt;进行声明，例如：&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;

body,div,a,img,p{margin:0; padding:0;}

&lt;/style&gt;

&lt;p&gt;优缺点：页面使用公共CSS代码，也是每个页面都要定义的，如果一个网站有很多页面，每个文件都会变大，后期维护难度也大，如果文件很少，CSS代码也不多，这种样式还是很不错的。&lt;/p&gt;
&lt;h3 id=&quot;3-链接样式&quot;&gt;&lt;a href=&quot;#3-链接样式&quot; class=&quot;headerlink&quot; title=&quot;3.链接样式&quot;&gt;&lt;/a&gt;3.链接样式&lt;/h3&gt;&lt;p&gt;链接样式是使用频率最高，最实用的样式，只需要在&lt;head&gt;&lt;/head&gt;之间加上&lt;link…&gt;就可以了，如下：&lt;/link…&gt;&lt;/p&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;

&lt;p&gt;优缺点：实现了页面框架代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便&lt;/p&gt;
&lt;h3 id=&quot;4-导入样式（不建议使用）&quot;&gt;&lt;a href=&quot;#4-导入样式（不建议使用）&quot; class=&quot;headerlink&quot; title=&quot;4.导入样式（不建议使用）&quot;&gt;&lt;/a&gt;4.导入样式（不建议使用）&lt;/h3&gt;&lt;p&gt;导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@import在html中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&quot;text/css&quot;&gt;
@import url(style.css);
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;@import在CSS中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@import url(style.css);&lt;/p&gt;
&lt;h3 id=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;a href=&quot;#四种CSS引入方式的优先级&quot; class=&quot;headerlink&quot; title=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;/a&gt;四种CSS引入方式的优先级&lt;/h3&gt;&lt;p&gt;1.就近原则&lt;br&gt;2.理论上：行内&amp;gt;内嵌&amp;gt;链接&amp;gt;导入&lt;br&gt;3.实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;锚点-1&quot;&gt;&lt;a href=&quot;#锚点-1&quot; class=&quot;headerlink&quot; title=&quot;锚点 1%&quot;&gt;&lt;/a&gt;锚点 1%&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;代码如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;123.html#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt; &amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;两栏布局（左固定，右自适应）&quot;&gt;&lt;a href=&quot;#两栏布局（左固定，右自适应）&quot; class=&quot;headerlink&quot; title=&quot;两栏布局（左固定，右自适应）&quot;&gt;&lt;/a&gt;两栏布局（左固定，右自适应）&lt;/h2&gt;&lt;h3 id=&quot;1-float-margin&quot;&gt;&lt;a href=&quot;#1-float-margin&quot; class=&quot;headerlink&quot; title=&quot;1:float+margin&quot;&gt;&lt;/a&gt;1:float+margin&lt;/h3&gt;&lt;p&gt;左定宽高左浮动， 右设置margin - left:左边宽&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin - left: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2：float-BFC&quot;&gt;&lt;a href=&quot;#2：float-BFC&quot; class=&quot;headerlink&quot; title=&quot;2：float+BFC&quot;&gt;&lt;/a&gt;2：float+BFC&lt;/h3&gt;&lt;p&gt;左定宽高左浮动，右触发BFC&lt;/p&gt;
&lt;h3 id=&quot;3-left-0-left-左宽-right-0&quot;&gt;&lt;a href=&quot;#3-left-0-left-左宽-right-0&quot; class=&quot;headerlink&quot; title=&quot;3:left:0,left:-左宽,right:0;&quot;&gt;&lt;/a&gt;3:left:0,left:-左宽,right:0;&lt;/h3&gt;&lt;p&gt;左定宽高 ,设置定位position absolute, left 0 ;&lt;br&gt;        .left {&lt;br&gt;            width: 100 px;&lt;br&gt;            height: 100 px;&lt;br&gt;            background - color: red;&lt;br&gt;            position: absolute;&lt;br&gt;            left: 0;&lt;br&gt;        }&lt;br&gt;        .right {&lt;br&gt;            height: 100 px;&lt;br&gt;            background - color: green;&lt;br&gt;            right: 0;&lt;br&gt;        }&lt;/p&gt;
&lt;h3 id=&quot;三个元素都浮动，左定宽高，右宽-cal-100-x&quot;&gt;&lt;a href=&quot;#三个元素都浮动，左定宽高，右宽-cal-100-x&quot; class=&quot;headerlink&quot; title=&quot;三个元素都浮动，左定宽高，右宽 cal(100%-x)&quot;&gt;&lt;/a&gt;三个元素都浮动，左定宽高，右宽 cal(100%-x)&lt;/h3&gt;&lt;hr&gt;
&lt;h2 id=&quot;实现三列布局（两边固定，中间自适应）&quot;&gt;&lt;a href=&quot;#实现三列布局（两边固定，中间自适应）&quot; class=&quot;headerlink&quot; title=&quot;实现三列布局（两边固定，中间自适应）&quot;&gt;&lt;/a&gt;实现三列布局（两边固定，中间自适应）&lt;/h2&gt;&lt;p&gt;1：绝对定位法：左右绝对定位，left:0,right:0,中间margin: 0 x;&lt;br&gt;此方法的优点是，理解容易，上手简单，受内部元素影响而破坏布局的概率低，就是比较经得起折腾。&lt;br&gt;缺点在于：如果中间栏含有最小宽度限制.布局可能受内部影响。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .left,.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;//为了防止将后一个块级元素挤下去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2：浮动方法：左右各浮动+中设margin&lt;br&gt;简便，但是灵活性低下&lt;br&gt;dom顺序有限制：因为左右浮动的缘故，只能将mid放在左右后面&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    .con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;我是左边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;我是右边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3:flex，将mid设置属性flex:1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flex: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4：圣杯布局：三个都浮动+左右margin负值&lt;br&gt;优点：三栏相互关联，可谓真正意义上的自适应，有一定的抗性——布局不易受内部影响。&lt;br&gt;缺点：相对比较难理解些，上手不容易，代码相对复杂。出现百分比宽度，过多的负值定位，如果出现布局的bug，排查不易。&lt;br&gt;【dom结构】：先自适应的div，然后再左右顺序可以不定&lt;br&gt;mid外层: width:100%，float:left&lt;br&gt;mid :margin 0 x;&lt;br&gt;左右 左浮动&lt;br&gt;第一个兄弟：margin-left:-100%&lt;br&gt;第二个兄弟：margin-left:-xpx;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;div class=&amp;quot;main-con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                我是中间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;我是左边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;我是右边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .mid-wraper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .mid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-left: -100%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-left: -220px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC的通俗理解：&quot;&gt;&lt;a href=&quot;#BFC的通俗理解：&quot; class=&quot;headerlink&quot; title=&quot;BFC的通俗理解：&quot;&gt;&lt;/a&gt;BFC的通俗理解：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Block Formatting Context（ 块级格式化上下文） 是W3C CSS 2.1 规范中的一个概念， 它决定了元素如何对其内容进行定位， 以及与其他元素的关系和相互作用。 简单来讲， 我们可以把它理解为， 我们在进行盒模型布局的时候， 如果一个元素符合了成为BFC的条件，&lt;ul&gt;
&lt;li&gt;该元素成为一个隔离了的独立容器， 元素内部元素会垂直的沿着其父元素的边框排列， 和外部元素互不影响。 比如浮动元素会触发BFC，&lt;br&gt;浮动元素内部的子元素主要受到该浮动元素的影响， 而两个浮动元素之间是互不影响的。&lt;/li&gt;
&lt;li&gt;在CSS3 中， BFC 叫做Flow Root。 在早期的ie中也有类似的概念haslayout IE6、 7 的很多布局产生的bug（ 如3px间隙、 绝对定位的继承宽度）都可以通过触发hasLayout修复， 比较推荐的方法为zoom: 1 与height: 1 % ，不会破坏已有的样式， 相信大家对它并不陌生。&lt;/li&gt;
&lt;li&gt;同样的以往集中在float、 绝对定位、 margin collaspe中的很多困惑， 在理解了bfc后， 都能够被我们一一解除。&lt;h2 id=&quot;BFC规范中的定义：&quot;&gt;&lt;a href=&quot;#BFC规范中的定义：&quot; class=&quot;headerlink&quot; title=&quot;BFC规范中的定义：&quot;&gt;&lt;/a&gt;BFC规范中的定义：&lt;/h2&gt;w3c规范对BFC的解释：&lt;/li&gt;
&lt;li&gt;浮动元素和绝对定位元素， 不是块级盒子的块容器（ 如 inline - blocks, table - cells, 和 table - captions）， 以及设置了overflow属性（ 除了visible）的块级盒子， 都会为他们的内容创建新的BFC（ 块级格式上下文）。&lt;ul&gt;
&lt;li&gt;在BFC中， 盒子从顶端开始垂直地 一个接一个地排列， 两个盒子之间的垂直的间隙是由他们的margin 值所决定的。 在一个BFC中， 两个相邻的块级盒子的&lt;/li&gt;
&lt;li&gt;垂直外边距会产生折叠。 在BFC中， 每一个盒子的左外边缘（ margin - left） 会触碰到容器的左边缘(border - left)（ 对于从右到左的格式来说， 则触碰到右边缘）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    触发BFC的方法：(任一即可)

float 元素
position（ absolute， fixed）
display(table - cell， table - caption， inline - block)
overflow 除了visible 以外的值（ hidden， auto， scroll）
fieldset元素
早期IE的hasLayout会触发一个新的block formatting context
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;BFC的特性&quot;&gt;&lt;a href=&quot;#BFC的特性&quot; class=&quot;headerlink&quot; title=&quot;BFC的特性&quot;&gt;&lt;/a&gt;BFC的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;边缘不和浮动元素重叠&lt;/li&gt;
&lt;li&gt;不存在collapsing margins问题&lt;/li&gt;
&lt;li&gt;第一个特性特别有用， 因为元素触发了BFC的话， 就不会被float元素覆盖， 当子元素全部浮动的时候也能够正确地包含了&lt;ul&gt;
&lt;li&gt;第二个margin不会叠加的特性， 可以理解为两个处于普通流的盒子， 会有margin叠加的问题， 是因为他们属于相同的BFC， 当他自身创建了一个新的BFC时， 这个问题就不存在了&lt;h3 id=&quot;BFC的常见应用&quot;&gt;&lt;a href=&quot;#BFC的常见应用&quot; class=&quot;headerlink&quot; title=&quot;BFC的常见应用&quot;&gt;&lt;/a&gt;BFC的常见应用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过边缘不和浮动元素重叠的特性， 实现两栏结构。&lt;/li&gt;
&lt;li&gt;清除元素内部浮动&lt;/li&gt;
&lt;li&gt;解决合并外边距的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot;&gt;&lt;a href=&quot;#常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot; class=&quot;headerlink&quot; title=&quot;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot;&gt;&lt;/a&gt;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&lt;/h2&gt;&lt;p&gt;有时需要将网页中的一些数据保存在浏览器端，这样做的好处是，当下次访问页面时，不需要再次向服务器请求数据，直接就可以从本地读取数据。目前常用的有以下几种方法：&lt;/p&gt;
&lt;h3 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;&lt;strong&gt;cookie&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K，cookie数据大小不能超过4k&lt;/p&gt;
&lt;h3 id=&quot;Flash-ShareObject&quot;&gt;&lt;a href=&quot;#Flash-ShareObject&quot; class=&quot;headerlink&quot; title=&quot;Flash ShareObject&quot;&gt;&lt;/a&gt;&lt;strong&gt;Flash ShareObject&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这种方式能能解决上面提到的cookie存储的两个弊端，而且能够跨浏览器，应该说是目前最好的本地存储方案。不过，需要在页面中插入一个Flash，当浏览器没有安装Flash控件时就不能用了。所幸的是，没有安装Flash的用户极少。&lt;br&gt;缺点：需要安装Flash插件。&lt;/p&gt;
&lt;h3 id=&quot;sessionStorage&quot;&gt;&lt;a href=&quot;#sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;sessionStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;sessionStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用于Firefox2+的火狐浏览器，用这种方式存储的数据仅窗口级别有效，同一个窗口（或者Tab）页面刷新或者跳转，都能获取到本地存储的数据，当新开窗口或者页面时，原来的数据就失效了。&lt;br&gt;缺点：IE不支持、不能实现数据的持久保存。&lt;/p&gt;
&lt;h3 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;localStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;localStorage是Web Storage互联网存储规范中的一部分，现在在Firefox 3.5、Safari 4和IE8中得到支持。&lt;br&gt;缺点：低版本浏览器不支持。&lt;/p&gt;
&lt;p&gt;提示：localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;//存储信息   （存储的信息名称，要存储的字符串）&lt;br&gt;localStorage.setItem(“CC_email_list”,input_eamil[i])&lt;br&gt;//读取信息   （要读取的信息名称）&lt;br&gt;localStorage.getItem(“CC_email_list”)&lt;br&gt;//清除信息    （要清除的信息名称）&lt;br&gt;localStorage.removeItem(“CC_email_list”);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;globalStorage&quot;&gt;&lt;a href=&quot;#globalStorage&quot; class=&quot;headerlink&quot; title=&quot;globalStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;globalStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用于Firefox2+的火狐浏览器，类似于IE的userData。&lt;br&gt;1 //赋值 2 globalStorage[location.hostname][‘name’] = ‘tugai’; 3 //读取 4 globalStorage[location.hostname][‘name’]; 5 //删除 6 globalStorage[location.hostname].removeItem(‘name’);&lt;/p&gt;
&lt;h3 id=&quot;Google-Gear&quot;&gt;&lt;a href=&quot;#Google-Gear&quot; class=&quot;headerlink&quot; title=&quot;Google Gear&quot;&gt;&lt;/a&gt;&lt;strong&gt;Google Gear&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Google开发出的一种本地存储技术。&lt;br&gt;缺点：需要安装Gear组件。&lt;/p&gt;
&lt;h3 id=&quot;userData&quot;&gt;&lt;a href=&quot;#userData&quot; class=&quot;headerlink&quot; title=&quot;userData&quot;&gt;&lt;/a&gt;&lt;strong&gt;userData&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;IE浏览器可以使用userData来存储数据，容量可达到640K，这种方案是很可靠的，不需要安装额外的插件。缺点：它仅在IE下有效。&lt;br&gt;缺点：IE不支持。&lt;/p&gt;
&lt;p&gt;结论：Flash shareobject是不错的选择，如果你不想在页面上嵌入Flash，可以结合使用userData(IE6+)和globalStorage(Firefox2+)和localStorage(chrome3+)实现跨浏览器。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;存储大小：&quot;&gt;&lt;a href=&quot;#存储大小：&quot; class=&quot;headerlink&quot; title=&quot;存储大小：&quot;&gt;&lt;/a&gt;存储大小：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;cookie数据大小不能超过4k。
sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;有期时间：&quot;&gt;&lt;a href=&quot;#有期时间：&quot; class=&quot;headerlink&quot; title=&quot;有期时间：&quot;&gt;&lt;/a&gt;有期时间：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
sessionStorage  数据在当前浏览器窗口关闭后自动删除。
cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;h3 id=&quot;1-标签语义化，&quot;&gt;&lt;a href=&quot;#1-标签语义化，&quot; class=&quot;headerlink&quot; title=&quot;1:标签语义化，&quot;&gt;&lt;/a&gt;1:标签语义化，&lt;/h3&gt;&lt;p&gt;比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签&lt;/p&gt;
&lt;h3 id=&quot;2、音视频元素，&quot;&gt;&lt;a href=&quot;#2、音视频元素，&quot; class=&quot;headerlink&quot; title=&quot;2、音视频元素，&quot;&gt;&lt;/a&gt;2、音视频元素，&lt;/h3&gt;&lt;p&gt;video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。&lt;/p&gt;
&lt;h3 id=&quot;3、新增很多api，&quot;&gt;&lt;a href=&quot;#3、新增很多api，&quot; class=&quot;headerlink&quot; title=&quot;3、新增很多api，&quot;&gt;&lt;/a&gt;3、新增很多api，&lt;/h3&gt;&lt;p&gt;比如获取用户地理位置的window.navigator.geoloaction&lt;/p&gt;
&lt;h3 id=&quot;、websocket&quot;&gt;&lt;a href=&quot;#、websocket&quot; class=&quot;headerlink&quot; title=&quot;、websocket&quot;&gt;&lt;/a&gt;、websocket&lt;/h3&gt;&lt;p&gt;websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。&lt;br&gt;主要通信过程：先借http完成握手，达到了长连接&lt;br&gt;第一步：浏览器基于tcp，发送http请求&lt;br&gt;第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手&lt;br&gt;第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息&lt;br&gt;websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、HTML5-能够本地存储数据，在之前都是使用-cookies-使用的。&quot;&gt;&lt;a href=&quot;#、HTML5-能够本地存储数据，在之前都是使用-cookies-使用的。&quot; class=&quot;headerlink&quot; title=&quot;、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&quot;&gt;&lt;/a&gt;、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&lt;/h3&gt;&lt;p&gt;HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;：请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#：请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;：请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;：请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h3&gt;&lt;p&gt;  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。&lt;br&gt;  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。&lt;br&gt;  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。&lt;/p&gt;
&lt;p&gt;  存储大小：&lt;br&gt;      cookie数据大小不能超过4k。&lt;br&gt;      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。&lt;/p&gt;
&lt;p&gt;  有期时间：&lt;br&gt;      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；&lt;br&gt;      sessionStorage  数据在当前浏览器窗口关闭后自动删除。&lt;br&gt;      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、应用程序缓存：&quot;&gt;&lt;a href=&quot;#、应用程序缓存：&quot; class=&quot;headerlink&quot; title=&quot;、应用程序缓存：&quot;&gt;&lt;/a&gt;、应用程序缓存：&lt;/h3&gt;&lt;p&gt;在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。&lt;br&gt;  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。&lt;/p&gt;
&lt;p&gt;html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：&lt;/p&gt;
&lt;p&gt;1、首先给html添加manifest属性，并赋值为cache.manifest&lt;br&gt;2、cache.manifest的内容为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、web-worker，web-worker&quot;&gt;&lt;a href=&quot;#、web-worker，web-worker&quot; class=&quot;headerlink&quot; title=&quot;、web worker，web worker&quot;&gt;&lt;/a&gt;、web worker，web worker&lt;/h3&gt;&lt;p&gt;是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;css3的新特性哪些，你都用过哪些 5%&lt;h2 id=&quot;媒体查询具体到语句-5&quot;&gt;&lt;a href=&quot;#媒体查询具体到语句-5&quot; class=&quot;headerlink&quot; title=&quot;媒体查询具体到语句 5%&quot;&gt;&lt;/a&gt;媒体查询具体到语句 5%&lt;/h2&gt;作用：媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，检测的媒体特性有 width 、 height 和 color （等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;响应式布局meta-scale-怎样使用media&quot;&gt;&lt;a href=&quot;#响应式布局meta-scale-怎样使用media&quot; class=&quot;headerlink&quot; title=&quot;响应式布局meta,scale 怎样使用media?&quot;&gt;&lt;/a&gt;响应式布局meta,scale 怎样使用media?&lt;/h2&gt;&lt;h3 id=&quot;meta-scale&quot;&gt;&lt;a href=&quot;#meta-scale&quot; class=&quot;headerlink&quot; title=&quot;meta,scale&quot;&gt;&lt;/a&gt;meta,scale&lt;/h3&gt;&lt;p&gt;第一步：&lt;br&gt; 首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果&lt;/p&gt;
&lt;meta name=&quot;viewport content=&quot; width=&quot;device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;/&quot;&gt;

ps:
&gt;width=device-width:宽度等于当前设备的宽度
initial-scale=1：初始的缩放比例（默认为1）
maximum-scale=1：允许用户缩放到得最大比例（默认为1）
user-scalable=no：用户不能手动缩放

### 第二步：媒体查询 语句
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:720px) and (min-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

## css 伪类 5%
### 伪类选择器
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:first-of-type	选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:last-of-type	选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-of-type	选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-child		选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:nth-child(2)	选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

***
### 伪类 伪元素
伪类是给元素模拟添加类 ，来实现某种效果（：）
常见伪类：

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)
常见伪元素：

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

http://web.jobbole.com/86181/

## 说一下flex 3%
### 请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？
 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。
   较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。
   采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。
   它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。
   常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。
   在布局上有了比以前更加灵活的空间
http://www.w3cplus.com/css3/flexbox-basics.html

***
## 动画 2%

  二维动画——animation  这个属性必须配合@keyframes动画关键帧来使用。keyframes里面包含一个百分数，后面跟上在这段时间内变换的css样式。
     animation是一个复合属性，它包括以下几个组成部分：
   * 1.animation-name：执行动画的keyframes的名字。
    * 2.animation-duration：执行动画的总时长。
    * 3.animation-timing-function：指定过渡函数。
    * 4.animation-delay：执行延迟时间。
    *  5.animation-direction：动画播放的方式。这个属性的值主要有：normal正常播放模式、reverse倒序播放、alternate
                  动画在奇数次正向播放偶数次倒序播放、alternate-reverse动画在奇数次倒序播放偶数次正向播放。
     *  6.animation-iteration-count：动画执行的次数。infinite是无限次，写一个数字就是要执行几次。
      *  7.animation-fill-mode：执行完动画后物体停止的位置。forwards是停在结束的位置上、backwards是快速执行初始帧
                  （这个最好配合延迟来观察）、
                  none是回到初始帧的位置、both是同时具有forwards和backwards的效果。
        *  8.animation-play-state：控制动画的播放状态。running是播放、paused是暂停。
***
## css3动画卡了

    transform: transition3d(0, 0, 0);
    transform: translateZ(0);
    这两个属性可以开启GPU加速模式
    然而面试官问我为什么，你知道原理么？
    这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画的时候从CPU转向GPU
## less
*  Less 有了解过吗？有什么好处？
   什么是CSS 预处理器 / 后处理器？
    * 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，
    还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。
   * 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。
## 常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？
有时需要将网页中的一些数据保存在浏览器端，这样做的好处是，当下次访问页面时，不需要再次向服务器请求数据，直接就可以从本地读取数据。目前常用的有以下几种方法：
### **cookie**
cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K，cookie数据大小不能超过4k
### **Flash ShareObject**
这种方式能能解决上面提到的cookie存储的两个弊端，而且能够跨浏览器，应该说是目前最好的本地存储方案。不过，需要在页面中插入一个Flash，当浏览器没有安装Flash控件时就不能用了。所幸的是，没有安装Flash的用户极少。
缺点：需要安装Flash插件。
### **sessionStorage**
使用于Firefox2+的火狐浏览器，用这种方式存储的数据仅窗口级别有效，同一个窗口（或者Tab）页面刷新或者跳转，都能获取到本地存储的数据，当新开窗口或者页面时，原来的数据就失效了。
缺点：IE不支持、不能实现数据的持久保存。
### **localStorage**
localStorage是Web Storage互联网存储规范中的一部分，现在在Firefox 3.5、Safari 4和IE8中得到支持。
缺点：低版本浏览器不支持。

提示：localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。
&gt;//存储信息   （存储的信息名称，要存储的字符串）
localStorage.setItem(&quot;CC_email_list&quot;,input_eamil[i])
//读取信息   （要读取的信息名称）
localStorage.getItem(&quot;CC_email_list&quot;)
//清除信息    （要清除的信息名称）
localStorage.removeItem(&quot;CC_email_list&quot;);

### **globalStorage**
使用于Firefox2+的火狐浏览器，类似于IE的userData。
1 //赋值 2 globalStorage[location.hostname][&#39;name&#39;] = &#39;tugai&#39;; 3 //读取 4 globalStorage[location.hostname][&#39;name&#39;]; 5 //删除 6 globalStorage[location.hostname].removeItem(&#39;name&#39;);
### **Google Gear**
Google开发出的一种本地存储技术。
缺点：需要安装Gear组件。
### **userData**
IE浏览器可以使用userData来存储数据，容量可达到640K，这种方案是很可靠的，不需要安装额外的插件。缺点：它仅在IE下有效。
缺点：IE不支持。

结论：Flash shareobject是不错的选择，如果你不想在页面上嵌入Flash，可以结合使用userData(IE6+)和globalStorage(Firefox2+)和localStorage(chrome3+)实现跨浏览器。
***
## 请描述一下 cookies，sessionStorage 和 localStorage 的区别？

    cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
    cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
    sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
### 存储大小：
        cookie数据大小不能超过4k。
        sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
### 有期时间：
        localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
        sessionStorage  数据在当前浏览器窗口关闭后自动删除。
        cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭

***
## html 获取页面，浏览器，屏幕宽高
一个页面的展示，从外到内的容器为：屏幕-&gt;浏览器-&gt;页面本身。
HTML元素展现在页面内-&gt;页面展现在浏览器内-&gt;而浏览器展现在屏幕内。
通过Js的一些对象可以获取这些容器的高度、宽度。
1：总

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-c6dff4f74e7f2eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)


2:屏幕
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-f47a188d60bd97a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
3:浏览器

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-8e3d9af0d6d264b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-5e416993bde1fdb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)


5:可视区 
定义：可视区域是指能显示网页内容区域的宽高。
拉动控制台的时候网页可视区域的宽高也会随之改变。
可视区宽高跟内容宽高没关系。

如果内容超过可视区域的高度或者宽度就出现滚动条。要获取可视区域的宽高每个浏览器的获取方法不一样

[参照](http://www.cnblogs.com/polk6/p/5051935.html)
***
## Doctype
1.Doctype作用
位置：&lt;!DOCTYPE&gt;声明位于html第一行
作用： 告知浏览器用什么标准解析html文档
            &lt;!DOCTYPE&gt;不存在，或者格式不正确，会导致文档以兼容模 (怪异模式)式出现

语法：
      HTML 顶级元素 可用性 &quot;注册//组织//类型 标签//定义 语言&quot;&quot;URL&quot;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt; 
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Strict//EN&quot;&gt;

其中，DTD的是W3C所发布的一个文档类型定义，简单的说，就是告诉浏览器你的这个HTML，是根据那个标准写的，解析的时候用哪个标准解析。




http://www.qdfuns.com/notes/21146/12ba5b538dd5974b1bee88f77c71b0a0.html
***

##为什么HTML5就只要写&lt;!DOCTYPE HTML&gt;?
HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基于 SGML。 HTML 5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为。
其中，SGML是标准通用标记语言,简单的说，就是比HTML,XML更老的标准，这两者都是由SGML发展而来的。BUT，HTML5不是的。
***
## 标准模式与兼容模式（怪异模式）各有什么区别?

A：在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松向后兼容的方式显示。简单的说，就是尽可能的显示能显示的东西给用户看。（但是会有些样式失效）

1：width不同
在严格模式中 ：width是内容宽度 ，元素真正的宽度 = width+（padding+border+margin）2
在兼容模式中 ：width则是元素的实际宽度 ，内容宽度 = width - ( padding2+border2)

2.兼容模式下可设置百分比的高度和行内元素的高宽
    在Standards模式下，给span等行内元素设置wdith和height都不会生效，而在兼容模式下，则会生效。
    在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。

3.用margin:0 auto设置水平居中在IE下会失效
    使用margin:0 auto在standards模式下可以使元素水平居中，但在兼容模式下却会失效（用text-align属性解决）
    body{text-align:center};#content{text-align:left}

4.兼容模式下Table中的字体属性不能继承上层的设置，white-space:pre会失效，设置图片的padding会失效

***
## 介绍一下你对浏览器内核的理解？
主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。
  渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。

JS引擎则：解析和执行javascript来实现网页的动态效果。
***
常见的浏览器内核有哪些？
 Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]
  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等
  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]
  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]
***
## HTML、XML、XHTML 有什么区别？
HTML是被设计用来显示数据的，重点是:显示数据以及如何显示数据更好上面。
XML是被设计用来描述数据的，重点是:什么是数据，如何存放数据。
XHTML基于HTML的基础上进行了扩展和规范，让XHTML更加严格，主要目的是促进HTML向XML过渡。

HTML的弊端：
编码不规范，结构混乱臃肿，需要智能的终端才能很好的显示；
表现和结构混乱，不利于开发和维护；
不能使用于更多的网络设备中，比如手机；
为了让HTML逐渐过渡到XML阶段，w3c又定制了XHTML标准。

而XML的弊端也不少：
在数据中寻找信息非常难
大数据量效率低
使用XML传输数据时没有数据库系统那样的信息管理功能
因此XML因为自身严苛限制等因素逐渐被HTML5取代。
***
## 怎样理解 HTML 语义化？
HTML语义化能提高网页语义的清晰度，方便爬虫工具识别网站内容，爬虫工具在识别网站内容时不会受到网站样式的影响，只会关注网站内容本身
HTML的语义化能够提高团队对网站的维护和改进效率
改善网页的可访问性，遇到视觉障碍用户时屏幕阅读器能够更好的系别网页内容

***
## iframe有那些缺点？

  * iframe会阻塞主页面的Onload事件；
  * 搜索引擎的检索程序无法解读这种页面，不利于SEO;

  * iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。

  使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript
  动态给iframe添加src属性值，这样可以绕开以上两个问题。
***

## 为什么要初始化CSS样式。
- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。

  - 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。
淘宝的样式初始化代码：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &amp;#123; margin:0; padding:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body, button, input, select, textarea &amp;#123; font:12px/1.5tahoma, arial, \5b8b\4f53; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1, h2, h3, h4, h5, h6&amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address, cite, dfn, em, var &amp;#123; font-style:normal; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code, kbd, pre, samp &amp;#123; font-family:couriernew, courier, monospace; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;small&amp;#123; font-size:12px; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ul, ol &amp;#123; list-style:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;#123; text-decoration:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a:hover &amp;#123; text-decoration:underline; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sup &amp;#123; vertical-align:text-top; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub&amp;#123; vertical-align:text-bottom; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;legend &amp;#123; color:#000; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fieldset, img &amp;#123; border:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button, input, select, textarea &amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table &amp;#123; border-collapse:collapse; border-spacing:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

## 用纯CSS创建一个三角形的原理是什么？
 把上、左、右三条边隐藏掉（颜色设为 transparent）

&gt;  #demo {
    width: 0;
    height: 0;
    border-width: 20px;
    border-style: solid;
    border-color: transparent transparent red transparent;
  }
***
## 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？
 * png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.

  * 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。

  * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。

    浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}

    这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)

    渐进识别的方式，从总体中逐渐排除局部。

    首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。
    接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。

    css
        .bb{
            background-color:red;/*所有识别*/
            background-color:#00deff\9; /*IE6、7、8识别*/
            +background-color:#a200ff;/*IE6、7识别*/
            _background-color:#1e0bd1;/*IE6识别*/
        }


  *  IE下,可以使用获取常规属性的方法来获取自定义属性,
     也可以使用getAttribute()获取自定义属性;
     Firefox下,只能使用getAttribute()获取自定义属性。
     解决方法:统一通过getAttribute()获取自定义属性。

  *  IE下,even对象有x,y属性,但是没有pageX,pageY属性;
     Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。

  *  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。

  *  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,
     可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。

  超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:
  L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}
***
## 什么是外边距合并？
外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
  合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
  w3school介绍网址： http://www.w3school.com.cn/css/css_margin_collapsing.asp
***
## zoom:1的清除浮动原理?
清除浮动，触发hasLayout；
  Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。
  譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。

  来龙去脉大概如下：
  当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。

  Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。

  目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？
  可以通过css3里面的动画属性scale进行缩放。 
  ***
## 如何居中div？

水平居中：给div设置一个宽度，然后添加margin:0 auto属性

 div{
     width:200px;
     margin:0 auto;
  }
让绝对定位的div居中

 div {
     position: absolute;
     width: 300px;
     height: 300px;
     margin: auto;
     top: 0;
     left: 0;
     bottom: 0;
     right: 0;
     background-color: pink;    /* 方便看效果 */
 }

水平垂直居中一

 确定容器的宽高 宽500 高 300 的层
 设置层的外边距

 div {
     position: relative;        /* 相对定位或绝对定位均可 */
     width:500px;
     height:300px;
     top: 50%;
     left: 50%;
     margin: -150px 0 0 -250px;         /* 外边距为自身宽高的一半 */
     background-color: pink;         /* 方便看效果 */

  }

水平垂直居中二

 未知容器的宽高，利用 `transform` 属性

 div {
     position: absolute;        /* 相对定位或绝对定位均可 */
     width:500px;
     height:300px;
     top: 50%;
     left: 50%;
     transform: translate(-50%, -50%);
     background-color: pink;         /* 方便看效果 */

 }

水平垂直居中三

 利用 flex 布局
 实际使用时应考虑兼容性

 .container {
     display: flex;
     align-items: center;         /* 垂直居中 */
     justify-content: center;    /* 水平居中 */

 }
 .container div {
     width: 100px;
     height: 100px;
     background-color: pink;        /* 方便看效果 */
 } 
## position的值relative和absolute定位原点是？

    absolute
      生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
    fixed （老IE不支持）
      生成绝对定位的元素，相对于浏览器窗口进行定位。
    relative
      生成相对定位的元素，相对于其正常位置进行定位。
    static
      默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
    inherit
      规定从父元素继承 position 属性的值。
***

# HTML5
## 新特性
### 1:标签语义化，
比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签

### 2、音视频元素，
video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。

### 3、新增很多api，
比如获取用户地理位置的window.navigator.geoloaction

### 、websocket
websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。
主要通信过程：先借http完成握手，达到了长连接
第一步：浏览器基于tcp，发送http请求
第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手
第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息
websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。
***
### 、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。
HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，
***
### ：请描述一下 cookies，sessionStorage 和 localStorage 的区别？
  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。
  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。

  存储大小：
      cookie数据大小不能超过4k。
      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。

  有期时间：
      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
      sessionStorage  数据在当前浏览器窗口关闭后自动删除。
      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭
## 具体应用
### cookie:
document.cookie = name, value, expires, domain, path, secure
encodeURIComponent
decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd)
### localStoragey用法
localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。
&gt;//存储信息   （存储的信息名称，要存储的字符串）
storage = window.localStorage
storage.setItem(&quot;CC_email_list&quot;,input_eamil[i])
//读取信息   （要读取的信息名称）
storage.getItem(&quot;CC_email_list&quot;)
//清除信息    （要清除的信息名称）
storage.removeItem(&quot;CC_email_list&quot;);
storage.clear();
### sessionStorage:
sessionStorage用法和localStorage完全一致，差别只在有效期：

***

### 1.什么是cookie？
    答：cookie是用于在客户端存储会话信息的。
### 4.如何操作cookie？
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var CookieUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 设置cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set : function (name, value, expires, domain, path, secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var cookieText = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cookieText += encodeURIComponent(name) + &amp;quot;=&amp;quot; + encodeURIComponent(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (expires instanceof Date) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; expires=&amp;quot; + expires.toGMTString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; path=&amp;quot; + path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (domain) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; domain=&amp;quot; + domain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; secure&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        document.cookie = cookieText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // name=value; expires=expiration_time; path=domain_path; domain=domain_name; secure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 获取cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get : function (name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var cookieName = encodeURIComponent(name) + &amp;quot;=&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieStart = document.cookie.indexOf(cookieName),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieValue = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (cookieStart &amp;gt; -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var cookieEnd = document.cookie.indexOf (&amp;quot;;&amp;quot;, cookieStart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (cookieEnd == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                cookieEnd = document.cookie.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return cookieValue; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 删除cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unset : function (name, domain, path, secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.set(name, &amp;quot;&amp;quot;, Date(0), domain, path, secure);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CookieUtil.set(&amp;quot;name&amp;quot;, &amp;quot;zhang&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var name = CookieUtil.get(&amp;quot;name&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name);    // zhang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CookieUtil.unset(&amp;quot;name&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(CookieUtil.get(&amp;quot;name&amp;quot;));  // 空&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

### 2.cookie的组成部分？
    ①名称：一个唯一确定cookie 的名称。建议区分大小写。cookie 的名称必须是经过URL 编码的。
    ②值：储存在cookie 中的字符串值。值必须被URL 编码。
    ③域：cookie 对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie 信息。这个值可以包含子域（subdomain，如www.wrox.com），也可以不包含它（如.wrox.com，则对于wrox.com的所有子域都有效）。如果没有明确设定，那么这个域会被认作来自设置cookie 的那个域。
    ④路径：对于指定域中的那个路径，应该向服务器发送cookie。例如，你可以指定cookie 只有从http://www.wrox.com/books/ 中才能访问，那么http://www.wrox.com 的页面就不会发送cookie 信息，即使请求都是来自同一个域的。
    ⑤失效时间：表示cookie 何时应该被删除的时间戳。默认情况下，浏览器会话结束时即将所有cookie 删除；不过也可以自己设置删除时间。这个值是个GMT 格式的日期（Wdy, DD-Mon-YYYY HH:MM:SS GMT），用于指定应该删除cookie 的准确时间。因此，cookie 
    可在浏览器关闭后依然保存在用户的机器上。如果你设置的失效日期是个以前的时间，则cookie 会被立刻删除。
    ⑥安全标志：指定后，cookie 只有在使用SSL 连接的时候才发送到服务器。例如，cookie 信息只能发送给https://www.wrox.com，而http://www.wrox.com 的请求则不能发送cookie。
### 3.列举一个cookie的例子？
    以下是一个完整的cookie的例子，我们将把它分解开来：
    Set-Cookie: name=value; expires=Mon, 22-Jan-07 07:10:24 GMT; domain=.wrox.com; path=/; secure
    ①名称: name字符串表示
    ②值：value字符串表示
    ③过期时间：Mon, 22-Jan-07 07:10:24 GMT
    ④域名：.wrox.com
    ⑤路径：当前目录/
    ⑥安全标志：secure
***
### 、应用程序缓存：
在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。
  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。

html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：

1、首先给html添加manifest属性，并赋值为cache.manifest
2、cache.manifest的内容为: 
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

***
### 、web worker，web worker
是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。
***
### 标签页的通信
localstorge在一个标签页里被添加、修改或删除时，都会触发一个storage事件，通过在另一个标签页里监听storage事件，即可得到localstorge存储的值，实现不同标签页之间的通信。
标签页1：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input id=&amp;quot;name&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;提交&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;#btn&amp;quot;).click(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var name=$(&amp;quot;#name&amp;quot;).val();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            localStorage.setItem(&amp;quot;name&amp;quot;, name);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

标签页2：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        window.addEventListener(&amp;quot;storage&amp;quot;, function(event)&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(event.key + &amp;quot;=&amp;quot; + event.newValue);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

使用cookie+setInterval，将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。
标签页1： 
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input id=&amp;quot;name&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;提交&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;#btn&amp;quot;).click(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var name=$(&amp;quot;#name&amp;quot;).val();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            document.cookie=&amp;quot;name=&amp;quot;+name;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

标签页2：  
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        function getCookie(key) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return JSON.parse(&amp;quot;&amp;#123;\&amp;quot;&amp;quot; + document.cookie.replace(/;\s+/gim,&amp;quot;\&amp;quot;,\&amp;quot;&amp;quot;).replace(/=/gim, &amp;quot;\&amp;quot;:\&amp;quot;&amp;quot;) + &amp;quot;\&amp;quot;&amp;#125;&amp;quot;)[key];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setInterval(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;quot;name=&amp;quot; + getCookie(&amp;quot;name&amp;quot;));    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, 10000);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

# 重排重绘
## 浏览器从下载文档到显示页面的过程
  * 浏览器引擎会解析HTML文档来构建DOM树
  * 根据DOM元素的几何属性构建一棵用于渲染的树
渲染树的每个节点都有大小和边距等属性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了
  * 根据渲染树节点的样式属性绘制出页面。
## 重绘redraw
重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。
重绘不会带来重新布局，并不一定伴随重排。
## 重排
重排是几何上的改变，可以理解为渲染树需要重新计算。
###  触发重排：
   * 1.DOM元素的几何属性变化（定位，位置）
      * 渲染树中的相关节点就会失效，重新构建渲染树中失效的节点，根据新的渲染树重新绘制这部分页面
       * 例如：动画
       * 一个元素重排可能会使其他元素重排重绘
    * 2.DOM树的结构变化（dom增删，移动）
        * 例如节点的增减、移动等，也会触发重排
     * 3.获取某些属性（offsetWidth和offsetHeight）
　浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。
所以，在多次使用这些值时应进行缓存。

### 减少重排
 * 将多次改变样式属性封装成一个类，用js加上类
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div.changeDiv &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background: #eee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color: #093;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(‘changeDiv’).className = ‘changeDiv’;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

   * 将需要多次重排的元素，position属性设为absolute或fixed
这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。
* 最小化DOM深度
减少你的DOM树的大小和每个分支的元素数量。你的文档越小，越浅，重排就会越快。如果你不支持旧版的浏览器，可能你要移除不需要的包裹元素。
* 保证n次创建，1次写入。
例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。
* dom 复杂操作时，先隐藏，再显示
由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。
* 
在多次使用这些值时应进行缓存。
## 表格排序考虑到减少重排重绘
保证n次创建，1次写入。

***
# CSS3
## css3的新特性哪些，你都用过哪些 5%
CSS3有哪些新内容，请至少说出5个。

   1）border-radius。CSS3圆角表格

   2）font-effect。以往对网页上的文字加特效只能用filter属性，但是在CSS3中专门制定了一个加文字特效的属性，而且不止加阴影这种效果。

   3）text-underline-style，text-underline-color，text-underline-mode，text-underline-position。丰富了对链接下划线的样式，以往的下划线都是直线，这次可不一样了，有波浪线、点线、虚线等等，更可对下划线的颜色和
位置进行任意改变，哈哈~~下划线的世界从此不再单一。（还有对应顶线和中横线的样式，效果与下划线类似）

   4）font-emphasize-style和font-emphasize-position。我们在做笔记时经常要在文字下点几个点或打个圈什么的，以示重点，CSS3也开始加入了这项功能，这应该在某些特定网页上很有用。

   5）Font-face可以用来加载字体样式，而且它还能够加载服务器端的字体文件，显示客户端没有安装的字体。
***
## 媒体查询具体到语句 5%
作用：媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，检测的媒体特性有 width 、 height 和 color （等）。

##  响应式布局meta,scale 怎样使用media?
### meta,scale
第一步：
 首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果
&lt;meta name=&quot;viewport content=&quot; width=&quot;device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;/&quot;&gt;

&lt;p&gt;ps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;width=device-width:宽度等于当前设备的宽度&lt;br&gt;initial-scale=1：初始的缩放比例（默认为1）&lt;br&gt;maximum-scale=1：允许用户缩放到得最大比例（默认为1）&lt;br&gt;user-scalable=no：用户不能手动缩放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第二步：媒体查询-语句&quot;&gt;&lt;a href=&quot;#第二步：媒体查询-语句&quot; class=&quot;headerlink&quot; title=&quot;第二步：媒体查询 语句&quot;&gt;&lt;/a&gt;第二步：媒体查询 语句&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:720px) and (min-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;css-伪类-5&quot;&gt;&lt;a href=&quot;#css-伪类-5&quot; class=&quot;headerlink&quot; title=&quot;css 伪类 5%&quot;&gt;&lt;/a&gt;css 伪类 5%&lt;/h2&gt;&lt;h3 id=&quot;伪类选择器&quot;&gt;&lt;a href=&quot;#伪类选择器&quot; class=&quot;headerlink&quot; title=&quot;伪类选择器&quot;&gt;&lt;/a&gt;伪类选择器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:first-of-type	选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:last-of-type	选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-of-type	选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-child		选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:nth-child(2)	选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;伪类-伪元素-1&quot;&gt;&lt;a href=&quot;#伪类-伪元素-1&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h3&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;说一下flex-3&quot;&gt;&lt;a href=&quot;#说一下flex-3&quot; class=&quot;headerlink&quot; title=&quot;说一下flex 3%&quot;&gt;&lt;/a&gt;说一下flex 3%&lt;/h2&gt;&lt;h3 id=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot;&gt;&lt;a href=&quot;#请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot; class=&quot;headerlink&quot; title=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&quot;&gt;&lt;/a&gt;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&lt;/h3&gt;&lt;p&gt; 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。&lt;br&gt;   较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。&lt;br&gt;   采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。&lt;br&gt;   它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。&lt;br&gt;   常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。&lt;br&gt;   在布局上有了比以前更加灵活的空间&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/flexbox-basics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/flexbox-basics.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;动画-2&quot;&gt;&lt;a href=&quot;#动画-2&quot; class=&quot;headerlink&quot; title=&quot;动画 2%&quot;&gt;&lt;/a&gt;动画 2%&lt;/h2&gt;&lt;p&gt;  二维动画——animation  这个属性必须配合@keyframes动画关键帧来使用。keyframes里面包含一个百分数，后面跟上在这段时间内变换的css样式。&lt;br&gt;     animation是一个复合属性，它包括以下几个组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.animation-name：执行动画的keyframes的名字。&lt;ul&gt;
&lt;li&gt;2.animation-duration：执行动画的总时长。&lt;/li&gt;
&lt;li&gt;3.animation-timing-function：指定过渡函数。&lt;/li&gt;
&lt;li&gt;4.animation-delay：执行延迟时间。&lt;/li&gt;
&lt;li&gt;5.animation-direction：动画播放的方式。这个属性的值主要有：normal正常播放模式、reverse倒序播放、alternate&lt;pre&gt;&lt;code&gt;动画在奇数次正向播放偶数次倒序播放、alternate-reverse动画在奇数次倒序播放偶数次正向播放。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;6.animation-iteration-count：动画执行的次数。infinite是无限次，写一个数字就是要执行几次。&lt;ul&gt;
&lt;li&gt;7.animation-fill-mode：执行完动画后物体停止的位置。forwards是停在结束的位置上、backwards是快速执行初始帧&lt;pre&gt;&lt;code&gt;（这个最好配合延迟来观察）、
none是回到初始帧的位置、both是同时具有forwards和backwards的效果。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;8.animation-play-state：控制动画的播放状态。running是播放、paused是暂停。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;css3动画卡了&quot;&gt;&lt;a href=&quot;#css3动画卡了&quot; class=&quot;headerlink&quot; title=&quot;css3动画卡了&quot;&gt;&lt;/a&gt;css3动画卡了&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;transform: transition3d(0, 0, 0);
transform: translateZ(0);
这两个属性可以开启GPU加速模式
然而面试官问我为什么，你知道原理么？
这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画的时候从CPU转向GPU。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;移动端&quot;&gt;&lt;a href=&quot;#移动端&quot; class=&quot;headerlink&quot; title=&quot;移动端&quot;&gt;&lt;/a&gt;移动端&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/359985?p=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.v2ex.com/t/359985?p=1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://caibaojian.com/vw-vh.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caibaojian.com/vw-vh.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;移动端适配：&quot;&gt;&lt;a href=&quot;#移动端适配：&quot; class=&quot;headerlink&quot; title=&quot;移动端适配：&quot;&gt;&lt;/a&gt;移动端适配：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通常&lt;br&gt;通常使用响应式布局和弹性布局+媒体查询配置多个响应断点&lt;br&gt;缺陷：布局在响应断点范围内的分辨率下维持不变，而在响应断点切换的瞬间，布局带来断层式的切换变化，如同卡带的唱机般“咔咔咔”地一下又一下。&lt;/li&gt;
&lt;li&gt;rem单位动态计算&lt;br&gt;rem单位的动态计算的弹性布局，则是需要在头部内嵌一段脚本来进行监听分辨率的变化来动态改变根元素字体大小，使得 CSS 与 JS 耦合了在一起。&lt;/li&gt;
&lt;li&gt;vh,vw视口单位实现适配&lt;ul&gt;
&lt;li&gt;优点：既能解决响应式断层问题，又能解觉rem决脚本依赖的问题的。&lt;/li&gt;
&lt;li&gt;缺点：由于相对于视口为单位，随着视口增大而增大，失去了最大最小宽度限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vw+rem&lt;ul&gt;
&lt;li&gt;rem 弹性布局的核心在于动态改变根元素大小，那么我们可以通过：&lt;ul&gt;
&lt;li&gt;给根元素大小设置随着视口变化而变化的 vw 单位，这样就可以实现动态改变其大小。&lt;/li&gt;
&lt;li&gt;限制根元素字体大小的最大最小值，配合g body 加上最大宽度和最小宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;自适应，响应式布局：&quot;&gt;&lt;a href=&quot;#自适应，响应式布局：&quot; class=&quot;headerlink&quot; title=&quot;自适应，响应式布局：&quot;&gt;&lt;/a&gt;自适应，响应式布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置meta viewport&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;目的是：网页宽度默认等于屏幕宽度（width=device-width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;媒体查询&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-device-width: 400px) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不指定像素宽度&lt;br&gt;宽度定百分比或者width:auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;相对大小的字体&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 流动布局&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;各个区块的位置都是浮动的（float），不是固定不变的,绝对定位的使用也要 非常小心&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## meta&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;meta是干嘛用的？&lt;br&gt;Meta标签是用来描述网页属性的一种语言，标准的Meta标签可以便于搜索引擎排序，提高搜索引擎网站权重排名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个属性name 和 http-equiv&lt;ul&gt;
&lt;li&gt;name&lt;ul&gt;
&lt;li&gt;keywords&lt;br&gt;设置你网页的关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;meta name =”keywords”&lt;br&gt;     content=”science,education,culture,politics”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* description：
  用来告诉搜索引擎你的网站主要内容。
 尽可能准确地描述网页的核心内容，通常为网页内容的摘要信息，也就是希望搜索引擎在检索结果中展示的摘要信息（100中文字之内）
* robots：
 告诉搜索机器人哪些页面需要索引，哪些页面不需要索引
 all,none,index,noindex,follow,nofollow
* author:作者
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;http-equiv：相当于http的文件头作用&lt;ul&gt;
&lt;li&gt;Expires（期限）&lt;br&gt;可以用于设定网页的到期时间。一旦网页过期，必须到服务器上重新传输。&lt;br&gt;注意：必须使用GMT的时间格式。&lt;br&gt;用法：&lt;meta http-equiv=&quot;expires&quot; content=&quot;Fri,12 Jan 2001 18:18:18 GMT&quot;&gt;&lt;/li&gt;
&lt;li&gt;Pragma(cache模式）&lt;br&gt;说明：禁止浏览器从本地计算机的&lt;a href=&quot;http://baike.baidu.com/view/907.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;缓存&lt;/a&gt;中访问页面内容。&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;&lt;/li&gt;
&lt;li&gt;Refresh（刷新）&lt;br&gt;自动刷新并转到新页面。&lt;br&gt;&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;2;URL&quot;&gt;；&lt;/li&gt;
&lt;li&gt;Set-Cookie(cookie设定）&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## meta viewport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 视窗基本属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* width：控制 viewport 的大小，你可以给它指定一个值，如：600，或者甚至还可以给它一个特殊的值，如：device-width，device-width为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* height：与 width 相对应，指定viewport 高度。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* maximum-scale：允许用户缩放到的最大比例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* minimum-scale：允许用户缩放到的最小比例。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* user-scalable：是否允许用户手动缩放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 三个视窗&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 布局视窗：css定义的网页内容宽度，网页内容宽度跟移动端浏览器窗口无关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 视觉视窗：用户正看的区域window.innerWidth/Height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 理想视窗：定义理想视口是浏览器的工作，而不是设备或操作系统的工作。因此，同一设备上的不同浏览器拥有不同的理想视口。screen.width/height返回是理想视口的尺寸&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[三个视窗](http://www.cnblogs.com/xiaohuochai/p/5496995.html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[meta-viewport](http://yunkus.com/meta-viewport-usage/)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 媒体查询&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@media screen and (max-width:480px){&lt;br&gt; .ads {&lt;br&gt;   display:none;&lt;br&gt;  }&lt;br&gt;}&lt;br&gt;@media screen and (min-width:600px) and (max-width:900px){&lt;br&gt;  body {background-color:#f5f5f5;}&lt;br&gt;}&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## flex弹性布局：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 父块元素：display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 父行级元素：display: inline-flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 具体描述：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 父亲容器属性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * 孩子項目屬性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * flex-grow：属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * flex-shrink：属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【问题】：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;【答案】：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flex-grow:0; 定义弹性盒子项的拉伸因子，即子项分配父项剩余空间的比，默认值为 0flex-shrink:1; 指定了 flex 元素的收缩规则，子项的收缩所占的份数，默认值为1 [ 当所有子项相加的宽度大于父项的宽度，每个子项减少的多出的父项宽度的 1/n ]felx-basis:auto; 指定了 flex 元素在主轴方向上的初始大小，即子项的宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## grid system ，网格布局，栅格化 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栅格化？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://www.cnblogs.com/dojo-lzz/p/4621627.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://www.w3cplus.com/css/learncssgrid.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;网格布局的好处？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;规范网页中的版面布局以及信息分布，让网页设计不再无规律可循。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有规律的网页设计，可以为网页前端开发带来很多便利。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;栅格化主要好处是：快速开发、提高整站布局的一致性。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;缺点：灵活性可能稍嫌不足。但我觉得，划分 12 栏的网格系统其实也已具有较大的灵活性了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://www.chinaz.com/design/2009/0527/77426.shtml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 创建网格容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display: grid/inline-grid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;网格项目默认纵项排列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 设置网格项目的高或者宽&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;grid-template-columns/rows: 10px;&lt;br&gt;grid-template-columns: 1fr 1fr 2fr;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## px,em,rem，%的区别?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*  px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   相对屏幕分辨率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* em&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 若自身定义了font-size，按照自身算&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 自身没定义就按照父元素算&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * em的值并不是固定的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 具体使用方案：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   body选择器中声明Font-size=62.5%；&lt;br&gt;   16px*62.5% = 10px&lt;br&gt;    1em = 10px;&lt;br&gt;    IE浏览器:Font-size=63%&lt;br&gt;   将你的原来的px数值除以10，然后换上em作为单位；&lt;/p&gt;
&lt;p&gt;重新计算那些被放大的字体的em数值。避免字体大小的重复声明。如：行高、字体大小。&lt;br&gt;缺陷：整个页面内1em不是一个固定的值，设置em要知道父元素font-size&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* rem &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 相对于html根元素来算，免字体大小逐层复合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 除了IE8及更早版本外，所有浏览器均已支持rem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 百分比&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 相对于父元素的百分比&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 使用：如果是随着父容器或者是整体页面布局而改变尺寸，则使用百分比更好，如元素的高度和宽度设置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 知道css新属性 vw vh ？【4】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 定义&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * css3的新单位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * css3引入的”vw”和”vh”基于宽度/高度相对于窗口大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * ”vw”=”view width”, “vh”=”view height”; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 相对于浏览器窗口的大小定义的最佳方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 字体大小会随着你窗口改变而改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*  应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据[CSS3规范](https://drafts.csswg.org/css-values-3/#viewport-relative-lengths)，视口单位主要包括以下4个：·&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vw : 1vw 等于视口宽度的1%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vh : 1vh 等于视口高度的1%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vmin : 选取 vw 和 vh 中最小的那个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vmax : 选取 vw 和 vh 中最大的那个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;视口单位区别于%单位，视口单位是依赖于视口的尺寸，根据视口尺寸的百分比来定义的；而%单位则是依赖于元素的祖先元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 兼容性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;兼容主流浏览,IE兼容IE10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##  设备像素物理像素？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;###  设备像素(物理像素)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;又叫 物理像素，设备能控制显示的最小单位，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 设备独立像素（css像素）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 独立于设备的用于逻辑衡量像素的单位。平时用的虚拟像素，但不是屏幕分辨率。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 移动端，PC端通过screen.width/height获取的这个值是设备独立像素（CSS 像素），而不是设备的屏幕分辨率，因为设备的屏幕分辨率对于WEB开发者来说是无法通过代码来获得的，是完全透明的。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 物理像素与设备独立像素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在PC端浏览器默认情况下（100%，即页面没被缩放），一个物理像素 = 一个设备独立像素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在移动端时候，一般物理像素与设备独立像素不相等，有一定的换算关系。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;设备像素比 = 物理像素/设备独立像素（在某个方向上）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 获取设备像素比 : window.devicePixelRatio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### PPI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;像素密度（pixel density）. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;全称是（pixel per inch）就是每英寸内有多少个设备像素点. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PPI的值越高，画质越好，也就是越细腻，看起来更有逼格。 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;标准的PPI是160, 不过现在屏幕标准的少了, 都超过了160. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PPI 值超过300的叫做超高密度屏幕，Apple 给它换了个高大尚的名称：Retina视网膜屏幕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[设备像素](http://yunkus.com/physical-pixel-device-independent-pixels/)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[物理像素](http://www.jianshu.com/p/af6dad66e49a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 用宽确定高，百分比（元素宽度为窗口的多少）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1 使用padding，根据宽来定高，注意，元素有内容时，需要去除文本高度&lt;br&gt;width: 50%;padding: 25% 0;&lt;br&gt;2使用vw&lt;br&gt; width: 50vw;&lt;br&gt; height: 50vw;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;### css一个正方形，宽度是屏幕的一半，水平垂直居中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* vw 获取屏幕的width&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 垂直水平居中&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;width: 50vw;
height: 50vw;
position: absolute;
left: 50%;
top: 50%;
transform: translate(-50%, -50%);
background: pink;
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* 当元素无内容的时候，padding: 25% 0;可以当作元素的高；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;width: 50%;
padding: 25% 0;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: red;
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## ul&amp;gt;li列表，小于480时一行显示两个，大于480&amp;lt;960时候一行显示三个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* media ,vw,可以弄出元素的宽高&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; @media screen and (max-width:480px) {&lt;br&gt;            li {&lt;br&gt;                width: 38vw;&lt;br&gt;                height: 38vw;&lt;br&gt;                background: pink;&lt;br&gt;                float: left;&lt;br&gt;                margin-left: 1vw;&lt;br&gt;                margin-bottom: 1vw;&lt;br&gt;            }&lt;br&gt;        }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@media screen and (min-width:481px)and (max-width:960px) {
    li {
        width: 27vw;
        height: 27vw;
        background: greenyellow;
        float: left;
        margin-left: 1vw;
        margin-bottom: 1vw;
    }
}

@media screen and (min-width:962px) {
    li {
        width: 30vw;
        height: 30vw;
        background: purple;
        float: left;
        margin-left: 1vw;
        margin-bottom: 1vw;
    }
}

ul {
    position: relative;
}
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;```&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;响应式&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (max-width:480px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 44%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 22% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: pink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (min-width:480px)and (max-width:960px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 30%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 15% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ul &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            position: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ul&amp;gt;li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list-style-type: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (min-width:960px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 30%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 15% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;apos;con&amp;apos;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;4&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;5&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;6&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;h2 id=&quot;js数据类型有哪些-5&quot;&gt;&lt;a href=&quot;#js数据类型有哪些-5&quot; class=&quot;headerlink&quot; title=&quot;js数据类型有哪些 5%&quot;&gt;&lt;/a&gt;js数据类型有哪些 5%&lt;/h2&gt;&lt;p&gt;数据类型分为：简单数据类型和引用&lt;br&gt; (五大)简单数据类型 ：数字 ，字符串 ， 布尔值(true/false)， null，undifined&lt;br&gt;引用：数组，函数，正则表达式，对象&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;null-和undefined&quot;&gt;&lt;a href=&quot;#null-和undefined&quot; class=&quot;headerlink&quot; title=&quot;null 和undefined&quot;&gt;&lt;/a&gt;null 和undefined&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相似性：&lt;ul&gt;
&lt;li&gt;undefined和null在if语句中，都会被自动转为false&lt;ul&gt;
&lt;li&gt;undefined == null // true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;null：&lt;ul&gt;
&lt;li&gt;null表示”没有对象”，即该处不应该有值&lt;/li&gt;
&lt;li&gt;用法：&lt;ul&gt;
&lt;li&gt;原型链的终点&lt;/li&gt;
&lt;li&gt;作为函数的参数，表示该函数的参数不是对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;undefined&lt;ul&gt;
&lt;li&gt;undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义&lt;/li&gt;
&lt;li&gt;典型用法是：&lt;ul&gt;
&lt;li&gt;变量定义了没有赋值&lt;/li&gt;
&lt;li&gt;函数应该传递的参数没有传递&lt;/li&gt;
&lt;li&gt;对象定义属性没有赋值&lt;/li&gt;
&lt;li&gt;函数没有返回值的时候 返回undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;简单说一下作用域与作用域链-5&quot;&gt;&lt;a href=&quot;#简单说一下作用域与作用域链-5&quot; class=&quot;headerlink&quot; title=&quot;简单说一下作用域与作用域链 5%&quot;&gt;&lt;/a&gt;简单说一下作用域与作用域链 5%&lt;/h2&gt;&lt;h3 id=&quot;作用域和作用域链&quot;&gt;&lt;a href=&quot;#作用域和作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域和作用域链&quot;&gt;&lt;/a&gt;作用域和作用域链&lt;/h3&gt;&lt;p&gt;因为当某个函数第一次被调用时候，会创建相应的执行环境和作用域链&lt;br&gt;并把作用域链赋值给内部属性：scope,使用this,arguments和函数的初始参数为活动对象（活动对象就是函数执行上下文中的变量）&lt;br&gt;当在函数中访问变量的时候，需要在作用域链中进行查找，先访问自己的内部的，再访问外部的，再访问外部外部的，直到作用域链的终点：全局执行环境&lt;br&gt;创建函数时，会创建包含函数外部对象的 作用域链，作用域链保存在当前函数的scope中&lt;br&gt;调用函数时，会创建执行环境，创建执行环境的作用域链：是靠复制函数的scope里面的对象&lt;br&gt;作用域链的本质是指向变量对象的指针链表，指引用，不实际包含变量对象&lt;/p&gt;
&lt;h3 id=&quot;谈一下关于作用域&quot;&gt;&lt;a href=&quot;#谈一下关于作用域&quot; class=&quot;headerlink&quot; title=&quot;谈一下关于作用域&quot;&gt;&lt;/a&gt;谈一下关于作用域&lt;/h3&gt;&lt;p&gt;  函数里外变量名相同,取函数内部的。Es6 作用域和他一样吗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es5函数作用域，作用域链&lt;br&gt;es5只有全局作用域和函数作用域&lt;ul&gt;
&lt;li&gt;作用域&lt;br&gt;作用域指的是变量的作用范围。&lt;/li&gt;
&lt;li&gt;作用域链&lt;br&gt;函数内部作用域由函数的参数，局部变量，函数构成。内部作用域和外部的作用域一层层的链接起来形成作用域链。&lt;br&gt;当在函数内部要访问一个变量的时候，首先查找自己的内部作用域有没有这个变量，如果没有就到这个函数所在的外层作用域中找，直到到window所在的作用域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;es6作用域&lt;br&gt;函数内部访问一个变量,由于块级作用域，只能在函数内部查找是否有这个变量，若函数内部没有这个变量还去访问会报错。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;原型-原型链-原型继承（说一下原型-原型链，考了几道题-让你现在作答）-5&quot;&gt;&lt;a href=&quot;#原型-原型链-原型继承（说一下原型-原型链，考了几道题-让你现在作答）-5&quot; class=&quot;headerlink&quot; title=&quot;原型 原型链 原型继承（说一下原型 原型链，考了几道题 让你现在作答） 5%&quot;&gt;&lt;/a&gt;原型 原型链 原型继承（说一下原型 原型链，考了几道题 让你现在作答） 5%&lt;/h2&gt;&lt;p&gt;请简单说一下原型,原型链，继承&lt;/p&gt;
&lt;h3 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来由：原型是在创建对象时原型模式里提出的概念&lt;/li&gt;
&lt;li&gt;定义：创建的每个函数都有一个原型prototype属性，这个属性是一个指针,指向一个对象，这个对象包含着这个函数所有实例可以共享的函数和方法。&lt;br&gt;这个原型对象就是:函数每个原型&lt;/li&gt;
&lt;li&gt;优点：可以让所有实例共享原型对象中的属性和方法&lt;/li&gt;
&lt;li&gt;缺点：因为共享的特性，实例改写引用类型属性 会更改原型对象属性 使得其他实例属性也改变；还有一个：无法给函数初始化参数&lt;/li&gt;
&lt;li&gt;prototype与在构造函数中定义属性和方法有什么区别？&lt;ul&gt;
&lt;li&gt;构造函数中的属性和方法，每个实例都将构造函数中的所有属性创建一遍副本，&lt;/li&gt;
&lt;li&gt;缺点：无法共享一套属性 &lt;ul&gt;
&lt;li&gt;优点：每个实例改写属性后互不影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用构造函数模式+原型模式创建对象取两者优点&lt;ul&gt;
&lt;li&gt;可传递参数&lt;/li&gt;
&lt;li&gt;每个实例都可以利用原型对象共享方法&lt;/li&gt;
&lt;li&gt;将引用类型属性放到构造函数中，实例改写后互不影响&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name, age, job) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.job = job;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.friends = [&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor: Person,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sayName: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来由：原型链这个概念是在讲继承的时候提出的&lt;/li&gt;
&lt;li&gt;定义：原型与实例层层递进构成的链条叫做原型链。某个原型对象等于另一函数的实例:child.prototype = new father()，孩子原型.proto指向父原型，父原型的.proto指向 父原型的原型，直到Object.prototype.proto = null&lt;/li&gt;
&lt;li&gt;确定原型和实例的关系&lt;ul&gt;
&lt;li&gt;instance instanceof SubType&lt;/li&gt;
&lt;li&gt;father.prototype.isPrototypeOf(child)&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型链继承 child.prototype = new father()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问重写父亲引用属性，会更改父原型&lt;/li&gt;
&lt;li&gt;创建子类无法给父构造函数传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.property = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.getSuperValue = function() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//先继承&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//再添加方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.getSubValue = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var instance = new SubType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance.getSuperValue()); //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//SuperType.prototype : constructor,getSuperValue(),proto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//SubType.prototype : proto, property = true;getSubValue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// instance : proto , subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//确定原型和实例的关系 instanceof /father.prototype.isPrototypeOf(child)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof SubType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof SuperType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof Object);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;借用构造函数继承/经典继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：在子类构造函数中调用父类构造函数 ，子向父类传递参数&lt;/li&gt;
&lt;li&gt;子类中Father.apply(this,param)&lt;/li&gt;
&lt;li&gt;缺点：无法达到共享或者复用性（构造模式的问题）&lt;/li&gt;
&lt;li&gt;优点：可给父类传递参数，副本属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在子类构造函数中调用父类构造函数 实现了继承 还传递了参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, &amp;apos;carry&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //给子添加 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = 19;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var instance = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instance.name; //carry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;组合继承（原型链继承+借用构造函数继承）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：原型链继承(可继承方法：达到共享)+借用构造函数继承(可继承属性：有自己的副本属性)&lt;/li&gt;
&lt;li&gt;组合继承是js中最常用的继承方式&lt;/li&gt;
&lt;li&gt;优点：属性互不影响，又可以共用方法，两全其美&lt;/li&gt;
&lt;li&gt;缺点：要调用两次父类的构造函数，造成了属性副本在子类原型中的多余 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.colors = [&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.sayName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType(name, age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //继承实例属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//继承父类方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = new SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.sayAge = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var i1 = new SubType(&amp;apos;bill&amp;apos;, 18);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.colors.push(&amp;apos;white&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(i1.colors); //&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;,&amp;apos;white&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayAge(); //18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayName(); //bill&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var i2 = new SubType(&amp;apos;carry&amp;apos;, 28)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i2.colors; //&amp;apos;green&amp;apos;, &amp;apos;red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayAge(); //28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型式继承 var childObj = Object.create(fatherObj) //Object.create() = create()  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有必要兴师动众的创建构造函数的情况下， 只想让两个对象保持差不多一致&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var peron = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;carry1&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friends: [&amp;apos;f1&amp;apos;, &amp;apos;f2&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var np1 = Object.create(peron);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np1.name = &amp;apos;carry2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np1.friends.push(&amp;apos;f3&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var np2 = Object.create(peron, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &amp;apos;carry3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(np2.name); //carry3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;peron.friends; //f1,f2,f3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄生式继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装一个仅仅用于实现继承过程的函数 该函数 完成继承操作 然后返回子对象.&lt;/li&gt;
&lt;li&gt;寄生式继承就是利用原型式继承的中Object.create(fatherObj)原理实现实例属性的继承，但是又可以在clone函数中定义自己的方法&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createClone(father) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var clone = Object.create(father);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clone.sayHi = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&amp;apos;i am clone&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return clone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var peron = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;carry1&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friends: [&amp;apos;f1&amp;apos;, &amp;apos;f2&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var child = createClone(Person);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child.name = &amp;apos;carry2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child.sayHi(); //&amp;apos;i am clone&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄生组合式继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用 借用构造函数 来继承属性  使用 原型链的混成形式来继承 方法&lt;/li&gt;
&lt;li&gt;用来完善组合式继承：因为组合式继承 要调用两次父类的构造函数，造成了在子类中又创建了一遍属性&lt;/li&gt;
&lt;li&gt;优点：寄生式组合继承 只使用了一次 父类构造函数，避免了child.prototype上创建没必要的属性，原型链的结构还可以保持不变&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function inheritPrototype(subType, superType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var prototype = Object.create(SuperType.prototype); //创建对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prototype.constructor = subType; //增强对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subType.prototype = prototype; //指定对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.colors = [&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.sayName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType(name, age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //继承属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//继承方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inheritPrototype(SubType, SuperType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.sayAge = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;闭包大纲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是闭包？&lt;/li&gt;
&lt;li&gt;闭包的原理？&lt;/li&gt;
&lt;li&gt;平时如何用闭包，闭包能解决什么问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;a：说一下什么是闭包&quot;&gt;&lt;a href=&quot;#a：说一下什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;a：说一下什么是闭包?&quot;&gt;&lt;/a&gt;a：说一下什么是闭包?&lt;/h3&gt;&lt;p&gt;使用着另一个函数作用域中的变量的函数，保留变量并不被回收&lt;/p&gt;
&lt;h3 id=&quot;b-闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot;&gt;&lt;a href=&quot;#b-闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot; class=&quot;headerlink&quot; title=&quot;b:闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot;&gt;&lt;/a&gt;b:闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&lt;/h3&gt;&lt;p&gt;之所以内层函数可以访问外的变量是因为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部函数的作用域链中包含着外层函数的变量对象（活动对象和全局变量对象）&lt;/li&gt;
&lt;li&gt;外层函数执行完毕后，它的执行环境和作用域链会被销毁，但被闭包引用的变量对象不被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何销毁闭包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var a = outerFunction(‘123’);&lt;/li&gt;
&lt;li&gt;使用闭包后,想销毁闭包的作用域链&lt;/li&gt;
&lt;li&gt;a = null;//通知垃圾回收进行清除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;c-你是如何应用闭包的&quot;&gt;&lt;a href=&quot;#c-你是如何应用闭包的&quot; class=&quot;headerlink&quot; title=&quot;c:你是如何应用闭包的?&quot;&gt;&lt;/a&gt;c:你是如何应用闭包的?&lt;/h3&gt;&lt;p&gt;使用闭包定义私有方法和变量&lt;/p&gt;
&lt;h4 id=&quot;1-模拟块级作用域（私有变量和作用域）&quot;&gt;&lt;a href=&quot;#1-模拟块级作用域（私有变量和作用域）&quot; class=&quot;headerlink&quot; title=&quot;1:模拟块级作用域（私有变量和作用域）&quot;&gt;&lt;/a&gt;1:模拟块级作用域（私有变量和作用域）&lt;/h4&gt;&lt;p&gt;只让for循环内访问变量i，立即函数模拟块级作用域，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo3(count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;inner:&amp;apos; + i); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;outer:&amp;apos; + i); //5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo3(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用立即函数和闭包定义块级作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo4(count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //块作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (var i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;inner:&amp;apos; + i); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;outer:&amp;apos; + i); //报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2：构造模式，定义接口，让外界可以访问函数的私有变量&quot;&gt;&lt;a href=&quot;#2：构造模式，定义接口，让外界可以访问函数的私有变量&quot; class=&quot;headerlink&quot; title=&quot;2：构造模式，定义接口，让外界可以访问函数的私有变量&quot;&gt;&lt;/a&gt;2：构造模式，定义接口，让外界可以访问函数的私有变量&lt;/h4&gt;&lt;p&gt;//定义构造函数，使用闭包访问函数的私有变量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setName = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new Person(&amp;apos;carry&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var k =  a.getName(); //carry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.setName(&amp;apos;bill&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.getName(); //bill;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3：原型模式-私有作用域-定义接口&quot;&gt;&lt;a href=&quot;#3：原型模式-私有作用域-定义接口&quot; class=&quot;headerlink&quot; title=&quot;3：原型模式 私有作用域 定义接口&quot;&gt;&lt;/a&gt;3：原型模式 私有作用域 定义接口&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义私有变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name = &amp;apos;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义私有方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //定义接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person.prototype.getName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person.prototype.setName = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4：模块化&quot;&gt;&lt;a href=&quot;#4：模块化&quot; class=&quot;headerlink&quot; title=&quot;4：模块化&quot;&gt;&lt;/a&gt;4：模块化&lt;/h4&gt;&lt;p&gt;retrun {f:f}&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function CoolModule() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var something = &amp;quot;cool&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var another = [1, 2, 3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function doSomething() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert( something );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function doAnother() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert( another.join( &amp;quot; ! &amp;quot; ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSomething: doSomething,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doAnother: doAnother&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var foo = CoolModule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.doSomething(); // cool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.doAnother(); // 1 ! 2 ! 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;d-使用闭包应该注意？&quot;&gt;&lt;a href=&quot;#d-使用闭包应该注意？&quot; class=&quot;headerlink&quot; title=&quot;d:使用闭包应该注意？&quot;&gt;&lt;/a&gt;d:使用闭包应该注意？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&lt;/li&gt;
&lt;li&gt;2:闭包中的this指向全局环境，无法正常的访问作用域中的this和arguments,&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot;&gt;&lt;a href=&quot;#1-闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot; class=&quot;headerlink&quot; title=&quot;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot;&gt;&lt;/a&gt;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&lt;/h4&gt;&lt;p&gt;下面函数的输出结果是 10个10&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result[i] = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用立即函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result[i] = function(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                console.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-闭包中的this指向-window&quot;&gt;&lt;a href=&quot;#2-闭包中的this指向-window&quot; class=&quot;headerlink&quot; title=&quot;2:闭包中的this指向 window&quot;&gt;&lt;/a&gt;2:闭包中的this指向 window&lt;/h4&gt;&lt;p&gt;this在运行时是基于函数的执行环境绑定的&lt;br&gt;匿名函数的执行环境具有全局性，闭包中的this指向window&lt;br&gt;闭包在执行环境中搜索 this和arguments&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var name = &amp;apos;the window&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;my obj&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var that = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return that.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj.getName());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;d-闭包的优缺点&quot;&gt;&lt;a href=&quot;#d-闭包的优缺点&quot; class=&quot;headerlink&quot; title=&quot;d:闭包的优缺点&quot;&gt;&lt;/a&gt;d:闭包的优缺点&lt;/h3&gt;&lt;p&gt;优点：避免全局变量的污染，存在私有变量，使一个成员常驻内存。&lt;br&gt;缺点：闭包会常驻内存，会增大内存使用，使用不当容易造成内存溢出。&lt;br&gt;闭包会保存外层函数的变量对象，会占用更多的内存。&lt;br&gt;V 8优化后的js引擎会尝试回收被闭包占用的内存，但还需慎重使用闭包&lt;/p&gt;
&lt;h3 id=&quot;f-如何创建闭包&quot;&gt;&lt;a href=&quot;#f-如何创建闭包&quot; class=&quot;headerlink&quot; title=&quot;f:如何创建闭包&quot;&gt;&lt;/a&gt;f:如何创建闭包&lt;/h3&gt;&lt;p&gt;1.定义外层函数，和变量。&lt;br&gt;2.定义内层函数，并对外部函数的变量进行使用。&lt;br&gt;3.返回内层函数。&lt;br&gt;返回的内层函数，在其他地方被调用，仍然保存着外函数的变量。（通过访问闭包来访问变量，闭包使变量为私有变量）&lt;/p&gt;
&lt;h3 id=&quot;作用域和作用域链-1&quot;&gt;&lt;a href=&quot;#作用域和作用域链-1&quot; class=&quot;headerlink&quot; title=&quot;作用域和作用域链&quot;&gt;&lt;/a&gt;作用域和作用域链&lt;/h3&gt;&lt;p&gt;因为当某个函数第一次被调用时候，会创建相应的执行环境和作用域链&lt;br&gt;并把作用域链赋值给内部属性：scope,使用this,arguments和函数的初始参数为活动对象（活动对象就是函数执行上下文中的变量）&lt;br&gt;当在函数中访问变量的时候，需要在作用域链中进行查找，先访问自己的内部的，再访问外部的，再访问外部外部的，直到作用域链的终点：全局执行环境&lt;br&gt;创建函数时，会创建包含函数外部对象的 作用域链，作用域链保存在当前函数的scope中&lt;br&gt;调用函数时，会创建执行环境，创建执行环境的作用域链：是靠复制函数的scope里面的对象&lt;br&gt;作用域链的本质是指向变量对象的指针链表，指引用，不实际包含变量对象&lt;/p&gt;
&lt;h3 id=&quot;内存泄露，垃圾回收机制&quot;&gt;&lt;a href=&quot;#内存泄露，垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;内存泄露，垃圾回收机制&quot;&gt;&lt;/a&gt;内存泄露，垃圾回收机制&lt;/h3&gt;&lt;p&gt;循环引用会导致内存泄露&lt;br&gt;在IE9之前版本使用闭包，会导致一些特殊的问题。例如，闭包的作用域链中保存着html元素，无法被销毁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决 定义访问的dom元素的副本，element = null; //解除对dom对象的引用&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo2() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var element = document.getElementById(&amp;apos;someElement&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var id = element.id; //定义让闭包访问的副本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element.onclick = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element = null; //解除对dom对象的引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;函数声明与函数表达式&quot;&gt;&lt;a href=&quot;#函数声明与函数表达式&quot; class=&quot;headerlink&quot; title=&quot;函数声明与函数表达式&quot;&gt;&lt;/a&gt;函数声明与函数表达式&lt;/h3&gt;&lt;p&gt;function a (){};&lt;br&gt;a();&lt;br&gt;var a = function(){};&lt;br&gt;a();&lt;/p&gt;
&lt;p&gt;函数声明方式后不能直接加 ()调用，需要 (function a (){})();&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;js事件-5&quot;&gt;&lt;a href=&quot;#js事件-5&quot; class=&quot;headerlink&quot; title=&quot;js事件 5%&quot;&gt;&lt;/a&gt;js事件 5%&lt;/h2&gt;&lt;h3 id=&quot;事件模型&quot;&gt;&lt;a href=&quot;#事件模型&quot; class=&quot;headerlink&quot; title=&quot;事件模型&quot;&gt;&lt;/a&gt;事件模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM0 :原始事件模型&lt;ul&gt;
&lt;li&gt;btn.onclick=function(){}这种类型的事件模型（btn.onclick = null;）&lt;/li&gt;
&lt;li&gt;基于DOM0的事件，对于同一个dom节点而言，只能注册一个， 取后面事件。后边注册的同种事件会覆盖之前注册的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM2&lt;ul&gt;
&lt;li&gt;冒泡 ：事件从事件的发生地（目标元素），一直向上传递，直到window&lt;ul&gt;
&lt;li&gt;IE只支持事件冒泡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;捕获 ：事件是从window向下传递，直到事件的发生地（目标元素）&lt;/li&gt;
&lt;li&gt;设置捕获和冒泡：&lt;ul&gt;
&lt;li&gt;IE：默认事件冒泡&lt;ul&gt;
&lt;li&gt;标准： addEventListener()第三个参数:捕获/冒泡 = true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绑定或者解除事件&lt;ul&gt;
&lt;li&gt;标准：addEventListener(type,handler),removeEventListener(type,handler)&lt;/li&gt;
&lt;li&gt;IE: attachEvent,target.detachEvent(“on”+type,handler);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阻止事件冒泡：evt.stopPropagation()/evt.cancelBubble=true&lt;/li&gt;
&lt;li&gt;获取事件对象(标准||IE):var event=window.event||event; &lt;/li&gt;
&lt;li&gt;获取事件源对象：var target = event.target||event.srcElement;&lt;/li&gt;
&lt;li&gt;同一个节点元素，给她添加捕获和冒泡事件模型，捕获比冒泡快&lt;/li&gt;
&lt;li&gt;绑定多个事件的顺序:比如说一下子注册了3个冒泡事件，那么执行顺序就按照注册的顺序来，先注册先执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h3&gt;&lt;p&gt;应用场景：动态添加 或删除孩子的时候&lt;br&gt;含义：孩子的事委托父亲做&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ul id=&amp;quot;ul1&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;111&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;222&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;333&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;444&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oUl.onclick = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发.&lt;br&gt;当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　oUl.onclick = function(event)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var ev = event || window.event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var target = ev.target || ev.srcElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　if(target.nodeName.toLowerCase() == &amp;apos;li&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　 　　　　　　 alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　　  alert(target.innerHTML);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##【事件相关问题】&lt;br&gt;1：阻止默认事件：preventDefault():&lt;br&gt;2：阻止冒泡：stopPropagation();&lt;br&gt;3：什么时候会事件捕获？应用事件捕获解决什么问题？&lt;br&gt;你想作全局的点击事件监听，相对于document结点与document下所有的子结点，在某个条件下要求所有的子结点点击无效，这种情况下冒泡模型就解决不了了，而捕获型却非常适合，可以在最顶层结点添加捕获型事件监听器。&lt;br&gt;3：事件冒泡和事件捕获分别有哪些浏览器支持？&lt;br&gt;IE只支持事件冒泡&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浏览器对事件的处理过&quot;&gt;&lt;a href=&quot;#浏览器对事件的处理过&quot; class=&quot;headerlink&quot; title=&quot;浏览器对事件的处理过&quot;&gt;&lt;/a&gt;浏览器对事件的处理过&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;鼠标点击以后 浏览器对于事件的处理详细过程？&lt;br&gt;当(click)点击某个元素，以PC端为例，操作系统会将(click)鼠标点击事件广播到所有应用中，浏览器应用接受到鼠标事件广播后，查询事件源和对应的回函数（按照先捕获后冒泡的顺序），并压入事件处理队列（Event Queue）。Event Loop 则会从中取出回调函数并执行。&lt;ul&gt;
&lt;li&gt;注册（绑定）事件，浏览器干嘛了？&lt;br&gt;DOM.addEventListener，函数以类似”委托”的形式注册到浏览器内建的队列中，等到某个”事件”被触发后，则回Call之前注册的函数。&lt;/li&gt;
&lt;li&gt;执行（响应）事件浏览器干嘛了？&lt;br&gt;当(click)点击某个元素，以PC端为例，操作系统会将(click)鼠标点击事件广播到所有应用中，浏览器应用接受到鼠标事件广播后，查询事件源和对应的回函数（按照先捕获后冒泡的顺序），并压入事件处理队列（Event Queue）。&lt;/li&gt;
&lt;li&gt;异步&lt;br&gt;js中的异步没有从语言上约定其异步的特性，是浏览器/执行引擎来实现，我们所探讨的“异步”都是由执行引擎所赋予的。&lt;br&gt;javascript 是的单线程的，于是就产生了一种任务执行机制叫 eventloop。它维护了一个任务队列，完成一个任务才会开始下一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收?&quot;&gt;&lt;/a&gt;垃圾回收?&lt;/h2&gt;&lt;h3 id=&quot;为什么要垃圾回收？&quot;&gt;&lt;a href=&quot;#为什么要垃圾回收？&quot; class=&quot;headerlink&quot; title=&quot;* 为什么要垃圾回收？&quot;&gt;&lt;/a&gt;* 为什么要垃圾回收？&lt;/h3&gt;&lt;p&gt;由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。&lt;/p&gt;
&lt;h3 id=&quot;垃圾回收的基本方法？&quot;&gt;&lt;a href=&quot;#垃圾回收的基本方法？&quot; class=&quot;headerlink&quot; title=&quot;* 垃圾回收的基本方法？&quot;&gt;&lt;/a&gt;* 垃圾回收的基本方法？&lt;/h3&gt;&lt;h4 id=&quot;1、标记清除（mark-and-sweep）&quot;&gt;&lt;a href=&quot;#1、标记清除（mark-and-sweep）&quot; class=&quot;headerlink&quot; title=&quot;1、标记清除（mark and sweep）&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、标记清除（mark and sweep）&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;　　这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。　　垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。&lt;/p&gt;
&lt;h4 id=&quot;2。标记清除&quot;&gt;&lt;a href=&quot;#2。标记清除&quot; class=&quot;headerlink&quot; title=&quot;2。标记清除&quot;&gt;&lt;/a&gt;2。标记清除&lt;/h4&gt;&lt;p&gt;　　另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该*变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。&lt;/p&gt;
&lt;h4 id=&quot;减少垃圾回收？&quot;&gt;&lt;a href=&quot;#减少垃圾回收？&quot; class=&quot;headerlink&quot; title=&quot;* 减少垃圾回收？&quot;&gt;&lt;/a&gt;* 减少垃圾回收？&lt;/h4&gt;&lt;p&gt; 1:只保留程序运行时需要的数据，对于已经使用的或者不需要的数据，应该将其值设为 null&lt;br&gt; 2:避免创建对象&lt;br&gt;    清空数组：array.length = 0&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;原生js的-增-删-改-5&quot;&gt;&lt;a href=&quot;#原生js的-增-删-改-5&quot; class=&quot;headerlink&quot; title=&quot;原生js的(增 删 改) 5%&quot;&gt;&lt;/a&gt;原生js的(增 删 改) 5%&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d9abdd592a00f11f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;增&quot;&gt;&lt;a href=&quot;#增&quot; class=&quot;headerlink&quot; title=&quot;增&quot;&gt;&lt;/a&gt;增&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;若添加新元素：首先创建该元素节点，然后添加&lt;/li&gt;
&lt;li&gt;创建元素节点：document.createElement(‘h1’)&lt;/li&gt;
&lt;li&gt;创建文本节点：document.createTextNode(‘描述’)&lt;/li&gt;
&lt;li&gt;增加：&lt;ul&gt;
&lt;li&gt;添加孩子&lt;ul&gt;
&lt;li&gt;A.append(B) : 把B追加到A内部&lt;/li&gt;
&lt;li&gt;A.appendTo(B) : 把A追加到B内部&lt;/li&gt;
&lt;li&gt;A.prepend(B) : 在A的开始添加孩子B&lt;/li&gt;
&lt;li&gt;A.prependTo(B) : 把A追加到B的开始&lt;ul&gt;
&lt;li&gt;添加兄弟&lt;/li&gt;
&lt;li&gt;A.after(B) :  在A后添加B&lt;/li&gt;
&lt;li&gt;A.before(B): 在A前追加B&lt;/li&gt;
&lt;li&gt;添加class&lt;/li&gt;
&lt;li&gt;elm.classList.add(‘nn’)&lt;/li&gt;
&lt;li&gt;elm.className+=” nn”  //nn前边有空格&lt;/li&gt;
&lt;li&gt;parent.insertBefore(newNode,oldNode):在父节点n里面的B节点前面追加A&lt;br&gt;模拟insertAfter: parent.insertBefore(newNode,oN.nextsilibing());&lt;/li&gt;
&lt;li&gt;替换节点：parent.replaceChild(child,oldElem);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;删&quot;&gt;&lt;a href=&quot;#删&quot; class=&quot;headerlink&quot; title=&quot;删&quot;&gt;&lt;/a&gt;删&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;elementNow.remove():删除当前元素&lt;/li&gt;
&lt;li&gt;parent.removeChild(child):删除父元素中的子元素&lt;/li&gt;
&lt;li&gt;child.parentNode.removeChild(child)：不确定父元素的时候可以这样做&lt;h3 id=&quot;改&quot;&gt;&lt;a href=&quot;#改&quot; class=&quot;headerlink&quot; title=&quot;改&quot;&gt;&lt;/a&gt;改&lt;/h3&gt;&lt;a href=&quot;http://www.jianshu.com/writer#/notebooks/10862078/notes/15825654/preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/writer#/notebooks/10862078/notes/15825654/preview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;( 获取，设置) 修改HTML元素内容&lt;ul&gt;
&lt;li&gt;node.textContent:用来设置或是获取某个元素内所有文本内容，包括子元素中的内容。（css等兼容性比innerText好）&lt;/li&gt;
&lt;li&gt;node.innerText: 只获取当前节点内容&lt;/li&gt;
&lt;li&gt;node.innerHTML：&lt;/li&gt;
&lt;li&gt;node.outerHTML：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更改属性&lt;ul&gt;
&lt;li&gt;设置属性：node.setAttribute(‘style’,’color:red’)&lt;/li&gt;
&lt;li&gt;获取属性：var a = node.getAttribute(‘’style’’);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改元素CSS&lt;ul&gt;
&lt;li&gt;node.style.color=”red”&lt;h3 id=&quot;查&quot;&gt;&lt;a href=&quot;#查&quot; class=&quot;headerlink&quot; title=&quot;查&quot;&gt;&lt;/a&gt;查&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;querySelector()、&lt;/li&gt;
&lt;li&gt;querySelectorAll()&lt;/li&gt;
&lt;li&gt;getElementById()、&lt;/li&gt;
&lt;li&gt;getElementsByTagName()、&lt;/li&gt;
&lt;li&gt;getElementsByName()、&lt;/li&gt;
&lt;li&gt;getElementsByClassName()、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;jq增删改查&quot;&gt;&lt;a href=&quot;#jq增删改查&quot; class=&quot;headerlink&quot; title=&quot;jq增删改查&quot;&gt;&lt;/a&gt;jq增删改查&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内部插入主要方法：&lt;ul&gt;
&lt;li&gt;append(content) 向每个匹配的元素内部追加内容。&lt;/li&gt;
&lt;li&gt;prepend(content) 向每个匹配的元素内部前置内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部插入：&lt;ul&gt;
&lt;li&gt;after(content) 在每个匹配的元素之后插入内容。&lt;/li&gt;
&lt;li&gt;before(content) 在每个匹配的元素之前插入内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除：&lt;ul&gt;
&lt;li&gt;empty() 删除匹配的元素集合中所有的子节点。&lt;/li&gt;
&lt;li&gt;remove([expr]) 从DOM中删除所有匹配的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;深拷贝与浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝&lt;/h2&gt;&lt;p&gt;深拷贝与浅拷贝是之于Array,Object来说的，来由背景，引用类型对象的赋值，一个改变，会引起另一个改变，因为两个变量指向同一个堆空间放的对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的复制实体，而不是引用地址&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;a = &amp;#123;b:&#39;k&#39;&amp;#125;&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var c = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.b = &amp;apos;carry&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.b? 答案是&amp;apos;carry&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我们如何给引用类型对象赋值（copy），完全隔离，互不影响呢？&lt;/p&gt;
&lt;h3 id=&quot;数组深拷贝&quot;&gt;&lt;a href=&quot;#数组深拷贝&quot; class=&quot;headerlink&quot; title=&quot;数组深拷贝&quot;&gt;&lt;/a&gt;数组深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6拷贝数组Array.from， […oldArr]&lt;/li&gt;
&lt;li&gt;使用循环遍历拷贝&lt;/li&gt;
&lt;li&gt;使用slice，concat进行数组拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-使用slice，concat进行数组拷贝&quot;&gt;&lt;a href=&quot;#1-使用slice，concat进行数组拷贝&quot; class=&quot;headerlink&quot; title=&quot;1.使用slice，concat进行数组拷贝&quot;&gt;&lt;/a&gt;1.使用slice，concat进行数组拷贝&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. var a = [1,2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = a.slice(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b[0] = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(a) //1,2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. var a = [1,2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = a.concat(0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-使用循环遍历拷贝&quot;&gt;&lt;a href=&quot;#2-使用循环遍历拷贝&quot; class=&quot;headerlink&quot; title=&quot;2.使用循环遍历拷贝&quot;&gt;&lt;/a&gt;2.使用循环遍历拷贝&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3,4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(var i=0; i&amp;lt;arr1.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arr2[i]=arr1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2); //12346&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-ES6拷贝数组Array-from，-…oldArr&quot;&gt;&lt;a href=&quot;#3-ES6拷贝数组Array-from，-…oldArr&quot; class=&quot;headerlink&quot; title=&quot;3. ES6拷贝数组Array.from， […oldArr]&quot;&gt;&lt;/a&gt;3. ES6拷贝数组Array.from， […oldArr]&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一种：var newArr = Array.from(oldArr);&lt;/li&gt;
&lt;li&gt;第二种：var newArr = […oldArr]&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=Array.from(arr1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //1235&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=[...arr1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //1235&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对象深拷贝&quot;&gt;&lt;a href=&quot;#对象深拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象深拷贝&quot;&gt;&lt;/a&gt;对象深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JSON对象的parse和stringify&lt;/li&gt;
&lt;li&gt;jQuery中的extend复制方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JSON对象的parse和stringify&quot;&gt;&lt;a href=&quot;#JSON对象的parse和stringify&quot; class=&quot;headerlink&quot; title=&quot;JSON对象的parse和stringify&quot;&gt;&lt;/a&gt;JSON对象的parse和stringify&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var source = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name:&amp;quot;source&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name:&amp;quot;child&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var target = JSON.parse(JSON.stringify(source));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改变target的name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.name = &amp;quot;target&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(source.name);   //source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(target.name);   //target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改变target的child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.child.name = &amp;quot;target child&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(source.child.name);  //child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(target.child.name);  //target child&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;jQuery中的extend复制方法&quot;&gt;&lt;a href=&quot;#jQuery中的extend复制方法&quot; class=&quot;headerlink&quot; title=&quot;jQuery中的extend复制方法&quot;&gt;&lt;/a&gt;jQuery中的extend复制方法&lt;/h4&gt;&lt;h3 id=&quot;自己实现深拷贝&quot;&gt;&lt;a href=&quot;#自己实现深拷贝&quot; class=&quot;headerlink&quot; title=&quot;自己实现深拷贝&quot;&gt;&lt;/a&gt;自己实现深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断对象数据类型 Object.prototype.toString.call(obj);&lt;/li&gt;
&lt;li&gt;若为Object则实现深拷贝&lt;/li&gt;
&lt;li&gt;Array和Object 用遍历的方式深拷贝&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//util作为判断变量具体类型的辅助模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var util = (function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var class2type = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&amp;quot;Null&amp;quot;,&amp;quot;Undefined&amp;quot;,&amp;quot;Number&amp;quot;,&amp;quot;Boolean&amp;quot;,&amp;quot;String&amp;quot;,&amp;quot;Object&amp;quot;,&amp;quot;Function&amp;quot;,&amp;quot;Array&amp;quot;,&amp;quot;RegExp&amp;quot;,&amp;quot;Date&amp;quot;].forEach(function(item)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           class2type[&amp;quot;[object &amp;quot;+ item + &amp;quot;]&amp;quot;] = item.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       function isType(obj, type)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return getType(obj) === type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       function getType(obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return class2type[Object.prototype.toString.call(obj)] || &amp;quot;object&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           isType:isType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           getType:getType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   function copy(obj,deep)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //如果obj不是对象，那么直接返回值就可以了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if(obj === null || typeof obj !== &amp;quot;object&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　//定义需要的局部变脸，根据obj的类型来调整target的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var i, target = util.isType(obj,&amp;quot;array&amp;quot;) ? [] : &amp;#123;&amp;#125;,value,valueType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       for(i in obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           value = obj[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueType = util.getType(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　　//只有在明确执行深复制，并且当前的value是数组或对象的情况下才执行递归复制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           if(deep &amp;amp;&amp;amp; (valueType === &amp;quot;array&amp;quot; || valueType === &amp;quot;object&amp;quot;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               target[i] = copy(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               target[i] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;h3 id=&quot;New一共做了几个操作步骤，要求具体说明&quot;&gt;&lt;a href=&quot;#New一共做了几个操作步骤，要求具体说明&quot; class=&quot;headerlink&quot; title=&quot;New一共做了几个操作步骤，要求具体说明&quot;&gt;&lt;/a&gt;New一共做了几个操作步骤，要求具体说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建空对象；&lt;br&gt;　　var obj = {};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置新对象的constructor属性为构造函数的名称，设置新对象的&lt;strong&gt;proto&lt;/strong&gt;属性指向构造函数的prototype对象；&lt;br&gt;　　obj.&lt;strong&gt;proto&lt;/strong&gt; = ClassA.prototype;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用新对象调用函数，函数中的this被指向新实例对象：&lt;br&gt;　　ClassA.call(obj);　　//{}.构造函数();          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将初始化完毕的新对象地址，保存到等号左边的变量中&lt;/p&gt;
&lt;h3 id=&quot;new一个对象-执行了什么过程？，那-return-‘-’，null-undefined会怎样？&quot;&gt;&lt;a href=&quot;#new一个对象-执行了什么过程？，那-return-‘-’，null-undefined会怎样？&quot; class=&quot;headerlink&quot; title=&quot;new一个对象 执行了什么过程？，那 return ‘ ’，null,undefined会怎样？&quot;&gt;&lt;/a&gt;new一个对象 执行了什么过程？，那 return ‘ ’，null,undefined会怎样？&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何判定js一个变量值的类型（至少3种）3&quot;&gt;&lt;a href=&quot;#如何判定js一个变量值的类型（至少3种）3&quot; class=&quot;headerlink&quot; title=&quot;如何判定js一个变量值的类型（至少3种）3%&quot;&gt;&lt;/a&gt;如何判定js一个变量值的类型（至少3种）3%&lt;/h2&gt;&lt;p&gt;Object.prototype.toString.call(obj)&lt;br&gt;[] instanceof Array&lt;br&gt;[].constructor === Object&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数组和字符串的转换-3&quot;&gt;&lt;a href=&quot;#数组和字符串的转换-3&quot; class=&quot;headerlink&quot; title=&quot;数组和字符串的转换 3%&quot;&gt;&lt;/a&gt;数组和字符串的转换 3%&lt;/h2&gt;&lt;p&gt;split,join&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;arguments&quot;&gt;&lt;a href=&quot;#arguments&quot; class=&quot;headerlink&quot; title=&quot;arguments&quot;&gt;&lt;/a&gt;arguments&lt;/h2&gt;&lt;h3 id=&quot;是啥？&quot;&gt;&lt;a href=&quot;#是啥？&quot; class=&quot;headerlink&quot; title=&quot;是啥？&quot;&gt;&lt;/a&gt;是啥？&lt;/h3&gt;&lt;p&gt;函数参数对象，不是数组，但是有length属性，也能arguments[0]取值&lt;/p&gt;
&lt;h3 id=&quot;转为数组？&quot;&gt;&lt;a href=&quot;#转为数组？&quot; class=&quot;headerlink&quot; title=&quot;转为数组？&quot;&gt;&lt;/a&gt;转为数组？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Array.prototype.slice.apply(arguments)这是运行效率比较快的方法&lt;/li&gt;
&lt;li&gt;Array.prototype.concat.apply(thisArg,arguments)&lt;/li&gt;
&lt;li&gt;Array.prototype.slice.call(arguments);&lt;br&gt;对象转为数组&lt;/li&gt;
&lt;li&gt;Array.from(arguments) &lt;/li&gt;
&lt;li&gt;[…arguments]&lt;h3 id=&quot;arguments其他用法？&quot;&gt;&lt;a href=&quot;#arguments其他用法？&quot; class=&quot;headerlink&quot; title=&quot;arguments其他用法？&quot;&gt;&lt;/a&gt;arguments其他用法？&lt;/h3&gt;&lt;h4 id=&quot;利用arguments-callee实现递归&quot;&gt;&lt;a href=&quot;#利用arguments-callee实现递归&quot; class=&quot;headerlink&quot; title=&quot;利用arguments.callee实现递归&quot;&gt;&lt;/a&gt;利用arguments.callee实现递归&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;&lt;h3 id=&quot;1-arguments-callee&quot;&gt;&lt;a href=&quot;#1-arguments-callee&quot; class=&quot;headerlink&quot; title=&quot;1.arguments.callee&quot;&gt;&lt;/a&gt;1.arguments.callee&lt;/h3&gt;&lt;p&gt;解决函数名递归带来的危险，arguments.callee指向正在执行的函数，使用它来代替函数名&lt;br&gt;arguments.callee是一个指向正在执行的函数的指针&lt;br&gt;好处：不用使用当前函数进行递归，性能变高&lt;br&gt;缺点：严格模式下不管用&lt;/p&gt;
&lt;h3 id=&quot;2-使用函数命名表达式&quot;&gt;&lt;a href=&quot;#2-使用函数命名表达式&quot; class=&quot;headerlink&quot; title=&quot;2.使用函数命名表达式&quot;&gt;&lt;/a&gt;2.使用函数命名表达式&lt;/h3&gt;&lt;p&gt;一个函数两个名字&lt;br&gt;有点：严格模式和非严格模式都适用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var factorial = （ function f(num)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return num * f(num-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-递归性能上的分析？优化？用es6优化？&quot;&gt;&lt;a href=&quot;#3-递归性能上的分析？优化？用es6优化？&quot; class=&quot;headerlink&quot; title=&quot;3.递归性能上的分析？优化？用es6优化？&quot;&gt;&lt;/a&gt;3.递归性能上的分析？优化？用es6优化？&lt;/h3&gt;&lt;p&gt;递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）&lt;/p&gt;
&lt;h4 id=&quot;使用尾调递归优化递归&quot;&gt;&lt;a href=&quot;#使用尾调递归优化递归&quot; class=&quot;headerlink&quot; title=&quot;使用尾调递归优化递归&quot;&gt;&lt;/a&gt;使用尾调递归优化递归&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function factorial(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (n === 1) return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n * factorial(n - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(5) // 120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比正常递归函数多了一个参数total&lt;br&gt;尾递归，只保留一个调用记录，复杂度 O(1)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function factorial(n, total) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (n === 1) return total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return factorial(n - 1, n * total);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(5, 1) // 120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ES6尾调用&quot;&gt;&lt;a href=&quot;#ES6尾调用&quot; class=&quot;headerlink&quot; title=&quot;ES6尾调用&quot;&gt;&lt;/a&gt;ES6尾调用&lt;/h4&gt;&lt;p&gt;ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。&lt;br&gt;这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。&lt;br&gt;func.arguments：返回调用时函数的参数。&lt;br&gt;func.caller：返回调用当前函数的那个函数。&lt;br&gt;尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;字符串和json的转换3&quot;&gt;&lt;a href=&quot;#字符串和json的转换3&quot; class=&quot;headerlink&quot; title=&quot;字符串和json的转换3%&quot;&gt;&lt;/a&gt;字符串和json的转换3%&lt;/h2&gt;&lt;p&gt;JSON.stringify( );&lt;br&gt;JSON.parse（）&lt;/p&gt;
&lt;h2 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;eval()&quot;&gt;&lt;/a&gt;eval()&lt;/h2&gt;&lt;p&gt;eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。&lt;br&gt;eval(“alert(‘Hello world’)”)&lt;br&gt;eval(“x=10;y=20;document.write(x*y)”)&lt;/p&gt;
&lt;h2 id=&quot;typeof-输出&quot;&gt;&lt;a href=&quot;#typeof-输出&quot; class=&quot;headerlink&quot; title=&quot;typeof 输出&quot;&gt;&lt;/a&gt;typeof 输出&lt;/h2&gt;&lt;p&gt;typeof(的)运算数未定义,返回(的)就是 “undefined”.&lt;br&gt;typeof(undifiend)//undifiend&lt;/p&gt;
&lt;p&gt;运算数为数字 typeof(x) = “number”&lt;br&gt;字符串 typeof(x) = “string”&lt;br&gt;布尔值 typeof(x) = “boolean”&lt;br&gt;对象,数组和null typeof(x) = “object”&lt;br&gt;函数 typeof(x) = “function”&lt;br&gt;        typeof(‘aa’+4);//string&lt;br&gt;       typeof(‘1’+undifiend);//报错&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;链式调用&quot;&gt;&lt;a href=&quot;#链式调用&quot; class=&quot;headerlink&quot; title=&quot;链式调用&quot;&gt;&lt;/a&gt;链式调用&lt;/h2&gt;&lt;p&gt;所谓链式调用就是能够返回自身对象&lt;br&gt;$(‘#id’).show().hide().show().hide().show().hide();&lt;br&gt;有点：代码简洁易读，减少了多次重复使用同一个变量&lt;/p&gt;
&lt;h3 id=&quot;1-方法中直接-return-this&quot;&gt;&lt;a href=&quot;#1-方法中直接-return-this&quot; class=&quot;headerlink&quot; title=&quot;1.方法中直接 return this&quot;&gt;&lt;/a&gt;1.方法中直接 return this&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   function ClassA()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ClassA.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hide:function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;hide&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName:function(callback)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         if(callback)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callback.call(this,this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        show:function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;show&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new ClassA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.show().hide().show().hide().show();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;h2 id=&quot;如何解决ajax跨域&quot;&gt;&lt;a href=&quot;#如何解决ajax跨域&quot; class=&quot;headerlink&quot; title=&quot;如何解决ajax跨域&quot;&gt;&lt;/a&gt;如何解决ajax跨域&lt;/h2&gt;&lt;h3 id=&quot;1-CROS方式（跨域资源共享）&quot;&gt;&lt;a href=&quot;#1-CROS方式（跨域资源共享）&quot; class=&quot;headerlink&quot; title=&quot;1.CROS方式（跨域资源共享）&quot;&gt;&lt;/a&gt;1.CROS方式（跨域资源共享）&lt;/h3&gt;&lt;p&gt; 原理 ：配置的两大基本信息,Origin和headers&lt;br&gt;第一步:配置Php 后台允许跨域&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&amp;apos;Access-Control-Allow-Origin: *&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&amp;apos;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//主要为跨域CORS配置的两大基本信息,Origin和headers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二步:配置Apache web服务器跨域(httpd.conf中)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Directory /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //AllowOverride none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //Require all denied&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Options FollowSymLinks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AllowOverride none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Order deny,allow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Allow from all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;2-JSONP方式&quot;&gt;&lt;a href=&quot;#2-JSONP方式&quot; class=&quot;headerlink&quot; title=&quot;2.JSONP方式&quot;&gt;&lt;/a&gt;2.JSONP方式&lt;/h3&gt;&lt;p&gt;jsonp解决跨域问题是一个比较古老的方案(实际中不推荐使用),这里做简单介绍(实际项目中如果要使用JSONP,一般会使用JQ等对JSONP进行了封装的类库来进行ajax请求)&lt;/p&gt;
&lt;p&gt;实现原理&lt;/p&gt;
&lt;p&gt;JSONP之所以能够用来解决跨域方案,主要是因为 &lt;script&gt; 脚本拥有跨域能力,而JSONP正是利用这一点来实现。具体原理如图&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function addScriptTag(src) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var script = document.createElement(&amp;apos;script&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  script.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/javascript&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  script.src = src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  document.body.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addScriptTag(&amp;apos;http://example.com/ip?callback=foo&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(&amp;apos;response data: &amp;apos; + JSON.stringify(data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端对应的接口在返回参数外面添加函数包裹层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;test&amp;quot;: &amp;quot;testData&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;jsonp的弊端&quot;&gt;&lt;a href=&quot;#jsonp的弊端&quot; class=&quot;headerlink&quot; title=&quot;jsonp的弊端&quot;&gt;&lt;/a&gt;jsonp的弊端&lt;/h4&gt;&lt;p&gt;JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。&lt;/p&gt;
&lt;h2 id=&quot;请求代理进行跨域nginx&quot;&gt;&lt;a href=&quot;#请求代理进行跨域nginx&quot; class=&quot;headerlink&quot; title=&quot;请求代理进行跨域nginx&quot;&gt;&lt;/a&gt;请求代理进行跨域nginx&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;如何解决ajax跨域&lt;/p&gt;
&lt;p&gt;一般ajax跨域解决就是通过JSONP解决或者CORS解决,如以下:(注意，现在已经几乎不会再使用JSONP了，所以JSONP了解下即可)&lt;/p&gt;
&lt;h2 id=&quot;其他跨域&quot;&gt;&lt;a href=&quot;#其他跨域&quot; class=&quot;headerlink&quot; title=&quot;其他跨域&quot;&gt;&lt;/a&gt;其他跨域&lt;/h2&gt;&lt;p&gt;2:通过修改document.domain来跨子域&lt;br&gt;仅在相同主域下才有效，且window.domain需要设置为相同的父域 不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。&lt;br&gt;比如，有一个页面，它的地址是&lt;a href=&quot;http://www.example.com/a.html&quot;&gt;http://www.example.com/a.html&lt;/a&gt; ，&lt;br&gt;在这个页面里面有一个iframe，它的src是&lt;a href=&quot;http://example.com/b.html&quot;&gt;http://example.com/b.html&lt;/a&gt;,&lt;br&gt;很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var iframe = document.getElementById(&amp;apos;iframe&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var win = document.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var doc = win.document;//这里获取不到iframe里的document对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var name = win.name;//这里同样获取不到window对象的name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;iframe id = &amp;quot;iframe&amp;quot; src=&amp;quot;http://example.com/b.html&amp;quot; onload = &amp;quot;test()&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b81be614658808c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d51bad8105ff7116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;4：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-665a15e11ea92788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;5：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2e14787d1c2eae05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;if-false-的几种情况&quot;&gt;&lt;a href=&quot;#if-false-的几种情况&quot; class=&quot;headerlink&quot; title=&quot;if() false 的几种情况&quot;&gt;&lt;/a&gt;if() false 的几种情况&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;if(false)&lt;/li&gt;
&lt;li&gt;if(null)&lt;/li&gt;
&lt;li&gt;if(undefined)&lt;/li&gt;
&lt;li&gt;if(‘’)&lt;/li&gt;
&lt;li&gt;if(NaN)-数字NaN&lt;/li&gt;
&lt;li&gt;if(0)-数字0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Ajax实现流程&quot;&gt;&lt;a href=&quot;#Ajax实现流程&quot; class=&quot;headerlink&quot; title=&quot;Ajax实现流程&quot;&gt;&lt;/a&gt;Ajax实现流程&lt;/h2&gt;&lt;p&gt;创建一个XMLHttpRequest()实例&lt;br&gt;准备一个Ajax请求以待发送&lt;br&gt;发送Ajax请求&lt;br&gt;根据服务器响应的结果，将相应数据填充到xhr对象的属性中 注意url是相对于执行代码的当前页面，也可以是绝对路径。&lt;/p&gt;
&lt;p&gt;var xhr = new XMLHttpRequest();&lt;br&gt;xhr.open(Type,URL,Boolean);&lt;br&gt;//请求类型，请求地址，是否异步&lt;br&gt;xhr.send(null);&lt;br&gt;xhr.onreadystatechange = function(){&lt;br&gt;    if(xhr.readyState == 4){&lt;br&gt;        if(xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300 || xhr.status == 304){&lt;br&gt;            alert(xhr.responseText);&lt;br&gt;        }else {&lt;br&gt;            alert(‘unsuccessful ‘ + xhr.status);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;};&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h2&gt;&lt;p&gt;为什么javascrip是单线程&lt;br&gt;JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。&lt;br&gt;浏览器端多线程&lt;br&gt;js&lt;br&gt;css&lt;br&gt;事件&lt;br&gt;数据交互&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;垃圾回收-1&quot;&gt;&lt;a href=&quot;#垃圾回收-1&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;p&gt;垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存，内存泄露和浏览器实现的垃圾回收机制息息相关， 而浏览器实现标识无用变量的策略主要有下两个方法：&lt;br&gt;第一，引用计数法&lt;br&gt;跟踪记录每个值被引用的次数。当声明一个变量并将引用类型的值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次 数加1.相反，如果包含对这个值引用的变量又取得另外一个值，则这个值的引用次数减1.当这个值的引用次数变成0时，则说明没有办法访问这个值了，因此就 可以将其占用的内存空间回收回来。&lt;/p&gt;
&lt;p&gt;如： var a = {};     //对象{}的引用计数为1&lt;br&gt;     b = a;          //对象{}的引用计数为 1+1&lt;br&gt;     a = null;       //对象{}的引用计数为2-1&lt;br&gt;所以这时对象{}不会被回收;&lt;br&gt;IE 6, 7 对DOM对象进行引用计数回收， 这样简单的垃圾回收机制，非常容易出现循环引用问题导致内存不能被回收， 进行导致内存泄露等问题，一般不用引用计数法。&lt;br&gt;第二，标记清除法&lt;br&gt;到2008年为止，IE,Firefox,Opera,Chrome和Safari的javascript实现使用的都是标记清除式的垃圾收集策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。&lt;br&gt;标记清除的算法分为两个阶段，标记(mark)和清除(sweep). 第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;a href=&quot;#javascript创建对象的几种方式？&quot; class=&quot;headerlink&quot; title=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;/a&gt;javascript创建对象的几种方式？&lt;/h2&gt;&lt;p&gt; javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。&lt;/p&gt;
&lt;p&gt; 1、对象字面量的方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;person={firstname:&amp;quot;Mark&amp;quot;,lastname:&amp;quot;Yun&amp;quot;,age:25,eyecolor:&amp;quot;black&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、用function来模拟无参的构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(){}
var person=new Person();//定义一个function，如果使用new&amp;quot;实例化&amp;quot;,该function可以看作是一个Class
person.name=&amp;quot;Mark&amp;quot;;
person.age=&amp;quot;25&amp;quot;;
person.work=function(){
alert(person.name+&amp;quot; hello...&amp;quot;);
}
person.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pet(name,age,hobby){
   this.name=name;//this作用域：当前对象
   this.age=age;
   this.hobby=hobby;
   this.eat=function(){
      alert(&amp;quot;我叫&amp;quot;+this.name+&amp;quot;,我喜欢&amp;quot;+this.hobby+&amp;quot;,是个程序员&amp;quot;);
   }
}
var maidou =new Pet(&amp;quot;麦兜&amp;quot;,25,&amp;quot;coding&amp;quot;);//实例化、创建对象
maidou.eat();//调用eat方法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 4、用工厂方式来创建（内置对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var wcDog =new Object();
wcDog.name=&amp;quot;旺财&amp;quot;;
wcDog.age=3;
wcDog.work=function(){
  alert(&amp;quot;我是&amp;quot;+wcDog.name+&amp;quot;,汪汪汪......&amp;quot;);
}
wcDog.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用原型方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Dog(){

 }
 Dog.prototype.name=&amp;quot;旺财&amp;quot;;
 Dog.prototype.eat=function(){
 alert(this.name+&amp;quot;是个吃货&amp;quot;);
 }
 var wangcai =new Dog();
 wangcai.eat();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用混合方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Car(name,price){
  this.name=name;
  this.price=price;
}
 Car.prototype.sell=function(){
   alert(&amp;quot;我是&amp;quot;+this.name+&amp;quot;，我现在卖&amp;quot;+this.price+&amp;quot;万元&amp;quot;);
  }
var camry =new Car(&amp;quot;凯美瑞&amp;quot;,27);
camry.sell();
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;a href=&quot;#JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;/a&gt;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&lt;/h2&gt;&lt;p&gt; 栈：原始数据类型（Undefined，Null，Boolean，Number、String）&lt;br&gt; 堆：引用数据类型（对象、数组和函数）&lt;/p&gt;
&lt;p&gt; 两种类型的区别是：存储位置不同；&lt;br&gt; 原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；&lt;br&gt; 引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-f0c90cfaba1aabac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;a href=&quot;#说几条写JavaScript的基本规范？&quot; class=&quot;headerlink&quot; title=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;/a&gt;说几条写JavaScript的基本规范？&lt;/h2&gt;&lt;p&gt; 1.不要在同一行声明多个变量。&lt;br&gt; 2.请使用 ===/!==来比较true/false或者数值&lt;br&gt; 3.使用对象字面量替代new Array这种形式&lt;br&gt; 4.不要使用全局函数。&lt;br&gt; 5.Switch语句必须带有default分支&lt;br&gt; 6.函数不应该有时候有返回值，有时候没有返回值。&lt;br&gt; 7.For循环必须使用大括号&lt;br&gt; 8.If语句必须使用大括号&lt;br&gt; 9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Node-amp-Express&quot;&gt;&lt;a href=&quot;#Node-amp-Express&quot; class=&quot;headerlink&quot; title=&quot;Node&amp;amp;Express&quot;&gt;&lt;/a&gt;Node&amp;amp;Express&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于node的其他web开发框架&lt;/li&gt;
&lt;li&gt;node 有关的知识点&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h2&gt;&lt;p&gt;Express 是一个基于 Node的极简灵活的web 应用开发框架。Express是在Node之上扩展了 Web 应用所需的基本功能。&lt;br&gt;Express完全是由中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。&lt;/p&gt;
&lt;h3 id=&quot;中间件含义&quot;&gt;&lt;a href=&quot;#中间件含义&quot; class=&quot;headerlink&quot; title=&quot;中间件含义&quot;&gt;&lt;/a&gt;中间件含义&lt;/h3&gt;&lt;p&gt;是一个函数或功能，（err,res,rep,next），是封装在程序中处理请求的功能。后台的请求分为一部分一部分，每一部分都有中间件来完成,之道响应完毕&lt;/p&gt;
&lt;h3 id=&quot;Express-几种中间件：&quot;&gt;&lt;a href=&quot;#Express-几种中间件：&quot; class=&quot;headerlink&quot; title=&quot;Express 几种中间件：&quot;&gt;&lt;/a&gt;Express 几种中间件：&lt;/h3&gt;&lt;p&gt;应用级中间件&lt;br&gt;绑定到app 对象使用 app.use()和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等&lt;/p&gt;
&lt;p&gt;路由级中间件&lt;br&gt;绑定的对象为 express.Router()。路由级使用 router.use() 加载&lt;/p&gt;
&lt;p&gt;错误处理中间件&lt;br&gt;4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。&lt;/p&gt;
&lt;p&gt;内置的中间件&lt;br&gt;express.static是 Express 唯一内置的中间件。负责在 Express 应用中托管静态资源。&lt;/p&gt;
&lt;p&gt;第三方中间件&lt;br&gt;例如 cookie-parser&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h1&gt;&lt;p&gt; 对前端安全有什么看法？&lt;br&gt;是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？&lt;/p&gt;
&lt;p&gt;1, XSS(cross-site scripting跨域脚本攻击)是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 其实在web前端方面，可以简单的理解为一种javascript代码注入。 解决方法：将前端输出数据都进行转义（$lt,$gt）&lt;/p&gt;
&lt;p&gt;2, CSRF（cross-site request forgery），翻译为跨站请求伪造，与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击(即模拟请求攻击)。&lt;/p&gt;
&lt;p&gt;对于CSRF攻击，我们所能做的可以有：&lt;/p&gt;
&lt;p&gt;检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；&lt;br&gt;对于任何重要的请求都需要重新验证用户的身份；&lt;br&gt;创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;网络部分&quot;&gt;&lt;a href=&quot;#网络部分&quot; class=&quot;headerlink&quot; title=&quot;网络部分&quot;&gt;&lt;/a&gt;网络部分&lt;/h1&gt;&lt;h2 id=&quot;一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;a href=&quot;#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot; class=&quot;headerlink&quot; title=&quot;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;/a&gt;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&lt;/h2&gt;&lt;p&gt; 详细版：&lt;br&gt;      1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;&lt;br&gt;      2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;&lt;br&gt;      3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;&lt;br&gt;      4、进行HTTP协议会话，客户端发送报头(请求报头);&lt;br&gt;      5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;&lt;br&gt;      6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;&lt;br&gt;      7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;&lt;br&gt;      8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;&lt;br&gt;      9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;&lt;br&gt;      10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;简洁版：
  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
  载入解析到的资源文件，渲染页面，完成。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;a href=&quot;#页面渲染流程主要分三部分&quot; class=&quot;headerlink&quot; title=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;/a&gt;页面渲染流程主要分三部分&lt;/h2&gt;&lt;p&gt;HTML文档解析生成DOM树&lt;br&gt;DOM树构建完到Webkit绘制上下文&lt;br&gt;上下文到最终生成的图像 (JavaScript省略为JS)&lt;br&gt;当用户输入URL时候，WebKit调用其资源加载器加载该URL对应的网页。&lt;br&gt;加载器依赖网络模块建立连接，发送请求并接受答复。&lt;br&gt;WebKit收到各种网页或资源的数据，可能是同步或者是异步获取的。&lt;br&gt;网页被交给HTML解释器转换成一系列词语(Token)。&lt;br&gt;解释器根据词语构建节点(Node)，形成DOM树。&lt;br&gt;如果节点是JS，调用JS引擎解释并执行。&lt;br&gt;JS代码修改DOM树的结构&lt;br&gt;如果节点需要依赖其他资源，如图片、css等，调用资源加载器来加载他们，但他们是异步的，不会阻碍当前DOM树的继续构建，如果是JS资源URL(未标记异步)，则需要停止当前DOM数的构建，直到JS引擎执行后才继续构建DOM树。 至此会触发两个事件，一个时DOMConent表示DOM构建完全(和jQuery的$(function(){})()一样),后者是 onload 事件，表示DOM树所依赖的各种图片、css等资源加载完毕，通常这两个事件不是同时发生。&lt;br&gt;接下来是利用CSS和DOM树构建RenderObject树直到绘图上下文。&lt;/p&gt;
&lt;p&gt;CSS文件被CSS解释器解释成表示结构。&lt;br&gt;CSS解释器完成工作之后，在DOM树上附加解释后的样式信息，包括布局计算，这就是RenderObject树。&lt;br&gt;RenderObject节点在创建的同时，WebKit会根据网页的层次结构创建RenderLayer树，同时构建一个虚拟的绘图上下文。&lt;br&gt;实际上，DOM树，RenderObject树，RenderLayer树和绘图上下文在关闭浏览器前并不会被销毁。&lt;/p&gt;
&lt;p&gt;最后，根据绘图上下文生成最终图像，主要依赖2D和3D图形库。&lt;/p&gt;
&lt;p&gt;绘图上下文将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类，绘图实现类将2D图形库或者3D图形库绘制的结果保存下来，交给浏览器来显示。&lt;/p&gt;
&lt;h2 id=&quot;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot;&gt;&lt;a href=&quot;#浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot; class=&quot;headerlink&quot; title=&quot;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot;&gt;&lt;/a&gt;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器解析&lt;ul&gt;
&lt;li&gt;解析html形成 Dom Tree&lt;/li&gt;
&lt;li&gt;解析 css 形成 Css Rule Tree&lt;/li&gt;
&lt;li&gt;Js通过  DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建Render Tree&lt;ul&gt;
&lt;li&gt;浏览器引擎用Dom Tree 和 Css Rule Tree 构建 Render Tree&lt;ul&gt;
&lt;li&gt;Css Rule Tree对比DOM生成Style Context Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绘制网页&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;网络有几层，每层有哪些协议&quot;&gt;&lt;a href=&quot;#网络有几层，每层有哪些协议&quot; class=&quot;headerlink&quot; title=&quot;网络有几层，每层有哪些协议&quot;&gt;&lt;/a&gt;网络有几层，每层有哪些协议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OSI分层（7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。&lt;/li&gt;
&lt;li&gt;TCP/IP分层（4层）：网络接口层、网际层、运输层、应用层。&lt;/li&gt;
&lt;li&gt;五层协议（5层）：物理层、数据链路层、网络层、运输层、应用层。&lt;br&gt;tcp,udp在运输层&lt;br&gt;http,ftp 在应用层&lt;br&gt;ip在网络层&lt;h2 id=&quot;UDP-TCP-的区别，什么时候用哪个-哪个是可靠的？&quot;&gt;&lt;a href=&quot;#UDP-TCP-的区别，什么时候用哪个-哪个是可靠的？&quot; class=&quot;headerlink&quot; title=&quot;UDP TCP 的区别，什么时候用哪个,哪个是可靠的？&quot;&gt;&lt;/a&gt;UDP TCP 的区别，什么时候用哪个,哪个是可靠的？&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;1、TCP面向连接;UDP是无连接的，即发送数据之前不需要建立连接&lt;/li&gt;
&lt;li&gt;2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达（ack）;UDP尽最大努力交付，即不保证可靠交付&lt;/li&gt;
&lt;li&gt;3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的&lt;br&gt;UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）&lt;/li&gt;
&lt;li&gt;4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信&lt;/li&gt;
&lt;li&gt;5、TCP首部开销20字节;UDP的首部开销小，只有8个字节&lt;/li&gt;
&lt;li&gt;6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;http-中get和post的区别&quot;&gt;&lt;a href=&quot;#http-中get和post的区别&quot; class=&quot;headerlink&quot; title=&quot;http 中get和post的区别&quot;&gt;&lt;/a&gt;http 中get和post的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GET：一般用来获取数据  ，POST：一般用来修改数据&lt;/li&gt;
&lt;li&gt;发送值：&lt;br&gt;　&lt;em&gt; geturl参数可见。
　&lt;/em&gt; post是通过HTTP post机制，将数据放到 头传过去&lt;/li&gt;
&lt;li&gt;长度限制：&lt;ul&gt;
&lt;li&gt;大部分浏览器对GET url有长度限制2k&lt;/li&gt;
&lt;li&gt;post传送的数据量较大，一般被默认为不受限制。80KB-100KB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存:&lt;ul&gt;
&lt;li&gt;GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。&lt;ul&gt;
&lt;li&gt;但是post请求是不会被缓存的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET/POST使用场景有区别&lt;ul&gt;
&lt;li&gt;用get:&lt;br&gt;请求中的URL可以被手动输入&lt;br&gt;请求中的URL可以被存在书签里，或者历史里，或者快速拨号里面，或者分享给别人。&lt;br&gt;请求中的URL可以被缓存。GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。但是post请求是不会被缓存的。&lt;br&gt; 用GET： 可以重复的交互，比如取个数据，跳个页面&lt;/li&gt;
&lt;li&gt;post:&lt;br&gt;表单数据，数据库内添加新的数据行，用POST, 因为POST不能被缓存，所以浏览器不会多次提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延伸&lt;br&gt;http:get 获取数据 post:修改数据 put:增加数据 delete：删除数据&lt;h2 id=&quot;为什么get方式有限制是2kb-，出于什么原因？&quot;&gt;&lt;a href=&quot;#为什么get方式有限制是2kb-，出于什么原因？&quot; class=&quot;headerlink&quot; title=&quot;为什么get方式有限制是2kb.，出于什么原因？&quot;&gt;&lt;/a&gt;为什么get方式有限制是2kb.，出于什么原因？&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;不同&lt;strong&gt;的&lt;/strong&gt;浏览器对于URL是有限制&lt;strong&gt;的&lt;/strong&gt;，比如IE浏览器对于URL&lt;strong&gt;的&lt;/strong&gt;限制为&lt;strong&gt;2KB&lt;/strong&gt;，而Chrome，FireFox浏览器理论上对于URL是没有限制&lt;strong&gt;的&lt;/strong&gt;，它真正&lt;strong&gt;的&lt;/strong&gt;限制取决于操作系统本身&lt;/li&gt;
&lt;li&gt;服务器最多处理64K大小的url。超过的部分，恕不处理。&lt;h2 id=&quot;知道post请求发几个包？，知道某个名词吗&quot;&gt;&lt;a href=&quot;#知道post请求发几个包？，知道某个名词吗&quot; class=&quot;headerlink&quot; title=&quot;知道post请求发几个包？，知道某个名词吗?&quot;&gt;&lt;/a&gt;知道post请求发几个包？，知道某个名词吗?&lt;/h2&gt;GET和POST还有一个重大区别是：GET产生一个TCP数据包，而POST产生两个TCP数据包(但又不是绝对)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1、对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、而对于POST，浏览器先发送header，服务器响应100(客户端应当继续发送请求) continue，浏览器再发送data，服务器响应200 ok(返回数据)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;4、因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑!跳入需谨慎。为什么?&lt;/li&gt;
&lt;li&gt;6、 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。&lt;/li&gt;
&lt;li&gt;7、但并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。&lt;h2 id=&quot;握手挥手&quot;&gt;&lt;a href=&quot;#握手挥手&quot; class=&quot;headerlink&quot; title=&quot;握手挥手&quot;&gt;&lt;/a&gt;握手挥手&lt;/h2&gt;&lt;h3 id=&quot;握手&quot;&gt;&lt;a href=&quot;#握手&quot; class=&quot;headerlink&quot; title=&quot;握手&quot;&gt;&lt;/a&gt;握手&lt;/h3&gt;三次握手过程：&lt;br&gt;客户端向服务器发送一个SYN（包含了SYN，SEQ）。&lt;br&gt;当服务器会向客户端发送一个SYN+ACK的数据包&lt;br&gt;当客户端向服务器发送ACK的数据包，此时ACK数据包中的ack值等于上一次SYN中的seq+syn。&lt;br&gt;如果某个阶段莫名中断，TCP会再次以相同的顺序发送相同的数据包。&lt;h4 id=&quot;三次握手的目的：&quot;&gt;&lt;a href=&quot;#三次握手的目的：&quot; class=&quot;headerlink&quot; title=&quot;三次握手的目的：&quot;&gt;&lt;/a&gt;三次握手的目的：&lt;/h4&gt;防止已过期的连接请求报文突然又传送到服务器，因而产生错误。&lt;h3 id=&quot;四次挥手&quot;&gt;&lt;a href=&quot;#四次挥手&quot; class=&quot;headerlink&quot; title=&quot;四次挥手&quot;&gt;&lt;/a&gt;四次挥手&lt;/h3&gt;第一次挥手：主动关闭方A发送一个FIN，用来A到被动关闭方B对的数据传送，也就是A不再给B发数据了，但是A还可以接收数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二次挥手：B收到FIN包后，发一个ACK给对方，确认序号为收到序号+1。（一个FIN占用一个序号）&lt;/p&gt;
&lt;p&gt;第三次挥手：B发送一个FIN，用来关闭B到A的数据传送&lt;/p&gt;
&lt;p&gt;第四次挥手：A收到FIN后，发送一个ACK给B，确认序号为收到序号+1。完成四次挥手。&lt;/p&gt;
&lt;h2 id=&quot;为什么挥手比握手多了一个次？&quot;&gt;&lt;a href=&quot;#为什么挥手比握手多了一个次？&quot; class=&quot;headerlink&quot; title=&quot;为什么挥手比握手多了一个次？&quot;&gt;&lt;/a&gt;为什么挥手比握手多了一个次？&lt;/h2&gt;&lt;p&gt;但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以它这里的ACK报文和FIN报文分开发送的。&lt;/p&gt;
&lt;h2 id=&quot;http的缓存机制（cookie）&quot;&gt;&lt;a href=&quot;#http的缓存机制（cookie）&quot; class=&quot;headerlink&quot; title=&quot;http的缓存机制（cookie）&quot;&gt;&lt;/a&gt;http的缓存机制（cookie）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/0c31b58dbccb&quot;&gt;http://www.jianshu.com/p/0c31b58dbccb&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000010775131&quot;&gt;https://segmentfault.com/a/1190000010775131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-3e3258c0ab144bfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-870aaa08f5c962a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;http请求是有状态的嘛？websocket区别&quot;&gt;&lt;a href=&quot;#http请求是有状态的嘛？websocket区别&quot; class=&quot;headerlink&quot; title=&quot;http请求是有状态的嘛？websocket区别&quot;&gt;&lt;/a&gt;http请求是有状态的嘛？websocket区别&lt;/h2&gt;&lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;http基于tcp&lt;/li&gt;
&lt;li&gt;http为非状态协议，每次发送数据都要重新请求连接&lt;/li&gt;
&lt;li&gt;被动性：服务器不能主动发送请求，只能等待响应&lt;h3 id=&quot;websocket&quot;&gt;&lt;a href=&quot;#websocket&quot; class=&quot;headerlink&quot; title=&quot;websocket&quot;&gt;&lt;/a&gt;websocket&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于tcp,为了实现实时 通信而产生的。&lt;/li&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;服务器可以主动发送请求&lt;/li&gt;
&lt;li&gt;节约带宽&lt;/li&gt;
&lt;li&gt;持久连接&lt;h2 id=&quot;Http与https&quot;&gt;&lt;a href=&quot;#Http与https&quot; class=&quot;headerlink&quot; title=&quot;Http与https&quot;&gt;&lt;/a&gt;Http与https&lt;/h2&gt;HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。&lt;br&gt;HTTPS和HTTP的区别主要如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。&lt;/p&gt;
&lt;p&gt;　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。&lt;/p&gt;
&lt;p&gt;　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。&lt;/p&gt;
&lt;p&gt;　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HTTP请求报文与响应报文格式&quot;&gt;&lt;a href=&quot;#HTTP请求报文与响应报文格式&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求报文与响应报文格式&quot;&gt;&lt;/a&gt;HTTP请求报文与响应报文格式&lt;/h2&gt;&lt;h3 id=&quot;请求报文包含三部分：&quot;&gt;&lt;a href=&quot;#请求报文包含三部分：&quot; class=&quot;headerlink&quot; title=&quot;请求报文包含三部分：&quot;&gt;&lt;/a&gt;请求报文包含三部分：&lt;/h3&gt;&lt;p&gt;a、请求行：包含请求方法、URI、HTTP版本信息&lt;br&gt;b、请求首部字段&lt;br&gt;c、请求内容实体&lt;/p&gt;
&lt;h3 id=&quot;响应报文包含三部分：&quot;&gt;&lt;a href=&quot;#响应报文包含三部分：&quot; class=&quot;headerlink&quot; title=&quot;响应报文包含三部分：&quot;&gt;&lt;/a&gt;响应报文包含三部分：&lt;/h3&gt;&lt;p&gt;a、状态行：包含HTTP版本、状态码、状态码的原因短语&lt;br&gt;b、响应首部字段&lt;br&gt;c、响应内容实体&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见HTTP首部字段&quot;&gt;&lt;a href=&quot;#常见HTTP首部字段&quot; class=&quot;headerlink&quot; title=&quot;常见HTTP首部字段&quot;&gt;&lt;/a&gt;常见HTTP首部字段&lt;/h2&gt;&lt;p&gt;###　a、通用首部字段（请求报文与响应报文都会使用的首部字段）&lt;br&gt;Date：创建报文时间&lt;br&gt;Connection：连接的管理&lt;br&gt;Cache-Control：缓存的控制&lt;br&gt;Transfer-Encoding：报文主体的传输编码方式&lt;/p&gt;
&lt;h3 id=&quot;b、请求首部字段（请求报文会使用的首部字段）&quot;&gt;&lt;a href=&quot;#b、请求首部字段（请求报文会使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;b、请求首部字段（请求报文会使用的首部字段）&quot;&gt;&lt;/a&gt;b、请求首部字段（请求报文会使用的首部字段）&lt;/h3&gt;&lt;p&gt;Host：请求资源所在服务器&lt;br&gt;Accept：可处理的媒体类型&lt;br&gt;Accept-Charset：可接收的字符集&lt;br&gt;Accept-Encoding：可接受的内容编码&lt;br&gt;Accept-Language：可接受的自然语言&lt;/p&gt;
&lt;h3 id=&quot;c、响应首部字段（响应报文会使用的首部字段）&quot;&gt;&lt;a href=&quot;#c、响应首部字段（响应报文会使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;c、响应首部字段（响应报文会使用的首部字段）&quot;&gt;&lt;/a&gt;c、响应首部字段（响应报文会使用的首部字段）&lt;/h3&gt;&lt;p&gt;Accept-Ranges：可接受的字节范围&lt;br&gt;Location：令客户端重新定向到的URI&lt;br&gt;Server：HTTP服务器的安装信息&lt;/p&gt;
&lt;h3 id=&quot;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot;&gt;&lt;a href=&quot;#d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot;&gt;&lt;/a&gt;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&lt;/h3&gt;&lt;p&gt;Allow：资源可支持的HTTP方法&lt;br&gt;Content-Type：实体主类的类型&lt;br&gt;Content-Encoding：实体主体适用的编码方式&lt;br&gt;Content-Language：实体主体的自然语言&lt;br&gt;Content-Length：实体主体的的字节数&lt;br&gt;Content-Range：实体主体的位置范围，一般用于发出部分请求时使用&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Http状态码-常用的&quot;&gt;&lt;a href=&quot;#Http状态码-常用的&quot; class=&quot;headerlink&quot; title=&quot;Http状态码 常用的&quot;&gt;&lt;/a&gt;Http状态码 常用的&lt;/h3&gt;&lt;p&gt;成功的状态码：&lt;br&gt;200 – 服务器成功返回网页&lt;br&gt;304 – 未修改&lt;br&gt;失败的状态码：&lt;br&gt;404 – 请求的网页不存在&lt;br&gt;503 – 服务器暂时不可用&lt;br&gt;500 – 服务器内部错误  &lt;/p&gt;
&lt;h2 id=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;a href=&quot;#http状态码有那些？分别代表是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;/a&gt;http状态码有那些？分别代表是什么意思？&lt;/h2&gt;&lt;h3 id=&quot;简单版&quot;&gt;&lt;a href=&quot;#简单版&quot; class=&quot;headerlink&quot; title=&quot;简单版&quot;&gt;&lt;/a&gt;简单版&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[
    100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
    200  OK         正常返回信息
    201  Created      请求成功并且服务器创建了新的资源
    202  Accepted     服务器已接受请求，但尚未处理
    301  Moved Permanently  请求的网页已永久移动到新位置。
    302 Found          临时性重定向。
    303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。
    304  Not Modified 自从上次请求后，请求的网页未修改过。

    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
    401 Unauthorized 请求未授权。
    403 Forbidden      禁止访问。
    404 Not Found      找不到如何与 URI 相匹配的资源。

    500 Internal Server Error  最常见的服务器端错误。
    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;完整版&quot;&gt;&lt;a href=&quot;#完整版&quot; class=&quot;headerlink&quot; title=&quot;完整版&quot;&gt;&lt;/a&gt;完整版&lt;/h3&gt;&lt;h4 id=&quot;1-信息类-：表示接收到请求并且继续处理&quot;&gt;&lt;a href=&quot;#1-信息类-：表示接收到请求并且继续处理&quot; class=&quot;headerlink&quot; title=&quot;1**(信息类)：表示接收到请求并且继续处理&quot;&gt;&lt;/a&gt;1**(信息类)：表示接收到请求并且继续处理&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;100——客户必须继续发出请求
101——客户要求服务器根据请求转换HTTP协议版本
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-响应成功-：表示动作被成功接收、理解和接受&quot;&gt;&lt;a href=&quot;#2-响应成功-：表示动作被成功接收、理解和接受&quot; class=&quot;headerlink&quot; title=&quot;2**(响应成功)：表示动作被成功接收、理解和接受&quot;&gt;&lt;/a&gt;2**(响应成功)：表示动作被成功接收、理解和接受&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;200——表明该请求被成功地完成，所请求的资源发送回客户端
201——提示知道新文件的URL
202——接受和处理、但处理未完成
203——返回信息不确定或不完整
204——请求收到，但返回信息为空
205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
206——服务器已经完成了部分用户的GET请求
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-重定向类-：为了完成指定的动作，必须接受进一步处理&quot;&gt;&lt;a href=&quot;#3-重定向类-：为了完成指定的动作，必须接受进一步处理&quot; class=&quot;headerlink&quot; title=&quot;3**(重定向类)：为了完成指定的动作，必须接受进一步处理&quot;&gt;&lt;/a&gt;3**(重定向类)：为了完成指定的动作，必须接受进一步处理&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;300——请求的资源可在多处得到
301——本网页被永久性转移到另一个URL
302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。
303——建议客户访问其他URL或访问方式
304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用
305——请求的资源必须从服务器指定的地址得到
306——前一版本HTTP中使用的代码，现行版本中不再使用
307——申明请求的资源临时性删除
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-客户端错误类-：请求包含错误语法或不能正确执行&quot;&gt;&lt;a href=&quot;#4-客户端错误类-：请求包含错误语法或不能正确执行&quot; class=&quot;headerlink&quot; title=&quot;4**(客户端错误类)：请求包含错误语法或不能正确执行&quot;&gt;&lt;/a&gt;4**(客户端错误类)：请求包含错误语法或不能正确执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;400——客户端请求有语法错误，不能被服务器所理解
401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
HTTP 401.1 - 未授权：登录失败
　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败
　　HTTP 401.3 - ACL 禁止访问资源
　　HTTP 401.4 - 未授权：授权被筛选器拒绝
HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败
402——保留有效ChargeTo头响应
403——禁止访问，服务器收到请求，但是拒绝提供服务
HTTP 403.1 禁止访问：禁止可执行访问
　　HTTP 403.2 - 禁止访问：禁止读访问
　　HTTP 403.3 - 禁止访问：禁止写访问
　　HTTP 403.4 - 禁止访问：要求 SSL
　　HTTP 403.5 - 禁止访问：要求 SSL 128
　　HTTP 403.6 - 禁止访问：IP 地址被拒绝
　　HTTP 403.7 - 禁止访问：要求客户证书
　　HTTP 403.8 - 禁止访问：禁止站点访问
　　HTTP 403.9 - 禁止访问：连接的用户过多
　　HTTP 403.10 - 禁止访问：配置无效
　　HTTP 403.11 - 禁止访问：密码更改
　　HTTP 403.12 - 禁止访问：映射器拒绝访问
　　HTTP 403.13 - 禁止访问：客户证书已被吊销
　　HTTP 403.15 - 禁止访问：客户访问许可过多
　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效
HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效
404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL
405——用户在Request-Line字段定义的方法不允许
406——根据用户发送的Accept拖，请求资源不可访问
407——类似401，用户必须首先在代理服务器上得到授权
408——客户端没有在用户指定的饿时间内完成请求
409——对当前资源状态，请求不能完成
410——服务器上不再有此资源且无进一步的参考地址
411——服务器拒绝用户定义的Content-Length属性请求
412——一个或多个请求头字段在当前请求中错误
413——请求的资源大于服务器允许的大小
414——请求的资源URL长于服务器允许的长度
415——请求资源不支持请求项目格式
416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-服务端错误类-：服务器不能正确执行一个正确的请求&quot;&gt;&lt;a href=&quot;#5-服务端错误类-：服务器不能正确执行一个正确的请求&quot; class=&quot;headerlink&quot; title=&quot;5**(服务端错误类)：服务器不能正确执行一个正确的请求&quot;&gt;&lt;/a&gt;5**(服务端错误类)：服务器不能正确执行一个正确的请求&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  HTTP 500 - 服务器遇到错误，无法完成请求
  　　HTTP 500.100 - 内部服务器错误 - ASP 错误
  　　HTTP 500-11 服务器关闭
  　　HTTP 500-12 应用程序重新启动
  　　HTTP 500-13 - 服务器太忙
  　　HTTP 500-14 - 应用程序无效
  　　HTTP 500-15 - 不允许请求 global.asa
  　　Error 501 - 未实现
HTTP 502 - 网关错误
HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;h2 id=&quot;什么是事务？&quot;&gt;&lt;a href=&quot;#什么是事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是事务？&quot;&gt;&lt;/a&gt;什么是事务？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过ACID测试，即原子性，一致性，隔离性和持久性。&lt;h2 id=&quot;数据库有哪几种事务&quot;&gt;&lt;a href=&quot;#数据库有哪几种事务&quot; class=&quot;headerlink&quot; title=&quot;数据库有哪几种事务&quot;&gt;&lt;/a&gt;数据库有哪几种事务&lt;/h2&gt;&lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h2&gt;答：视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询&lt;h2 id=&quot;mysql的left-join，inner-join，right-join&quot;&gt;&lt;a href=&quot;#mysql的left-join，inner-join，right-join&quot; class=&quot;headerlink&quot; title=&quot;mysql的left join，inner join，right join;&quot;&gt;&lt;/a&gt;mysql的left join，inner join，right join;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;Inner Join:内连接是最常见的一种连接，只连接匹配的行。它又分为等值连接（连接条件运算符为”=”）和不等值连接（连接条件运算符不为”=”，例如between…and）。&lt;/li&gt;
&lt;li&gt;Outer Join：它除了显示符合连接条件的记录以外，还会显示所有左表中的记录（右外连接就是所有右表中的记录）&lt;ul&gt;
&lt;li&gt;A FULL OUTER JOIN B：产生A和B的并集&lt;br&gt;*A Left Outer Join B：产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。&lt;/li&gt;
&lt;li&gt;A Right Outer Join B：是后面的表为基础&lt;h2 id=&quot;mysql的索引&quot;&gt;&lt;a href=&quot;#mysql的索引&quot; class=&quot;headerlink&quot; title=&quot;mysql的索引;&quot;&gt;&lt;/a&gt;mysql的索引;&lt;/h2&gt;&lt;h2 id=&quot;索引的作用？和它的优点缺点是什么？&quot;&gt;&lt;a href=&quot;#索引的作用？和它的优点缺点是什么？&quot; class=&quot;headerlink&quot; title=&quot;索引的作用？和它的优点缺点是什么？&quot;&gt;&lt;/a&gt;索引的作用？和它的优点缺点是什么？&lt;/h2&gt;答：索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小。&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;h2 id=&quot;进程和线程有什么区别？&quot;&gt;&lt;a href=&quot;#进程和线程有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;进程和线程有什么区别？&quot;&gt;&lt;/a&gt;进程和线程有什么区别？&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程和线程都是CPU工作时间段的描述。&lt;/li&gt;
&lt;li&gt;进程是cpu资源分配的最小单位，线程是cpu调度的最小单位&lt;/li&gt;
&lt;li&gt;线程的划分尺度小于进程，使得多线程程序的并发性高。&lt;/li&gt;
&lt;li&gt;线程执行开销小，但不利于资源的管理和保护；&lt;/li&gt;
&lt;li&gt;一个进程可以有多个线程&lt;/li&gt;
&lt;li&gt;进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些.&lt;h2 id=&quot;什么是死锁，死锁产生的4个条件&quot;&gt;&lt;a href=&quot;#什么是死锁，死锁产生的4个条件&quot; class=&quot;headerlink&quot; title=&quot;什么是死锁，死锁产生的4个条件&quot;&gt;&lt;/a&gt;什么是死锁，死锁产生的4个条件&lt;/h2&gt;&lt;h3 id=&quot;死锁定义：&quot;&gt;&lt;a href=&quot;#死锁定义：&quot; class=&quot;headerlink&quot; title=&quot;死锁定义：&quot;&gt;&lt;/a&gt;死锁定义：&lt;/h3&gt;　在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。&lt;h3 id=&quot;产生条件：&quot;&gt;&lt;a href=&quot;#产生条件：&quot; class=&quot;headerlink&quot; title=&quot;产生条件：&quot;&gt;&lt;/a&gt;产生条件：&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;1：互斥条件        – 一个资源一次只能被一个进程使用&lt;/li&gt;
&lt;li&gt;2：请求保持条件 – 一个进程因请求资源而阻塞时，对已经获得资源保持不放 &lt;/li&gt;
&lt;li&gt;3：不可抢占条件 – 进程已获得的资源在未使用完之前不能强行剥夺&lt;/li&gt;
&lt;li&gt;4：循环等待条件 – 若干进程之间形成一种头尾相接的循环等待资源的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;预防避免死锁的方法&quot;&gt;&lt;a href=&quot;#预防避免死锁的方法&quot; class=&quot;headerlink&quot; title=&quot;预防避免死锁的方法&quot;&gt;&lt;/a&gt;预防避免死锁的方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1：破坏“请求和保持”条件：规定所有进程在开始运行之前，都必须一次性的申请其在整个运行过程所需要的全部资源。&lt;ul&gt;
&lt;li&gt;优点：简单，安全。 &lt;ul&gt;
&lt;li&gt;缺点：资源严重浪费，恶化了系统的利用率；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2：破坏“不剥夺”条件：进程逐个的提出资源请求，当一个已经保持了某些资源的进程，再提出新的资源请求而不能立即得到满足时，必须释放它已经保持了的所有资源，待以后需要时再重新申请。&lt;ul&gt;
&lt;li&gt;缺点：实现复杂，代价大，反复地申请和释放资源，而使进程的执行无限的推迟、延长了进程的周转时间增加系统开销、降低系统吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3：破坏“环路等待”条件：将所有的资源按类型进行线性排队，并赋予不同的序号。所有进程请求资源必须按照资源递增的次序提出，防止出现环路。 &lt;ul&gt;
&lt;li&gt;缺点：&lt;ul&gt;
&lt;li&gt;1、序号必须相对稳定，限制了新设备类型的增加&lt;/li&gt;
&lt;li&gt;2、作业（进程）使用资源顺序和系统规定的顺序不同而造成资源的浪费&lt;/li&gt;
&lt;li&gt;3、限制了用户编程 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　注意：由于互斥条件是非共享设备所必需的，不能改变&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;JQUERY&quot;&gt;&lt;a href=&quot;#JQUERY&quot; class=&quot;headerlink&quot; title=&quot;JQUERY&quot;&gt;&lt;/a&gt;JQUERY&lt;/h1&gt;&lt;h2 id=&quot;1-你在公司是怎么用jquery的？&quot;&gt;&lt;a href=&quot;#1-你在公司是怎么用jquery的？&quot; class=&quot;headerlink&quot; title=&quot;1 你在公司是怎么用jquery的？&quot;&gt;&lt;/a&gt;1 你在公司是怎么用jquery的？&lt;/h2&gt;&lt;p&gt;答：在项目中是怎么用的是看看你有没有项目经验(根据自己的实际情况来回答) 你用过的选择器啊，复选框啊，表单啊，ajax啊，事件等配置&lt;a href=&quot;http://lib.csdn.net/base/jquery&quot;&gt;jQuery&lt;/a&gt;环境 下载jquery类库 在jsp页面引用jquery类库即可&lt;/p&gt;
&lt;p&gt;&lt;script type=&quot;text/[JavaScript](http://lib.csdn.net/base/javascript)&quot; src=&quot;jquery/jquery-1.7.2.min.js&quot;/&gt;接下来通过在&lt;script&gt; $(function(){ }); &lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-你为什么要使用jquery？&quot;&gt;&lt;a href=&quot;#2-你为什么要使用jquery？&quot; class=&quot;headerlink&quot; title=&quot;2 你为什么要使用jquery？&quot;&gt;&lt;/a&gt;2 你为什么要使用jquery？&lt;/h2&gt;&lt;p&gt;答：因为jQuery是轻量级的框架，大小不到30kb,它有强大的选择器，出色的DOM操作的封装，有可靠的事件处理机制(jQuery在处理事件绑定的时候相当的可靠)，完善的ajax(它的ajax封装的非常的好，不需要考虑复杂浏览器的兼容性和XMLHttpRequest对象的创建和使用的问题。) 出色的浏览器的兼容性。 而且支持链式操作，隐式迭代。行为层和结构层的分离，还支持丰富的插件，jquery的文档也非常的丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-你觉得jquery有哪些好处？-答案同上&quot;&gt;&lt;a href=&quot;#3-你觉得jquery有哪些好处？-答案同上&quot; class=&quot;headerlink&quot; title=&quot;3 你觉得jquery有哪些好处？ 答案同上&quot;&gt;&lt;/a&gt;3 你觉得jquery有哪些好处？ 答案同上&lt;/h2&gt;&lt;h2 id=&quot;4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;a href=&quot;#4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot; class=&quot;headerlink&quot; title=&quot;4 你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;/a&gt;4 你使用jquery遇到过哪些问题，你是怎么解决的？&lt;/h2&gt;&lt;p&gt;答：这个答案是开发的，看你是否有相关的项目经验。例前台拿不到值，JSON 可是出现的错误(多了一个空格等)这编译是不会报错的 jquery库与其他库冲突：1&amp;gt;如果其他库在jquery库之前导入的话1.我们可以通过jquery.noconflict()将变量的$的控制权过度给其他库2.自定义快捷键,用一个变量接住jquery.noconflict()3.通过函数传参2&amp;gt;如果jquery库在其他库之前导入就直接使用jquery今天在处理一个数据问题时，发现jQuery.ajax()方法返回的值一直有问题，清除缓存后数据无误，多次&lt;a href=&quot;http://lib.csdn.net/base/softwaretest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试&lt;/a&gt;后发现返回的值都是之前的值，并且一直未执行url(后台为&lt;a href=&quot;http://lib.csdn.net/base/javase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;，设置断点一直未进入)。在网上查找下,发现是未设置type的原因。 如果没设置jQuery.ajax的type=”Post”，那么ajax就会默认type=”Get”，这就会导致之前数据被缓存起来。加上type=”Post”，问题解决！&lt;/p&gt;
&lt;h2 id=&quot;5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;a href=&quot;#5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot; class=&quot;headerlink&quot; title=&quot;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;/a&gt;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&lt;/h2&gt;&lt;p&gt;答 ：jQuery中的选择器大致分为:基本选择器，层次选择器，过滤选择器，表单选择器&lt;/p&gt;
&lt;h2 id=&quot;6-jquery中的选择器-和-css中的选择器有区别吗？&quot;&gt;&lt;a href=&quot;#6-jquery中的选择器-和-css中的选择器有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;6 jquery中的选择器 和 css中的选择器有区别吗？&quot;&gt;&lt;/a&gt;6 jquery中的选择器 和 css中的选择器有区别吗？&lt;/h2&gt;&lt;p&gt;答：jQuery选择器支持CSS里的选择器，jQuery选择器可用来添加样式和添加相应的行为CSS 中的选择器是只能添加相应的样式&lt;/p&gt;
&lt;h2 id=&quot;7-你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;a href=&quot;#7-你觉得jquery中的选择器有什么优势？&quot; class=&quot;headerlink&quot; title=&quot;7 你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;/a&gt;7 你觉得jquery中的选择器有什么优势？&lt;/h2&gt;&lt;p&gt;答：简单的写法 $(‘ID’) 来代替 document.getElementById()函数支持CSS1 到&lt;a href=&quot;http://lib.csdn.net/base/css3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt; 选择器完善的处理机制(就算写错了id也不会报错)&lt;/p&gt;
&lt;h2 id=&quot;8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;a href=&quot;#8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot; class=&quot;headerlink&quot; title=&quot;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;/a&gt;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&lt;/h2&gt;&lt;p&gt;答: 1 选择器中含有”.”,”#”,”[“ 等特殊字符的时候需要进行转译2 属性选择器的引号问题3 选择器中含有空格的注意事项&lt;/p&gt;
&lt;h2 id=&quot;9-jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;a href=&quot;#9-jquery对象和dom对象是怎样转换的？&quot; class=&quot;headerlink&quot; title=&quot;9 jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;/a&gt;9 jquery对象和dom对象是怎样转换的？&lt;/h2&gt;&lt;p&gt;答 ：jquery转DOM对象:jQuery 对象是一个数组对象，可以通过[index]的丰富得到相应的DOM对象还可以通过get[index]去得到相应的DOM对象。DOM对象转jQuery对象:$(DOM对象)&lt;/p&gt;
&lt;h2 id=&quot;10-你是如何使用jquery中的ajax的？&quot;&gt;&lt;a href=&quot;#10-你是如何使用jquery中的ajax的？&quot; class=&quot;headerlink&quot; title=&quot;10 你是如何使用jquery中的ajax的？&quot;&gt;&lt;/a&gt;10 你是如何使用jquery中的ajax的？&lt;/h2&gt;&lt;p&gt;答: 如果是一些常规的ajax程序的话，使用load(),$.get(),$.post(),就可以搞定了，一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理)及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;11-你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;a href=&quot;#11-你觉得jquery中的ajax好用吗，为什么？&quot; class=&quot;headerlink&quot; title=&quot;11 你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;/a&gt;11 你觉得jquery中的ajax好用吗，为什么？&lt;/h2&gt;&lt;p&gt;答: 好用的。 因为jQuery提供了一些日常开发中夙瑶的快捷操作，例 load，ajax，get，post等等，所以使用jQuery开发ajax将变得极其简单，我们就可以集中精力在业务和用户的体验上，不需要去理会那些繁琐的XMLHttpRequest对象了。&lt;/p&gt;
&lt;h2 id=&quot;12-jquery中-get-提交和-post-提交有区别吗？&quot;&gt;&lt;a href=&quot;#12-jquery中-get-提交和-post-提交有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;12 jquery中$.get()提交和$.post()提交有区别吗？&quot;&gt;&lt;/a&gt;12 jquery中$.get()提交和$.post()提交有区别吗？&lt;/h2&gt;&lt;p&gt;答: 1 $.get() 方法使用GET方法来进行异步请求的。$.post() 方法使用POST方法来进行异步请求的。2 get请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给Web服务器的，这种传递是对用户不可见的。3 get方式传输的数据大小不能超过2KB 而POST要大的多4 GET 方式请求的数据会被浏览器缓存起来，因此有安全问题。&lt;/p&gt;
&lt;h2 id=&quot;13-jquery中的load方法一般怎么用的？&quot;&gt;&lt;a href=&quot;#13-jquery中的load方法一般怎么用的？&quot; class=&quot;headerlink&quot; title=&quot;13 jquery中的load方法一般怎么用的？&quot;&gt;&lt;/a&gt;13 jquery中的load方法一般怎么用的？&lt;/h2&gt;&lt;p&gt;答：load方法一般在 载入远程HTML 代码并插入到DOM中的时候用，通常用来从Web服务器上获取静态的数据文件。如果要传递参数的话，可以使用$.get() 或 $.post()。&lt;/p&gt;
&lt;h2 id=&quot;14-在jquery中你是如何去操作样式的？&quot;&gt;&lt;a href=&quot;#14-在jquery中你是如何去操作样式的？&quot; class=&quot;headerlink&quot; title=&quot;14 在jquery中你是如何去操作样式的？&quot;&gt;&lt;/a&gt;14 在jquery中你是如何去操作样式的？&lt;/h2&gt;&lt;p&gt;答: addClass() 来追加样式 ，removeClass() 来删除样式，toggle() 来切换样式&lt;/p&gt;
&lt;h2 id=&quot;15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;a href=&quot;#15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot; class=&quot;headerlink&quot; title=&quot;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;/a&gt;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&lt;/h2&gt;&lt;p&gt;答: 首先去装载文档，在页面家在完毕后，浏览器会通过javascript 为DOM元素添加事件。&lt;/p&gt;
&lt;h2 id=&quot;16-你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;a href=&quot;#16-你使用过jquery中的动画吗，是怎样用的？&quot; class=&quot;headerlink&quot; title=&quot;16 你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;/a&gt;16 你使用过jquery中的动画吗，是怎样用的？&lt;/h2&gt;&lt;p&gt;答:使用过。hide() 和 show() 同时修改多个样式属性。像高度，宽度，不透明度。 fadeIn() 和fadeOut() fadeTo() 只改变不透明度slideUp() 和 slideDown() slideToggle() 只改变高度animate() 属于自定义动画的方法.&lt;/p&gt;
&lt;h2 id=&quot;17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot;&gt;&lt;a href=&quot;#17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot; class=&quot;headerlink&quot; title=&quot;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&quot;&gt;&lt;/a&gt;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&lt;/h2&gt;&lt;h2 id=&quot;18-你一般用什么去提交数据，为什么？&quot;&gt;&lt;a href=&quot;#18-你一般用什么去提交数据，为什么？&quot; class=&quot;headerlink&quot; title=&quot;18 你一般用什么去提交数据，为什么？&quot;&gt;&lt;/a&gt;18 你一般用什么去提交数据，为什么？&lt;/h2&gt;&lt;p&gt;答:一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;19-在jquery中引入css有几种方式？&quot;&gt;&lt;a href=&quot;#19-在jquery中引入css有几种方式？&quot; class=&quot;headerlink&quot; title=&quot;19 在jquery中引入css有几种方式？&quot;&gt;&lt;/a&gt;19 在jquery中引入css有几种方式？&lt;/h2&gt;&lt;p&gt;答:四种 行内式，内嵌式，导入式，链接式&lt;/p&gt;
&lt;h2 id=&quot;20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;a href=&quot;#20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;/a&gt;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&lt;/h2&gt;&lt;p&gt;答:append(),appendTo(),prepend(),prependTo(),after(),insertAfter()，before(),insertBefore() 大致可以分为 内部追加和外部追加append() 表式向每个元素内部追加内容。appendTo()表示 讲所有的元素追加到指定的元素中。例$(A)appendTo(B) 是将A追加到B中下面的方法解释类似。&lt;/p&gt;
&lt;h2 id=&quot;21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;a href=&quot;#21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot; class=&quot;headerlink&quot; title=&quot;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;/a&gt;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&lt;/h2&gt;&lt;p&gt;答: wrapAll(),wrap(), wrapInner() 需要在文档中插入额外的结构化标记的时候可以使用这些包裹的方法应为它不会帛画原始文档的语义&lt;/p&gt;
&lt;h2 id=&quot;22-jquery中如何来获取或和设置属性？&quot;&gt;&lt;a href=&quot;#22-jquery中如何来获取或和设置属性？&quot; class=&quot;headerlink&quot; title=&quot;22 jquery中如何来获取或和设置属性？&quot;&gt;&lt;/a&gt;22 jquery中如何来获取或和设置属性？&lt;/h2&gt;&lt;p&gt;jQuery中可以用attr()方法来获取和设置元素属性removeAttr() 方法来删除元素属性&lt;/p&gt;
&lt;h2 id=&quot;23-如何来设置和获取HTML-和文本的值？&quot;&gt;&lt;a href=&quot;#23-如何来设置和获取HTML-和文本的值？&quot; class=&quot;headerlink&quot; title=&quot;23 如何来设置和获取HTML 和文本的值？&quot;&gt;&lt;/a&gt;23 如何来设置和获取HTML 和文本的值？&lt;/h2&gt;&lt;p&gt;答：html()方法 类似于innerHTML属性 可以用来读取或者设置某个元素中的HTML内容注意：html() 可以用于xhtml文档 不能用于xml文档text() 类似于innerText属性 可以用来读取或设置某个元素中文本内容。val() 可以用来设置和获取元素的值&lt;/p&gt;
&lt;h2 id=&quot;24-你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;a href=&quot;#24-你jquery中有哪些方法可以遍历节点？&quot; class=&quot;headerlink&quot; title=&quot;24 你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;/a&gt;24 你jquery中有哪些方法可以遍历节点？&lt;/h2&gt;&lt;p&gt;答 ：children() 取得匹配元素的子元素集合,只考虑子元素不考虑后代元素 next() 取得匹配元素后面紧邻的同辈元素prev() 取得匹配元素前面紧邻的同辈元素siblings() 取得匹配元素前后的所有同辈元素closest() 取得最近的匹配元素find() 取得匹配元素中的元素集合 包括子代和后代&lt;/p&gt;
&lt;h2 id=&quot;25-子元素选择器-和后代选择器元素有什么区别？&quot;&gt;&lt;a href=&quot;#25-子元素选择器-和后代选择器元素有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;25 子元素选择器 和后代选择器元素有什么区别？&quot;&gt;&lt;/a&gt;25 子元素选择器 和后代选择器元素有什么区别？&lt;/h2&gt;&lt;p&gt;答:子代元素是找子节点下的所有元素,后代元素是找子节点或子节点的子节点中的元素&lt;/p&gt;
&lt;h2 id=&quot;26-在jquery中可以替换节点吗？&quot;&gt;&lt;a href=&quot;#26-在jquery中可以替换节点吗？&quot; class=&quot;headerlink&quot; title=&quot;26 在jquery中可以替换节点吗？&quot;&gt;&lt;/a&gt;26 在jquery中可以替换节点吗？&lt;/h2&gt;&lt;p&gt;答：可以 在jQuery中有两者替换节点的方式 replaceWith() 和 replaceAll()例如在&lt;/p&gt;&lt;p title=&quot;hao are you&quot;&gt;hao are you&lt;/p&gt;替换成&lt;strong&gt;I am fine&lt;/strong&gt;$(‘p’).replaceWith(‘&lt;strong&gt;I am fine&lt;/strong&gt;‘); replaceAll 与replaceWith的用法前后调换一下即可。&lt;em&gt;**&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;27-你觉得beforeSend方法有什么用？&quot;&gt;&lt;a href=&quot;#27-你觉得beforeSend方法有什么用？&quot; class=&quot;headerlink&quot; title=&quot;27 你觉得beforeSend方法有什么用？&quot;&gt;&lt;/a&gt;27 你觉得beforeSend方法有什么用？&lt;/h2&gt;&lt;p&gt;答：发送请求前可以修改XMLHttpRequest对象的函数，在beforeSend中如果返回false 可以取消本次的Ajax请求。XMLHttpRequest对象是唯一的参数所以在这个方法里可以做验证&lt;/p&gt;
&lt;h2 id=&quot;28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot;&gt;&lt;a href=&quot;#28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot; class=&quot;headerlink&quot; title=&quot;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&quot;&gt;&lt;/a&gt;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&lt;/h2&gt;&lt;p&gt;答: $(‘prev~div’) 只能选择’#prev’元素后面的同辈&lt;div&gt;元素而siblings()方法与前后的文职无关，只要是同辈节点就都能匹配。&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;29-你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;a href=&quot;#29-你在ajax中使用过JSON吗，你是如何用的？&quot; class=&quot;headerlink&quot; title=&quot;29 你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;/a&gt;29 你在ajax中使用过JSON吗，你是如何用的？&lt;/h2&gt;&lt;p&gt;答:使用过，在$.getJSON() 方法的时候就是。因为 $.getJSON() 就是用于加载JSON文件的&lt;/p&gt;
&lt;h2 id=&quot;30-有哪些查询节点的选择器？&quot;&gt;&lt;a href=&quot;#30-有哪些查询节点的选择器？&quot; class=&quot;headerlink&quot; title=&quot;30 有哪些查询节点的选择器？&quot;&gt;&lt;/a&gt;30 有哪些查询节点的选择器？&lt;/h2&gt;&lt;p&gt;答：我在公司使用过 :first 查询第一个，:last 查询最后一个，:odd查询奇数但是索引从0开始:even 查询偶数，:eq(index)查询相等的 ,:gt(index)查询大于index的 ,:lt查询小于index:header 选取所有的标题等&lt;/p&gt;
&lt;h2 id=&quot;31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot;&gt;&lt;a href=&quot;#31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot; class=&quot;headerlink&quot; title=&quot;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&quot;&gt;&lt;/a&gt;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&lt;/h2&gt;&lt;p&gt;答:能。 使用nextAll() 和使用$(‘prev~siblindgs’) 是一样的&lt;/p&gt;
&lt;h2 id=&quot;32-jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;a href=&quot;#32-jQuery中有几种方法可以来设置和获取样式&quot; class=&quot;headerlink&quot; title=&quot;32 jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;/a&gt;32 jQuery中有几种方法可以来设置和获取样式&lt;/h2&gt;&lt;p&gt;答 ：addClass() 方法，attr() 方法&lt;/p&gt;
&lt;h2 id=&quot;33-document-ready-方法和window-onload有什么区别？&quot;&gt;&lt;a href=&quot;#33-document-ready-方法和window-onload有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;33 $(document).ready()方法和window.onload有什么区别？&quot;&gt;&lt;/a&gt;33 $(document).ready()方法和window.onload有什么区别？&lt;/h2&gt;&lt;p&gt;答: 两个方法有相似的功能，但是在实行时机方面是有区别的。 1window.onload方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。2 $(document).ready() 方法可以在DOM载入就绪时就对其进行操纵，并调用执行绑定的函数。&lt;/p&gt;
&lt;h2 id=&quot;34-jQuery是如何处理缓存的？&quot;&gt;&lt;a href=&quot;#34-jQuery是如何处理缓存的？&quot; class=&quot;headerlink&quot; title=&quot;34 jQuery是如何处理缓存的？&quot;&gt;&lt;/a&gt;34 jQuery是如何处理缓存的？&lt;/h2&gt;&lt;p&gt;答 ：要处理缓存就是禁用缓存.1 通过$.post() 方法来获取数据，那么默认就是禁用缓存的。2 通过$.get()方法 来获取数据，可以通过设置时间戳来避免缓存。可以在URL后面加上+(+new Date)例 $.get(‘ajax.xml?’+(+new Date),function () { //内容 }); 3 通过$.ajax 方法来获取数据，只要设置cache:false即可。&lt;/p&gt;
&lt;h2 id=&quot;35-getScript-方法-和-getJson-方法有什么区别？&quot;&gt;&lt;a href=&quot;#35-getScript-方法-和-getJson-方法有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&quot;&gt;&lt;/a&gt;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&lt;/h2&gt;&lt;p&gt;答: 1 $.getScript() 方法可以直接加载.js文件，并且不需要对javascript文件进行处理，javascript文件会自动执行。2 $.getJson() 是用于加载JSON 文件的 ，用法和$.getScript()&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML-amp-CSS&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML&amp;amp;CSS&quot;&gt;&lt;/a&gt;HTML&amp;amp;CSS&lt;/h1&gt;&lt;h2 id=&quot;常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot;&gt;&lt;a href=&quot;#常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot; class=&quot;headerlink&quot; title=&quot;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&quot;&gt;&lt;/a&gt;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;行内元素(inline)：a b span input select strong samll&lt;/li&gt;
&lt;li&gt;块级元素(block)：p div ul ol li dl dt dd h1 table form center&lt;/li&gt;
&lt;li&gt;行内块级元素(inline-block):img（可以设置宽高，多个元素占一行，可设置所有margin和padding）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见的空元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br/&amp;gt; &amp;lt;hr/&amp;gt;  &amp;lt;link/&amp;gt; &amp;lt;meta/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;行内元素与块级元素的区别：&lt;/li&gt;
&lt;li&gt;行内元素一行占好多个，块级元素独占一行&lt;/li&gt;
&lt;li&gt;设置宽度width ,height 无效，可以通过line-height来设置。&lt;/li&gt;
&lt;li&gt;设置左右margin/padding有效，上下margin/padding无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;margin&quot;&gt;&lt;a href=&quot;#margin&quot; class=&quot;headerlink&quot; title=&quot;margin&quot;&gt;&lt;/a&gt;margin&lt;/h2&gt;&lt;p&gt;margin :上   右   下   左&lt;br&gt;margin: 上  右  下&lt;br&gt;margin : 上下  左右&lt;/p&gt;
&lt;h2 id=&quot;居中的常见方法-水平，竖直-5&quot;&gt;&lt;a href=&quot;#居中的常见方法-水平，竖直-5&quot; class=&quot;headerlink&quot; title=&quot;居中的常见方法(水平，竖直) 5%&quot;&gt;&lt;/a&gt;居中的常见方法(水平，竖直) 5%&lt;/h2&gt;&lt;h3 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中&quot;&gt;&lt;/a&gt;1.水平居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自身宽高，块级元素&lt;/li&gt;
&lt;li&gt;margin：0 auto; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-水平居中-父元素-text-align：center；&quot;&gt;&lt;a href=&quot;#2-水平居中-父元素-text-align：center；&quot; class=&quot;headerlink&quot; title=&quot;2.水平居中 父元素 text-align：center；&quot;&gt;&lt;/a&gt;2.水平居中 父元素 text-align：center；&lt;/h3&gt;&lt;p&gt;子元素的display：inline-block；在不受float影响下进行&lt;br&gt;是在父元素上添加：text-align：center；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;水平垂直居中（一）&quot;&gt;&lt;a href=&quot;#水平垂直居中（一）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（一）&quot;&gt;&lt;/a&gt;水平垂直居中（一）&lt;/h4&gt;&lt;p&gt; 自身宽高,position,left,top ,margin-left,top为自身宽高负值一半&lt;br&gt;(left,top,right,bottom使用要，在position ：relative/absolute)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-top: -75px;/*自身 高度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-left: -50px;/*自身 宽度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;a href=&quot;#水平垂直居中（三）绝对定位和transfrom&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;/a&gt;水平垂直居中（三）绝对定位和transfrom&lt;/h3&gt;&lt;p&gt;不需要知道居中元素的宽高&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: translate(-50%,-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（二）&quot;&gt;&lt;a href=&quot;#水平垂直居中（二）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（二）&quot;&gt;&lt;/a&gt;水平垂直居中（二）&lt;/h3&gt;&lt;p&gt;自身宽高，position,定位上下左右为0，margin:atuo（auto等分其余空间）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bottom: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;a href=&quot;#水平垂直居中（四）diplay：table-cell&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;/a&gt;水平垂直居中（四）diplay：table-cell&lt;/h3&gt;&lt;p&gt;其实这个就是把其变成表格样式，再利用表格的样式来进行居中，很方便&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vertical-align: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /*margin: 0 auto;*/  这个也行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;a href=&quot;#水平垂直居中（五）flexBox居中&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;/a&gt;水平垂直居中（五）flexBox居中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            justify-content: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            align-items:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7552ce07c88&quot;&gt;http://www.jianshu.com/p/a7552ce07c88&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的垂直居中的方式&quot;&gt;&lt;a href=&quot;#常见的垂直居中的方式&quot; class=&quot;headerlink&quot; title=&quot;常见的垂直居中的方式&quot;&gt;&lt;/a&gt;常见的垂直居中的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vertical-align:middle(table)&lt;/li&gt;
&lt;li&gt;translateY(-50%)&lt;br&gt;-webkit-transform: translateY(-50%);&lt;/li&gt;
&lt;li&gt;css3 flex&lt;br&gt;不定宽高水平垂直居中&lt;br&gt;align-items:center;//子元素垂直居中&lt;br&gt;justify-content:center;//子元素水平居中&lt;br&gt;display:-webkit-flex;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;a href=&quot;#如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot; class=&quot;headerlink&quot; title=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;/a&gt;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一行文本垂直居中：height = line-height&lt;/li&gt;
&lt;li&gt;多行文本固定高度垂直居中：vertical-align（兼容IE7及IE7）&lt;br&gt;因为想使用vertical-align:middle，就要模拟表格：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父元素:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table-cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vertical-align:middle;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多行文本垂直居中：vertical-align+（兼容IE6以上）&lt;br&gt;在IE6中对父元素进行定位后，如果再对子元素进行百分比计算时，计算的基础似乎是有继承性的（使用百分比计算的基础将不再是该元素的高度，而从父元素继承来的定位高度）。&lt;br&gt;父亲元素的外层： display:table;&lt;br&gt;父亲：top:50%&lt;br&gt;孩子：top:-50%&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.wrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow:hidden;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父亲元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subwrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vertical-align:middle;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table-cell;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:absolute;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素 ：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.content&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:-50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;flex弹性布局：&quot;&gt;&lt;a href=&quot;#flex弹性布局：&quot; class=&quot;headerlink&quot; title=&quot;flex弹性布局：&quot;&gt;&lt;/a&gt;flex弹性布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/li&gt;
&lt;li&gt;父块元素：display: flex;&lt;/li&gt;
&lt;li&gt;父行级元素：display: inline-flex;&lt;/li&gt;
&lt;li&gt;设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/li&gt;
&lt;li&gt;具体描述：&lt;br&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;ul&gt;
&lt;li&gt;父亲容器属性：&lt;ul&gt;
&lt;li&gt;flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li&gt;justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/li&gt;
&lt;li&gt;align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;&lt;/li&gt;
&lt;li&gt;孩子項目屬性：&lt;ul&gt;
&lt;li&gt;order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/li&gt;
&lt;li&gt;flex-grow：设置或检索弹性盒的扩展比率。根据弹性盒子元素所设值作为比率来分配剩余空间。&lt;/li&gt;
&lt;li&gt;flex-shrink：属性定义了项目的缩小比例，默认为1，如果没有显示定义该属性，将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flex-basis：设置或检索弹性盒伸缩基准值，如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间。&lt;ul&gt;
&lt;li&gt;align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【问题】：&lt;br&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;/p&gt;
&lt;p&gt;【答案】：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex 是 flex-grow、flex-shrink、flex-basis的缩写。故其取值可以考虑以下情况：&lt;/li&gt;
&lt;li&gt;flex 的默认值是 0 1 auto&lt;/li&gt;
&lt;li&gt;flex : none，则计算值为 0 0 auto&lt;/li&gt;
&lt;li&gt;flex : auto，则计算值为 1 1 auto&lt;/li&gt;
&lt;li&gt;flex :非负值，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%&lt;/li&gt;
&lt;li&gt;flex 长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1&lt;/li&gt;
&lt;li&gt;flex : 非负值　非负值，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浮动元素会脱离文档流并向左/向右浮动（不在正常位置，并且他后面的不浮动元素会占他的位置），浮动直到碰到父元素或者另一个浮动元素。&lt;/li&gt;
&lt;li&gt;浮动不会影响同级别普通元素的布局，同时也存在盖住普通元素的风险。&lt;/li&gt;
&lt;li&gt;clear属性不允许被清除浮动的元素的左边/右边挨着浮动元素，底层原理是在被清除浮动的元素上边或者下边添加足够的清除空间。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a0f4eff0c7cd5c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot;&gt;&lt;a href=&quot;#说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot; class=&quot;headerlink&quot; title=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&quot;&gt;&lt;/a&gt;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&lt;/h2&gt;&lt;p&gt;当一个内层元素是浮动的时候，如果没有关闭浮动时，其父元素也就不会再包含这个浮动的内层元素，因为此时浮动元素已经脱离了文档流。也就是为什么外层不能被撑开了！&lt;br&gt;（2）：边框不能撑开 （3）：margin ,padding设置值不能正确显示（1）：背景不能显示&lt;/p&gt;
&lt;h3 id=&quot;方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot;&gt;&lt;a href=&quot;#方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot; class=&quot;headerlink&quot; title=&quot;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&quot;&gt;&lt;/a&gt;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div class=&amp;quot;outer&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div1&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div2&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div3&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clear&amp;#123;clear:both; height: 0; line-height: 0; font-size: 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二：触发BFC&quot;&gt;&lt;a href=&quot;#方法二：触发BFC&quot; class=&quot;headerlink&quot; title=&quot;方法二：触发BFC&quot;&gt;&lt;/a&gt;方法二：触发BFC&lt;/h3&gt;&lt;p&gt;父级div定义 overflow: hidden（hidden可以兼容IE，就是对seo不太友好,auto不可以兼容IE）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父亲 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.over-flow&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow: hidden; // 是在处理兼容性问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;###方法三： clearfix:before,after&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 全浏览器通用的clearfix方案【推荐】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 同时加入:before以解决现代浏览器上边距折叠的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: table;//block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &amp;quot; &amp;quot;;// &amp;apos;.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *zoom: 1;//引入了zoom以支持IE6/7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/leipeng/blog/221125&quot;&gt;https://my.oschina.net/leipeng/blog/221125&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/5138706046b1&quot;&gt;http://www.jianshu.com/p/5138706046b1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/09bd5873bed4&quot;&gt;http://www.jianshu.com/p/09bd5873bed4&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h2&gt;&lt;p&gt;BFC可以做:BFC清除浮动，BFC解决垂直边距折叠&lt;br&gt;BFC全称是块状格式化上下文，它是按照块级盒子布局的。我们了解他的特征、触发方式、常见使用场景这些就够了。&lt;/p&gt;
&lt;p&gt;BFC的主要特征&lt;/p&gt;
&lt;p&gt;✦ BFC容器是一个隔离的容器，和其他元素互不干扰；所以我们可以用触发两个元素的BFC来解决垂直边距折叠问题。&lt;br&gt;✦ BFC可以包含浮动；通常用来解决浮动父元素高度坍塌的问题。&lt;/p&gt;
&lt;p&gt;其中，BFC清除浮动就是用的“包含浮动”这条特性。&lt;br&gt;那么，怎样才能触发BFC呢？&lt;/p&gt;
&lt;p&gt;BFC的触发方式&lt;/p&gt;
&lt;p&gt;我们可以给父元素添加以下属性来触发BFC(一下任意一条就可以)：&lt;br&gt;✦ float 为 left | right(不为none)&lt;br&gt;✦ overflow 为 hidden | auto | scorll(不为visible   )&lt;br&gt;✦ display 为 table-cell | table-caption | inline-block | flex | inline-flex&lt;br&gt;✦ position 为 absolute | fixed&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;a href=&quot;#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;/a&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;/h2&gt;&lt;p&gt;每个HTML元素都是长方形盒子。&lt;br&gt;  （1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;  （2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;  （3）区  别：&lt;br&gt; 标准盒模型的width为内容区的width，盒子总宽度：width+padding+border+margin&lt;br&gt; IE的width是内容区宽度+padding+border，盒子总宽度：width+margin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fc97e71155223a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-502ce3aaecc4b38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position-的几种值-，详细说明一下每种的区别-3&quot;&gt;&lt;a href=&quot;#position-的几种值-，详细说明一下每种的区别-3&quot; class=&quot;headerlink&quot; title=&quot;position 的几种值 ，详细说明一下每种的区别 3%&quot;&gt;&lt;/a&gt;position 的几种值 ，详细说明一下每种的区别 3%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;static    默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。&lt;/li&gt;
&lt;li&gt;relative    位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。&lt;/li&gt;
&lt;li&gt;absolute    位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。&lt;/li&gt;
&lt;li&gt;fixed    位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;a href=&quot;#如果position设置成absolute属性该元素的display属性会变成什么&quot; class=&quot;headerlink&quot; title=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;/a&gt;如果position设置成absolute属性该元素的display属性会变成什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;position: absolute,float会隐式的改变display类型， 不论之前是什么类型的元素（ display: none除外），&lt;ul&gt;
&lt;li&gt;只要设置了position: absolute或float， 都会让元素以display: inline - block的方式显示， 可以设置长宽，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就算是显示的设置display: inline或display: block， 仍然无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display-有几个值-3&quot;&gt;&lt;a href=&quot;#display-有几个值-3&quot; class=&quot;headerlink&quot; title=&quot;display 有几个值  3%&quot;&gt;&lt;/a&gt;display 有几个值  3%&lt;/h2&gt;&lt;p&gt;每个元素都有display属性，确定该元素的类型，&lt;br&gt;每个元素都有默认的display值，&lt;br&gt;如div的display默认值为“block”，则为“块级”元素；&lt;br&gt;span默认display属性值为“inline”，是“行内”元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-0a9d9c4eb7fc996e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伪类-伪元素&quot;&gt;&lt;a href=&quot;#伪类-伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h2&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些？&quot; class=&quot;headerlink&quot; title=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;/a&gt;CSS3新增伪类有那些？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;举例：
  p:first-of-type    选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:last-of-type    选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-of-type    选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-child        选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。
  p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。

 inptut
    :enabled          
   :disabled         控制表单控件的禁用状态。
  :checked        单选框或复选框被选中。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;a href=&quot;#CSS选择器有哪些？哪些属性可以继承？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;/a&gt;CSS选择器有哪些？哪些属性可以继承？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; 1.id选择器（ # myid）
2.类选择器（.myclassname）
3.标签选择器（div, h1, p）
4.相邻选择器（h1 + p）
5.子选择器（ul &amp;gt; li）
6.后代选择器（li a）
7.通配符选择器（ * ）
8.属性选择器（a[rel = &amp;quot;external&amp;quot;]）
9.伪类选择器（a:hover, li:nth-child）
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可继承的样式： font-size font-family color, UL LI DL DD DT;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不可继承的样式：border padding margin width height ;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;a href=&quot;#CSS优先级算法如何计算？&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;/a&gt;CSS优先级算法如何计算？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先级就近原则，同权重情况下样式定义最近者为准;&lt;/li&gt;
&lt;li&gt;载入样式以最后载入的定位为准;&lt;h3 id=&quot;同权重&quot;&gt;&lt;a href=&quot;#同权重&quot; class=&quot;headerlink&quot; title=&quot;同权重&quot;&gt;&lt;/a&gt;同权重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、 位于 &amp;lt; head / &amp;gt; 标签里的 &amp;lt; style / &amp;gt; 中所定义的CSS拥有最高级的优先权。　　&lt;/li&gt;
&lt;li&gt;2、 第二级的优先属性由位于 &amp;lt; style / &amp;gt; 标签中的 @import 引入样式表所定义。　　&lt;/li&gt;
&lt;li&gt;3、 第三级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表定义。&lt;/li&gt;
&lt;li&gt;4、 第四级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表内的 @import 导入样式表定义。　　&lt;/li&gt;
&lt;li&gt;5、 第五级优先的样式有用户设定。　　 最低级的优先权由浏览器默认。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权重的进制是256&lt;/p&gt;
&lt;h3 id=&quot;属性选择器的权重问题&quot;&gt;&lt;a href=&quot;#属性选择器的权重问题&quot; class=&quot;headerlink&quot; title=&quot;属性选择器的权重问题:&quot;&gt;&lt;/a&gt;属性选择器的权重问题:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// !important ---------&amp;gt;   无穷
// 行间样式-------------&amp;gt;   1000
// id------------------&amp;gt;   100
// class|属性|伪类------&amp;gt;   10
// 标签|伪元素 ---------&amp;gt;    1
// 通配符---------------&amp;gt;   0
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面导入样式时，使用link和-import有什么区别？&quot;&gt;&lt;a href=&quot;#页面导入样式时，使用link和-import有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;页面导入样式时，使用link和@import有什么区别？&quot;&gt;&lt;/a&gt;页面导入样式时，使用link和@import有什么区别？&lt;/h2&gt;&lt;p&gt;1 : 属于link属于xml 标签，除了加载css以外，还能定义rss和rel等 。@import是css提供的，只能用于加载css&lt;br&gt;2 :页面加载页面在加载时候，link同时被加载；而@import引用的css等页面加载完毕再加载&lt;br&gt;3：兼容性@import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;&lt;br&gt;4：link方式的样式权重高于@import的权重。&lt;br&gt;5：使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。&lt;br&gt;6：. 最后一个很有意思， @import url有最大次数的限制， IE6最多引入31次， firefox并没有发现&lt;br&gt;7： @import的优点： 多个样式表导入一个样式表中， 页面只需要引入一个即可&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引入css的几种方式-2&quot;&gt;&lt;a href=&quot;#引入css的几种方式-2&quot; class=&quot;headerlink&quot; title=&quot;引入css的几种方式 2%&quot;&gt;&lt;/a&gt;引入css的几种方式 2%&lt;/h2&gt;&lt;h3 id=&quot;1-行内样式&quot;&gt;&lt;a href=&quot;#1-行内样式&quot; class=&quot;headerlink&quot; title=&quot;1.行内样式&quot;&gt;&lt;/a&gt;1.行内样式&lt;/h3&gt;&lt;p&gt;最直接最简单的一种，直接对HTML标签使用style=””，例如：&lt;/p&gt;
&lt;p style=&quot;color:#F00; &quot;&gt;&lt;/p&gt;

&lt;p&gt;缺点：HTML页面不纯净，文件体积大，不利于蜘蛛爬行，后期维护不方便。&lt;/p&gt;
&lt;h3 id=&quot;2-内嵌样式&quot;&gt;&lt;a href=&quot;#2-内嵌样式&quot; class=&quot;headerlink&quot; title=&quot;2.内嵌样式&quot;&gt;&lt;/a&gt;2.内嵌样式&lt;/h3&gt;&lt;p&gt;内嵌样式就是将CSS代码写在&lt;head&gt;&lt;/head&gt;之间，并且用&lt;style&gt;&lt;/style&gt;进行声明，例如：&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;

body,div,a,img,p{margin:0; padding:0;}

&lt;/style&gt;

&lt;p&gt;优缺点：页面使用公共CSS代码，也是每个页面都要定义的，如果一个网站有很多页面，每个文件都会变大，后期维护难度也大，如果文件很少，CSS代码也不多，这种样式还是很不错的。&lt;/p&gt;
&lt;h3 id=&quot;3-链接样式&quot;&gt;&lt;a href=&quot;#3-链接样式&quot; class=&quot;headerlink&quot; title=&quot;3.链接样式&quot;&gt;&lt;/a&gt;3.链接样式&lt;/h3&gt;&lt;p&gt;链接样式是使用频率最高，最实用的样式，只需要在&lt;head&gt;&lt;/head&gt;之间加上&lt;link…/&gt;就可以了，如下：&lt;/p&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;

&lt;p&gt;优缺点：实现了页面框架代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便&lt;/p&gt;
&lt;h3 id=&quot;4-导入样式（不建议使用）&quot;&gt;&lt;a href=&quot;#4-导入样式（不建议使用）&quot; class=&quot;headerlink&quot; title=&quot;4.导入样式（不建议使用）&quot;&gt;&lt;/a&gt;4.导入样式（不建议使用）&lt;/h3&gt;&lt;p&gt;导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@import在html中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&quot;text/css&quot;&gt;
@import url(style.css);
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;@import在CSS中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@import url(style.css);&lt;/p&gt;
&lt;h3 id=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;a href=&quot;#四种CSS引入方式的优先级&quot; class=&quot;headerlink&quot; title=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;/a&gt;四种CSS引入方式的优先级&lt;/h3&gt;&lt;p&gt;1.就近原则&lt;br&gt;2.理论上：行内&amp;gt;内嵌&amp;gt;链接&amp;gt;导入&lt;br&gt;3.实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;锚点-1&quot;&gt;&lt;a href=&quot;#锚点-1&quot; class=&quot;headerlink&quot; title=&quot;锚点 1%&quot;&gt;&lt;/a&gt;锚点 1%&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ms</title>
    <link href="http://carryguan.com/2016/06/27/ms/"/>
    <id>http://carryguan.com/2016/06/27/ms/</id>
    <published>2016-06-27T05:28:25.000Z</published>
    <updated>2017-09-18T01:58:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;HTML-amp-CSS&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML&amp;amp;CSS&quot;&gt;&lt;/a&gt;HTML&amp;amp;CSS&lt;/h1&gt;&lt;h2 id=&quot;常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot;&gt;&lt;a href=&quot;#常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot; class=&quot;headerlink&quot; title=&quot;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&quot;&gt;&lt;/a&gt;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;行内元素(inline)：a b span input select strong samll&lt;/li&gt;
&lt;li&gt;块级元素(block)：p div ul ol li dl dt dd h1 table form center&lt;/li&gt;
&lt;li&gt;行内块级元素(inline-block):img（可以设置宽高，多个元素占一行，可设置所有margin和padding）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见的空元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br/&amp;gt; &amp;lt;hr/&amp;gt;  &amp;lt;link/&amp;gt; &amp;lt;meta/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;行内元素与块级元素的区别：&lt;/li&gt;
&lt;li&gt;行内元素一行占好多个，块级元素独占一行&lt;/li&gt;
&lt;li&gt;设置宽度width ,height 无效，可以通过line-height来设置。&lt;/li&gt;
&lt;li&gt;设置左右margin/padding有效，上下margin/padding无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;margin&quot;&gt;&lt;a href=&quot;#margin&quot; class=&quot;headerlink&quot; title=&quot;margin&quot;&gt;&lt;/a&gt;margin&lt;/h2&gt;&lt;p&gt;margin :上   右   下   左&lt;br&gt;margin: 上  右  下&lt;br&gt;margin : 上下  左右&lt;/p&gt;
&lt;h2 id=&quot;居中的常见方法-水平，竖直-5&quot;&gt;&lt;a href=&quot;#居中的常见方法-水平，竖直-5&quot; class=&quot;headerlink&quot; title=&quot;居中的常见方法(水平，竖直) 5%&quot;&gt;&lt;/a&gt;居中的常见方法(水平，竖直) 5%&lt;/h2&gt;&lt;h3 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中&quot;&gt;&lt;/a&gt;1.水平居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自身宽高，块级元素&lt;/li&gt;
&lt;li&gt;margin：0 auto; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-水平居中-父元素-text-align：center；&quot;&gt;&lt;a href=&quot;#2-水平居中-父元素-text-align：center；&quot; class=&quot;headerlink&quot; title=&quot;2.水平居中 父元素 text-align：center；&quot;&gt;&lt;/a&gt;2.水平居中 父元素 text-align：center；&lt;/h3&gt;&lt;p&gt;子元素的display：inline-block；在不受float影响下进行&lt;br&gt;是在父元素上添加：text-align：center；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;水平垂直居中（一）&quot;&gt;&lt;a href=&quot;#水平垂直居中（一）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（一）&quot;&gt;&lt;/a&gt;水平垂直居中（一）&lt;/h4&gt;&lt;p&gt; 自身宽高,position,left,top ,margin-left,top为自身宽高负值一半&lt;br&gt;(left,top,right,bottom使用要，在position ：relative/absolute)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-top: -75px;/*自身 高度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-left: -50px;/*自身 宽度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;a href=&quot;#水平垂直居中（三）绝对定位和transfrom&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;/a&gt;水平垂直居中（三）绝对定位和transfrom&lt;/h3&gt;&lt;p&gt;不需要知道居中元素的宽高&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: translate(-50%,-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（二）&quot;&gt;&lt;a href=&quot;#水平垂直居中（二）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（二）&quot;&gt;&lt;/a&gt;水平垂直居中（二）&lt;/h3&gt;&lt;p&gt;自身宽高，position,定位上下左右为0，margin:atuo（auto等分其余空间）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bottom: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;a href=&quot;#水平垂直居中（四）diplay：table-cell&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;/a&gt;水平垂直居中（四）diplay：table-cell&lt;/h3&gt;&lt;p&gt;其实这个就是把其变成表格样式，再利用表格的样式来进行居中，很方便&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vertical-align: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /*margin: 0 auto;*/  这个也行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;a href=&quot;#水平垂直居中（五）flexBox居中&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;/a&gt;水平垂直居中（五）flexBox居中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            justify-content: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            align-items:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7552ce07c88&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/a7552ce07c88&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的垂直居中的方式&quot;&gt;&lt;a href=&quot;#常见的垂直居中的方式&quot; class=&quot;headerlink&quot; title=&quot;常见的垂直居中的方式&quot;&gt;&lt;/a&gt;常见的垂直居中的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vertical-align:middle(table)&lt;/li&gt;
&lt;li&gt;translateY(-50%)&lt;br&gt;-webkit-transform: translateY(-50%);&lt;/li&gt;
&lt;li&gt;css3 flex&lt;br&gt;不定宽高水平垂直居中&lt;br&gt;align-items:center;//子元素垂直居中&lt;br&gt;justify-content:center;//子元素水平居中&lt;br&gt;display:-webkit-flex;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;a href=&quot;#如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot; class=&quot;headerlink&quot; title=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;/a&gt;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一行文本垂直居中：height = line-height&lt;/li&gt;
&lt;li&gt;多行文本固定高度垂直居中：vertical-align（兼容IE7及IE7）&lt;br&gt;因为想使用vertical-align:middle，就要模拟表格：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父元素:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table-cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vertical-align:middle;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多行文本垂直居中：vertical-align+（兼容IE6以上）&lt;br&gt;在IE6中对父元素进行定位后，如果再对子元素进行百分比计算时，计算的基础似乎是有继承性的（使用百分比计算的基础将不再是该元素的高度，而从父元素继承来的定位高度）。&lt;br&gt;父亲元素的外层： display:table;&lt;br&gt;父亲：top:50%&lt;br&gt;孩子：top:-50%&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.wrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow:hidden;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父亲元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subwrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vertical-align:middle;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table-cell;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:absolute;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素 ：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.content&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:-50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;flex弹性布局：&quot;&gt;&lt;a href=&quot;#flex弹性布局：&quot; class=&quot;headerlink&quot; title=&quot;flex弹性布局：&quot;&gt;&lt;/a&gt;flex弹性布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/li&gt;
&lt;li&gt;父块元素：display: flex;&lt;/li&gt;
&lt;li&gt;父行级元素：display: inline-flex;&lt;/li&gt;
&lt;li&gt;设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/li&gt;
&lt;li&gt;具体描述：&lt;br&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;ul&gt;
&lt;li&gt;父亲容器属性：&lt;ul&gt;
&lt;li&gt;flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li&gt;justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/li&gt;
&lt;li&gt;align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;&lt;/li&gt;
&lt;li&gt;孩子項目屬性：&lt;ul&gt;
&lt;li&gt;order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/li&gt;
&lt;li&gt;flex-grow：设置或检索弹性盒的扩展比率。根据弹性盒子元素所设值作为比率来分配剩余空间。&lt;/li&gt;
&lt;li&gt;flex-shrink：属性定义了项目的缩小比例，默认为1，如果没有显示定义该属性，将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flex-basis：设置或检索弹性盒伸缩基准值，如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间。&lt;ul&gt;
&lt;li&gt;align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【问题】：&lt;br&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;/p&gt;
&lt;p&gt;【答案】：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex 是 flex-grow、flex-shrink、flex-basis的缩写。故其取值可以考虑以下情况：&lt;/li&gt;
&lt;li&gt;flex 的默认值是 0 1 auto&lt;/li&gt;
&lt;li&gt;flex : none，则计算值为 0 0 auto&lt;/li&gt;
&lt;li&gt;flex : auto，则计算值为 1 1 auto&lt;/li&gt;
&lt;li&gt;flex :非负值，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%&lt;/li&gt;
&lt;li&gt;flex 长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1&lt;/li&gt;
&lt;li&gt;flex : 非负值　非负值，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浮动元素会脱离文档流并向左/向右浮动（不在正常位置，并且他后面的不浮动元素会占他的位置），浮动直到碰到父元素或者另一个浮动元素。&lt;/li&gt;
&lt;li&gt;浮动不会影响同级别普通元素的布局，同时也存在盖住普通元素的风险。&lt;/li&gt;
&lt;li&gt;clear属性不允许被清除浮动的元素的左边/右边挨着浮动元素，底层原理是在被清除浮动的元素上边或者下边添加足够的清除空间。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a0f4eff0c7cd5c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot;&gt;&lt;a href=&quot;#说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot; class=&quot;headerlink&quot; title=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&quot;&gt;&lt;/a&gt;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&lt;/h2&gt;&lt;p&gt;当一个内层元素是浮动的时候，如果没有关闭浮动时，其父元素也就不会再包含这个浮动的内层元素，因为此时浮动元素已经脱离了文档流。也就是为什么外层不能被撑开了！&lt;br&gt;（2）：边框不能撑开 （3）：margin ,padding设置值不能正确显示（1）：背景不能显示&lt;/p&gt;
&lt;h3 id=&quot;方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot;&gt;&lt;a href=&quot;#方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot; class=&quot;headerlink&quot; title=&quot;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&quot;&gt;&lt;/a&gt;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div class=&amp;quot;outer&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div1&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div2&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div3&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clear&amp;#123;clear:both; height: 0; line-height: 0; font-size: 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二：触发BFC&quot;&gt;&lt;a href=&quot;#方法二：触发BFC&quot; class=&quot;headerlink&quot; title=&quot;方法二：触发BFC&quot;&gt;&lt;/a&gt;方法二：触发BFC&lt;/h3&gt;&lt;p&gt;父级div定义 overflow: hidden（hidden可以兼容IE，就是对seo不太友好,auto不可以兼容IE）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父亲 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.over-flow&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow: hidden; // 是在处理兼容性问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;###方法三： clearfix:before,after&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 全浏览器通用的clearfix方案【推荐】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 同时加入:before以解决现代浏览器上边距折叠的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: table;//block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &amp;quot; &amp;quot;;// &amp;apos;.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *zoom: 1;//引入了zoom以支持IE6/7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/leipeng/blog/221125&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://my.oschina.net/leipeng/blog/221125&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/5138706046b1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/5138706046b1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/09bd5873bed4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/09bd5873bed4&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h2&gt;&lt;p&gt;BFC可以做:BFC清除浮动，BFC解决垂直边距折叠&lt;br&gt;BFC全称是块状格式化上下文，它是按照块级盒子布局的。我们了解他的特征、触发方式、常见使用场景这些就够了。&lt;/p&gt;
&lt;p&gt;BFC的主要特征&lt;/p&gt;
&lt;p&gt;✦ BFC容器是一个隔离的容器，和其他元素互不干扰；所以我们可以用触发两个元素的BFC来解决垂直边距折叠问题。&lt;br&gt;✦ BFC可以包含浮动；通常用来解决浮动父元素高度坍塌的问题。&lt;/p&gt;
&lt;p&gt;其中，BFC清除浮动就是用的“包含浮动”这条特性。&lt;br&gt;那么，怎样才能触发BFC呢？&lt;/p&gt;
&lt;p&gt;BFC的触发方式&lt;/p&gt;
&lt;p&gt;我们可以给父元素添加以下属性来触发BFC(一下任意一条就可以)：&lt;br&gt;✦ float 为 left | right(不为none)&lt;br&gt;✦ overflow 为 hidden | auto | scorll(不为visible   )&lt;br&gt;✦ display 为 table-cell | table-caption | inline-block | flex | inline-flex&lt;br&gt;✦ position 为 absolute | fixed&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;a href=&quot;#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;/a&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;/h2&gt;&lt;p&gt;每个HTML元素都是长方形盒子。&lt;br&gt;  （1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;  （2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;  （3）区  别：&lt;br&gt; 标准盒模型的width为内容区的width，盒子总宽度：width+padding+border+margin&lt;br&gt; IE的width是内容区宽度+padding+border，盒子总宽度：width+margin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fc97e71155223a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-502ce3aaecc4b38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position-的几种值-，详细说明一下每种的区别-3&quot;&gt;&lt;a href=&quot;#position-的几种值-，详细说明一下每种的区别-3&quot; class=&quot;headerlink&quot; title=&quot;position 的几种值 ，详细说明一下每种的区别 3%&quot;&gt;&lt;/a&gt;position 的几种值 ，详细说明一下每种的区别 3%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;static    默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。&lt;/li&gt;
&lt;li&gt;relative    位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。&lt;/li&gt;
&lt;li&gt;absolute    位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。&lt;/li&gt;
&lt;li&gt;fixed    位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;a href=&quot;#如果position设置成absolute属性该元素的display属性会变成什么&quot; class=&quot;headerlink&quot; title=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;/a&gt;如果position设置成absolute属性该元素的display属性会变成什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;position: absolute,float会隐式的改变display类型， 不论之前是什么类型的元素（ display: none除外），&lt;ul&gt;
&lt;li&gt;只要设置了position: absolute或float， 都会让元素以display: inline - block的方式显示， 可以设置长宽，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就算是显示的设置display: inline或display: block， 仍然无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display-有几个值-3&quot;&gt;&lt;a href=&quot;#display-有几个值-3&quot; class=&quot;headerlink&quot; title=&quot;display 有几个值  3%&quot;&gt;&lt;/a&gt;display 有几个值  3%&lt;/h2&gt;&lt;p&gt;每个元素都有display属性，确定该元素的类型，&lt;br&gt;每个元素都有默认的display值，&lt;br&gt;如div的display默认值为“block”，则为“块级”元素；&lt;br&gt;span默认display属性值为“inline”，是“行内”元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-0a9d9c4eb7fc996e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伪类-伪元素&quot;&gt;&lt;a href=&quot;#伪类-伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h2&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些？&quot; class=&quot;headerlink&quot; title=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;/a&gt;CSS3新增伪类有那些？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;举例：
  p:first-of-type    选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:last-of-type    选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-of-type    选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-child        选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。
  p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。

 inptut
    :enabled          
   :disabled         控制表单控件的禁用状态。
  :checked        单选框或复选框被选中。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;a href=&quot;#CSS选择器有哪些？哪些属性可以继承？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;/a&gt;CSS选择器有哪些？哪些属性可以继承？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; 1.id选择器（ # myid）
2.类选择器（.myclassname）
3.标签选择器（div, h1, p）
4.相邻选择器（h1 + p）
5.子选择器（ul &amp;gt; li）
6.后代选择器（li a）
7.通配符选择器（ * ）
8.属性选择器（a[rel = &amp;quot;external&amp;quot;]）
9.伪类选择器（a:hover, li:nth-child）
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可继承的样式： font-size font-family color, UL LI DL DD DT;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不可继承的样式：border padding margin width height ;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;a href=&quot;#CSS优先级算法如何计算？&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;/a&gt;CSS优先级算法如何计算？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先级就近原则，同权重情况下样式定义最近者为准;&lt;/li&gt;
&lt;li&gt;载入样式以最后载入的定位为准;&lt;h3 id=&quot;同权重&quot;&gt;&lt;a href=&quot;#同权重&quot; class=&quot;headerlink&quot; title=&quot;同权重&quot;&gt;&lt;/a&gt;同权重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、 位于 &amp;lt; head / &amp;gt; 标签里的 &amp;lt; style / &amp;gt; 中所定义的CSS拥有最高级的优先权。　　&lt;/li&gt;
&lt;li&gt;2、 第二级的优先属性由位于 &amp;lt; style / &amp;gt; 标签中的 @import 引入样式表所定义。　　&lt;/li&gt;
&lt;li&gt;3、 第三级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表定义。&lt;/li&gt;
&lt;li&gt;4、 第四级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表内的 @import 导入样式表定义。　　&lt;/li&gt;
&lt;li&gt;5、 第五级优先的样式有用户设定。　　 最低级的优先权由浏览器默认。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权重的进制是256&lt;/p&gt;
&lt;h3 id=&quot;属性选择器的权重问题&quot;&gt;&lt;a href=&quot;#属性选择器的权重问题&quot; class=&quot;headerlink&quot; title=&quot;属性选择器的权重问题:&quot;&gt;&lt;/a&gt;属性选择器的权重问题:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// !important ---------&amp;gt;   无穷
// 行间样式-------------&amp;gt;   1000
// id------------------&amp;gt;   100
// class|属性|伪类------&amp;gt;   10
// 标签|伪元素 ---------&amp;gt;    1
// 通配符---------------&amp;gt;   0
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面导入样式时，使用link和-import有什么区别？&quot;&gt;&lt;a href=&quot;#页面导入样式时，使用link和-import有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;页面导入样式时，使用link和@import有什么区别？&quot;&gt;&lt;/a&gt;页面导入样式时，使用link和@import有什么区别？&lt;/h2&gt;&lt;p&gt;1 : 属于link属于xml 标签，除了加载css以外，还能定义rss和rel等 。@import是css提供的，只能用于加载css&lt;br&gt;2 :页面加载页面在加载时候，link同时被加载；而@import引用的css等页面加载完毕再加载&lt;br&gt;3：兼容性@import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;&lt;br&gt;4：link方式的样式权重高于@import的权重。&lt;br&gt;5：使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。&lt;br&gt;6：. 最后一个很有意思， @import url有最大次数的限制， IE6最多引入31次， firefox并没有发现&lt;br&gt;7： @import的优点： 多个样式表导入一个样式表中， 页面只需要引入一个即可&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引入css的几种方式-2&quot;&gt;&lt;a href=&quot;#引入css的几种方式-2&quot; class=&quot;headerlink&quot; title=&quot;引入css的几种方式 2%&quot;&gt;&lt;/a&gt;引入css的几种方式 2%&lt;/h2&gt;&lt;h3 id=&quot;1-行内样式&quot;&gt;&lt;a href=&quot;#1-行内样式&quot; class=&quot;headerlink&quot; title=&quot;1.行内样式&quot;&gt;&lt;/a&gt;1.行内样式&lt;/h3&gt;&lt;p&gt;最直接最简单的一种，直接对HTML标签使用style=””，例如：&lt;/p&gt;
&lt;p style=&quot;color:#F00; &quot;&gt;&lt;/p&gt;

&lt;p&gt;缺点：HTML页面不纯净，文件体积大，不利于蜘蛛爬行，后期维护不方便。&lt;/p&gt;
&lt;h3 id=&quot;2-内嵌样式&quot;&gt;&lt;a href=&quot;#2-内嵌样式&quot; class=&quot;headerlink&quot; title=&quot;2.内嵌样式&quot;&gt;&lt;/a&gt;2.内嵌样式&lt;/h3&gt;&lt;p&gt;内嵌样式就是将CSS代码写在&lt;head&gt;&lt;/head&gt;之间，并且用&lt;style&gt;&lt;/style&gt;进行声明，例如：&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;

body,div,a,img,p{margin:0; padding:0;}

&lt;/style&gt;

&lt;p&gt;优缺点：页面使用公共CSS代码，也是每个页面都要定义的，如果一个网站有很多页面，每个文件都会变大，后期维护难度也大，如果文件很少，CSS代码也不多，这种样式还是很不错的。&lt;/p&gt;
&lt;h3 id=&quot;3-链接样式&quot;&gt;&lt;a href=&quot;#3-链接样式&quot; class=&quot;headerlink&quot; title=&quot;3.链接样式&quot;&gt;&lt;/a&gt;3.链接样式&lt;/h3&gt;&lt;p&gt;链接样式是使用频率最高，最实用的样式，只需要在&lt;head&gt;&lt;/head&gt;之间加上&lt;link…&gt;就可以了，如下：&lt;/link…&gt;&lt;/p&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;

&lt;p&gt;优缺点：实现了页面框架代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便&lt;/p&gt;
&lt;h3 id=&quot;4-导入样式（不建议使用）&quot;&gt;&lt;a href=&quot;#4-导入样式（不建议使用）&quot; class=&quot;headerlink&quot; title=&quot;4.导入样式（不建议使用）&quot;&gt;&lt;/a&gt;4.导入样式（不建议使用）&lt;/h3&gt;&lt;p&gt;导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@import在html中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&quot;text/css&quot;&gt;
@import url(style.css);
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;@import在CSS中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@import url(style.css);&lt;/p&gt;
&lt;h3 id=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;a href=&quot;#四种CSS引入方式的优先级&quot; class=&quot;headerlink&quot; title=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;/a&gt;四种CSS引入方式的优先级&lt;/h3&gt;&lt;p&gt;1.就近原则&lt;br&gt;2.理论上：行内&amp;gt;内嵌&amp;gt;链接&amp;gt;导入&lt;br&gt;3.实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;锚点-1&quot;&gt;&lt;a href=&quot;#锚点-1&quot; class=&quot;headerlink&quot; title=&quot;锚点 1%&quot;&gt;&lt;/a&gt;锚点 1%&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;代码如下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;123.html#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt; &amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;两栏布局（左固定，右自适应）&quot;&gt;&lt;a href=&quot;#两栏布局（左固定，右自适应）&quot; class=&quot;headerlink&quot; title=&quot;两栏布局（左固定，右自适应）&quot;&gt;&lt;/a&gt;两栏布局（左固定，右自适应）&lt;/h2&gt;&lt;h3 id=&quot;1-float-margin&quot;&gt;&lt;a href=&quot;#1-float-margin&quot; class=&quot;headerlink&quot; title=&quot;1:float+margin&quot;&gt;&lt;/a&gt;1:float+margin&lt;/h3&gt;&lt;p&gt;左定宽高左浮动， 右设置margin - left:左边宽&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin - left: 100 px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;2：float-BFC&quot;&gt;&lt;a href=&quot;#2：float-BFC&quot; class=&quot;headerlink&quot; title=&quot;2：float+BFC&quot;&gt;&lt;/a&gt;2：float+BFC&lt;/h3&gt;&lt;p&gt;左定宽高左浮动，右触发BFC&lt;/p&gt;
&lt;h3 id=&quot;3-left-0-left-左宽-right-0&quot;&gt;&lt;a href=&quot;#3-left-0-left-左宽-right-0&quot; class=&quot;headerlink&quot; title=&quot;3:left:0,left:-左宽,right:0;&quot;&gt;&lt;/a&gt;3:left:0,left:-左宽,right:0;&lt;/h3&gt;&lt;p&gt;左定宽高 ,设置定位position absolute, left 0 ;&lt;br&gt;        .left {&lt;br&gt;            width: 100 px;&lt;br&gt;            height: 100 px;&lt;br&gt;            background - color: red;&lt;br&gt;            position: absolute;&lt;br&gt;            left: 0;&lt;br&gt;        }&lt;br&gt;        .right {&lt;br&gt;            height: 100 px;&lt;br&gt;            background - color: green;&lt;br&gt;            right: 0;&lt;br&gt;        }&lt;/p&gt;
&lt;h3 id=&quot;三个元素都浮动，左定宽高，右宽-cal-100-x&quot;&gt;&lt;a href=&quot;#三个元素都浮动，左定宽高，右宽-cal-100-x&quot; class=&quot;headerlink&quot; title=&quot;三个元素都浮动，左定宽高，右宽 cal(100%-x)&quot;&gt;&lt;/a&gt;三个元素都浮动，左定宽高，右宽 cal(100%-x)&lt;/h3&gt;&lt;hr&gt;
&lt;h2 id=&quot;实现三列布局（两边固定，中间自适应）&quot;&gt;&lt;a href=&quot;#实现三列布局（两边固定，中间自适应）&quot; class=&quot;headerlink&quot; title=&quot;实现三列布局（两边固定，中间自适应）&quot;&gt;&lt;/a&gt;实现三列布局（两边固定，中间自适应）&lt;/h2&gt;&lt;p&gt;1：绝对定位法：左右绝对定位，left:0,right:0,中间margin: 0 x;&lt;br&gt;此方法的优点是，理解容易，上手简单，受内部元素影响而破坏布局的概率低，就是比较经得起折腾。&lt;br&gt;缺点在于：如果中间栏含有最小宽度限制.布局可能受内部影响。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .left,.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;//为了防止将后一个块级元素挤下去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2：浮动方法：左右各浮动+中设margin&lt;br&gt;简便，但是灵活性低下&lt;br&gt;dom顺序有限制：因为左右浮动的缘故，只能将mid放在左右后面&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    .con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;我是左边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;我是右边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3:flex，将mid设置属性flex:1&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .main &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flex: 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4：圣杯布局：三个都浮动+左右margin负值&lt;br&gt;优点：三栏相互关联，可谓真正意义上的自适应，有一定的抗性——布局不易受内部影响。&lt;br&gt;缺点：相对比较难理解些，上手不容易，代码相对复杂。出现百分比宽度，过多的负值定位，如果出现布局的bug，排查不易。&lt;br&gt;【dom结构】：先自适应的div，然后再左右顺序可以不定&lt;br&gt;mid外层: width:100%，float:left&lt;br&gt;mid :margin 0 x;&lt;br&gt;左右 左浮动&lt;br&gt;第一个兄弟：margin-left:-100%&lt;br&gt;第二个兄弟：margin-left:-xpx;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;main&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;div class=&amp;quot;main-con&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                我是中间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;left&amp;quot;&amp;gt;我是左边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div class=&amp;quot;right&amp;quot;&amp;gt;我是右边&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.con &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 500px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .mid-wraper &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .mid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin: 0 210px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        height: 100%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-left: -100%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        margin-left: -220px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC的通俗理解：&quot;&gt;&lt;a href=&quot;#BFC的通俗理解：&quot; class=&quot;headerlink&quot; title=&quot;BFC的通俗理解：&quot;&gt;&lt;/a&gt;BFC的通俗理解：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Block Formatting Context（ 块级格式化上下文） 是W3C CSS 2.1 规范中的一个概念， 它决定了元素如何对其内容进行定位， 以及与其他元素的关系和相互作用。 简单来讲， 我们可以把它理解为， 我们在进行盒模型布局的时候， 如果一个元素符合了成为BFC的条件，&lt;ul&gt;
&lt;li&gt;该元素成为一个隔离了的独立容器， 元素内部元素会垂直的沿着其父元素的边框排列， 和外部元素互不影响。 比如浮动元素会触发BFC，&lt;br&gt;浮动元素内部的子元素主要受到该浮动元素的影响， 而两个浮动元素之间是互不影响的。&lt;/li&gt;
&lt;li&gt;在CSS3 中， BFC 叫做Flow Root。 在早期的ie中也有类似的概念haslayout IE6、 7 的很多布局产生的bug（ 如3px间隙、 绝对定位的继承宽度）都可以通过触发hasLayout修复， 比较推荐的方法为zoom: 1 与height: 1 % ，不会破坏已有的样式， 相信大家对它并不陌生。&lt;/li&gt;
&lt;li&gt;同样的以往集中在float、 绝对定位、 margin collaspe中的很多困惑， 在理解了bfc后， 都能够被我们一一解除。&lt;h2 id=&quot;BFC规范中的定义：&quot;&gt;&lt;a href=&quot;#BFC规范中的定义：&quot; class=&quot;headerlink&quot; title=&quot;BFC规范中的定义：&quot;&gt;&lt;/a&gt;BFC规范中的定义：&lt;/h2&gt;w3c规范对BFC的解释：&lt;/li&gt;
&lt;li&gt;浮动元素和绝对定位元素， 不是块级盒子的块容器（ 如 inline - blocks, table - cells, 和 table - captions）， 以及设置了overflow属性（ 除了visible）的块级盒子， 都会为他们的内容创建新的BFC（ 块级格式上下文）。&lt;ul&gt;
&lt;li&gt;在BFC中， 盒子从顶端开始垂直地 一个接一个地排列， 两个盒子之间的垂直的间隙是由他们的margin 值所决定的。 在一个BFC中， 两个相邻的块级盒子的&lt;/li&gt;
&lt;li&gt;垂直外边距会产生折叠。 在BFC中， 每一个盒子的左外边缘（ margin - left） 会触碰到容器的左边缘(border - left)（ 对于从右到左的格式来说， 则触碰到右边缘）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    触发BFC的方法：(任一即可)

float 元素
position（ absolute， fixed）
display(table - cell， table - caption， inline - block)
overflow 除了visible 以外的值（ hidden， auto， scroll）
fieldset元素
早期IE的hasLayout会触发一个新的block formatting context
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;BFC的特性&quot;&gt;&lt;a href=&quot;#BFC的特性&quot; class=&quot;headerlink&quot; title=&quot;BFC的特性&quot;&gt;&lt;/a&gt;BFC的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;边缘不和浮动元素重叠&lt;/li&gt;
&lt;li&gt;不存在collapsing margins问题&lt;/li&gt;
&lt;li&gt;第一个特性特别有用， 因为元素触发了BFC的话， 就不会被float元素覆盖， 当子元素全部浮动的时候也能够正确地包含了&lt;ul&gt;
&lt;li&gt;第二个margin不会叠加的特性， 可以理解为两个处于普通流的盒子， 会有margin叠加的问题， 是因为他们属于相同的BFC， 当他自身创建了一个新的BFC时， 这个问题就不存在了&lt;h3 id=&quot;BFC的常见应用&quot;&gt;&lt;a href=&quot;#BFC的常见应用&quot; class=&quot;headerlink&quot; title=&quot;BFC的常见应用&quot;&gt;&lt;/a&gt;BFC的常见应用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过边缘不和浮动元素重叠的特性， 实现两栏结构。&lt;/li&gt;
&lt;li&gt;清除元素内部浮动&lt;/li&gt;
&lt;li&gt;解决合并外边距的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot;&gt;&lt;a href=&quot;#常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot; class=&quot;headerlink&quot; title=&quot;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&quot;&gt;&lt;/a&gt;常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？&lt;/h2&gt;&lt;p&gt;有时需要将网页中的一些数据保存在浏览器端，这样做的好处是，当下次访问页面时，不需要再次向服务器请求数据，直接就可以从本地读取数据。目前常用的有以下几种方法：&lt;/p&gt;
&lt;h3 id=&quot;cookie&quot;&gt;&lt;a href=&quot;#cookie&quot; class=&quot;headerlink&quot; title=&quot;cookie&quot;&gt;&lt;/a&gt;&lt;strong&gt;cookie&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K，cookie数据大小不能超过4k&lt;/p&gt;
&lt;h3 id=&quot;Flash-ShareObject&quot;&gt;&lt;a href=&quot;#Flash-ShareObject&quot; class=&quot;headerlink&quot; title=&quot;Flash ShareObject&quot;&gt;&lt;/a&gt;&lt;strong&gt;Flash ShareObject&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;这种方式能能解决上面提到的cookie存储的两个弊端，而且能够跨浏览器，应该说是目前最好的本地存储方案。不过，需要在页面中插入一个Flash，当浏览器没有安装Flash控件时就不能用了。所幸的是，没有安装Flash的用户极少。&lt;br&gt;缺点：需要安装Flash插件。&lt;/p&gt;
&lt;h3 id=&quot;sessionStorage&quot;&gt;&lt;a href=&quot;#sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;sessionStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;sessionStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用于Firefox2+的火狐浏览器，用这种方式存储的数据仅窗口级别有效，同一个窗口（或者Tab）页面刷新或者跳转，都能获取到本地存储的数据，当新开窗口或者页面时，原来的数据就失效了。&lt;br&gt;缺点：IE不支持、不能实现数据的持久保存。&lt;/p&gt;
&lt;h3 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;localStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;localStorage是Web Storage互联网存储规范中的一部分，现在在Firefox 3.5、Safari 4和IE8中得到支持。&lt;br&gt;缺点：低版本浏览器不支持。&lt;/p&gt;
&lt;p&gt;提示：localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;//存储信息   （存储的信息名称，要存储的字符串）&lt;br&gt;localStorage.setItem(“CC_email_list”,input_eamil[i])&lt;br&gt;//读取信息   （要读取的信息名称）&lt;br&gt;localStorage.getItem(“CC_email_list”)&lt;br&gt;//清除信息    （要清除的信息名称）&lt;br&gt;localStorage.removeItem(“CC_email_list”);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;globalStorage&quot;&gt;&lt;a href=&quot;#globalStorage&quot; class=&quot;headerlink&quot; title=&quot;globalStorage&quot;&gt;&lt;/a&gt;&lt;strong&gt;globalStorage&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;使用于Firefox2+的火狐浏览器，类似于IE的userData。&lt;br&gt;1 //赋值 2 globalStorage[location.hostname][‘name’] = ‘tugai’; 3 //读取 4 globalStorage[location.hostname][‘name’]; 5 //删除 6 globalStorage[location.hostname].removeItem(‘name’);&lt;/p&gt;
&lt;h3 id=&quot;Google-Gear&quot;&gt;&lt;a href=&quot;#Google-Gear&quot; class=&quot;headerlink&quot; title=&quot;Google Gear&quot;&gt;&lt;/a&gt;&lt;strong&gt;Google Gear&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Google开发出的一种本地存储技术。&lt;br&gt;缺点：需要安装Gear组件。&lt;/p&gt;
&lt;h3 id=&quot;userData&quot;&gt;&lt;a href=&quot;#userData&quot; class=&quot;headerlink&quot; title=&quot;userData&quot;&gt;&lt;/a&gt;&lt;strong&gt;userData&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;IE浏览器可以使用userData来存储数据，容量可达到640K，这种方案是很可靠的，不需要安装额外的插件。缺点：它仅在IE下有效。&lt;br&gt;缺点：IE不支持。&lt;/p&gt;
&lt;p&gt;结论：Flash shareobject是不错的选择，如果你不想在页面上嵌入Flash，可以结合使用userData(IE6+)和globalStorage(Firefox2+)和localStorage(chrome3+)实现跨浏览器。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;存储大小：&quot;&gt;&lt;a href=&quot;#存储大小：&quot; class=&quot;headerlink&quot; title=&quot;存储大小：&quot;&gt;&lt;/a&gt;存储大小：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;cookie数据大小不能超过4k。
sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;有期时间：&quot;&gt;&lt;a href=&quot;#有期时间：&quot; class=&quot;headerlink&quot; title=&quot;有期时间：&quot;&gt;&lt;/a&gt;有期时间：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
sessionStorage  数据在当前浏览器窗口关闭后自动删除。
cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;HTML5&quot;&gt;&lt;a href=&quot;#HTML5&quot; class=&quot;headerlink&quot; title=&quot;HTML5&quot;&gt;&lt;/a&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;新特性&quot;&gt;&lt;a href=&quot;#新特性&quot; class=&quot;headerlink&quot; title=&quot;新特性&quot;&gt;&lt;/a&gt;新特性&lt;/h2&gt;&lt;h3 id=&quot;1-标签语义化，&quot;&gt;&lt;a href=&quot;#1-标签语义化，&quot; class=&quot;headerlink&quot; title=&quot;1:标签语义化，&quot;&gt;&lt;/a&gt;1:标签语义化，&lt;/h3&gt;&lt;p&gt;比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签&lt;/p&gt;
&lt;h3 id=&quot;2、音视频元素，&quot;&gt;&lt;a href=&quot;#2、音视频元素，&quot; class=&quot;headerlink&quot; title=&quot;2、音视频元素，&quot;&gt;&lt;/a&gt;2、音视频元素，&lt;/h3&gt;&lt;p&gt;video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。&lt;/p&gt;
&lt;h3 id=&quot;3、新增很多api，&quot;&gt;&lt;a href=&quot;#3、新增很多api，&quot; class=&quot;headerlink&quot; title=&quot;3、新增很多api，&quot;&gt;&lt;/a&gt;3、新增很多api，&lt;/h3&gt;&lt;p&gt;比如获取用户地理位置的window.navigator.geoloaction&lt;/p&gt;
&lt;h3 id=&quot;、websocket&quot;&gt;&lt;a href=&quot;#、websocket&quot; class=&quot;headerlink&quot; title=&quot;、websocket&quot;&gt;&lt;/a&gt;、websocket&lt;/h3&gt;&lt;p&gt;websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。&lt;br&gt;主要通信过程：先借http完成握手，达到了长连接&lt;br&gt;第一步：浏览器基于tcp，发送http请求&lt;br&gt;第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手&lt;br&gt;第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息&lt;br&gt;websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、HTML5-能够本地存储数据，在之前都是使用-cookies-使用的。&quot;&gt;&lt;a href=&quot;#、HTML5-能够本地存储数据，在之前都是使用-cookies-使用的。&quot; class=&quot;headerlink&quot; title=&quot;、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&quot;&gt;&lt;/a&gt;、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。&lt;/h3&gt;&lt;p&gt;HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;：请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot;&gt;&lt;a href=&quot;#：请描述一下-cookies，sessionStorage-和-localStorage-的区别？&quot; class=&quot;headerlink&quot; title=&quot;：请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;&gt;&lt;/a&gt;：请描述一下 cookies，sessionStorage 和 localStorage 的区别？&lt;/h3&gt;&lt;p&gt;  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。&lt;br&gt;  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。&lt;br&gt;  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。&lt;/p&gt;
&lt;p&gt;  存储大小：&lt;br&gt;      cookie数据大小不能超过4k。&lt;br&gt;      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。&lt;/p&gt;
&lt;p&gt;  有期时间：&lt;br&gt;      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；&lt;br&gt;      sessionStorage  数据在当前浏览器窗口关闭后自动删除。&lt;br&gt;      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、应用程序缓存：&quot;&gt;&lt;a href=&quot;#、应用程序缓存：&quot; class=&quot;headerlink&quot; title=&quot;、应用程序缓存：&quot;&gt;&lt;/a&gt;、应用程序缓存：&lt;/h3&gt;&lt;p&gt;在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。&lt;br&gt;  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。&lt;/p&gt;
&lt;p&gt;html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：&lt;/p&gt;
&lt;p&gt;1、首先给html添加manifest属性，并赋值为cache.manifest&lt;br&gt;2、cache.manifest的内容为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;、web-worker，web-worker&quot;&gt;&lt;a href=&quot;#、web-worker，web-worker&quot; class=&quot;headerlink&quot; title=&quot;、web worker，web worker&quot;&gt;&lt;/a&gt;、web worker，web worker&lt;/h3&gt;&lt;p&gt;是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;css3的新特性哪些，你都用过哪些 5%&lt;h2 id=&quot;媒体查询具体到语句-5&quot;&gt;&lt;a href=&quot;#媒体查询具体到语句-5&quot; class=&quot;headerlink&quot; title=&quot;媒体查询具体到语句 5%&quot;&gt;&lt;/a&gt;媒体查询具体到语句 5%&lt;/h2&gt;作用：媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，检测的媒体特性有 width 、 height 和 color （等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;响应式布局meta-scale-怎样使用media&quot;&gt;&lt;a href=&quot;#响应式布局meta-scale-怎样使用media&quot; class=&quot;headerlink&quot; title=&quot;响应式布局meta,scale 怎样使用media?&quot;&gt;&lt;/a&gt;响应式布局meta,scale 怎样使用media?&lt;/h2&gt;&lt;h3 id=&quot;meta-scale&quot;&gt;&lt;a href=&quot;#meta-scale&quot; class=&quot;headerlink&quot; title=&quot;meta,scale&quot;&gt;&lt;/a&gt;meta,scale&lt;/h3&gt;&lt;p&gt;第一步：&lt;br&gt; 首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果&lt;/p&gt;
&lt;meta name=&quot;viewport content=&quot; width=&quot;device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;/&quot;&gt;

ps:
&gt;width=device-width:宽度等于当前设备的宽度
initial-scale=1：初始的缩放比例（默认为1）
maximum-scale=1：允许用户缩放到得最大比例（默认为1）
user-scalable=no：用户不能手动缩放

### 第二步：媒体查询 语句
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:720px) and (min-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

## css 伪类 5%
### 伪类选择器
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:first-of-type	选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:last-of-type	选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-of-type	选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-child		选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:nth-child(2)	选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

***
### 伪类 伪元素
伪类是给元素模拟添加类 ，来实现某种效果（：）
常见伪类：

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)
常见伪元素：

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

http://web.jobbole.com/86181/

## 说一下flex 3%
### 请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？
 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。
   较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。
   采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。
   它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。
   常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。
   在布局上有了比以前更加灵活的空间
http://www.w3cplus.com/css3/flexbox-basics.html

***
## 动画 2%

  二维动画——animation  这个属性必须配合@keyframes动画关键帧来使用。keyframes里面包含一个百分数，后面跟上在这段时间内变换的css样式。
     animation是一个复合属性，它包括以下几个组成部分：
   * 1.animation-name：执行动画的keyframes的名字。
    * 2.animation-duration：执行动画的总时长。
    * 3.animation-timing-function：指定过渡函数。
    * 4.animation-delay：执行延迟时间。
    *  5.animation-direction：动画播放的方式。这个属性的值主要有：normal正常播放模式、reverse倒序播放、alternate
                  动画在奇数次正向播放偶数次倒序播放、alternate-reverse动画在奇数次倒序播放偶数次正向播放。
     *  6.animation-iteration-count：动画执行的次数。infinite是无限次，写一个数字就是要执行几次。
      *  7.animation-fill-mode：执行完动画后物体停止的位置。forwards是停在结束的位置上、backwards是快速执行初始帧
                  （这个最好配合延迟来观察）、
                  none是回到初始帧的位置、both是同时具有forwards和backwards的效果。
        *  8.animation-play-state：控制动画的播放状态。running是播放、paused是暂停。
***
## css3动画卡了

    transform: transition3d(0, 0, 0);
    transform: translateZ(0);
    这两个属性可以开启GPU加速模式
    然而面试官问我为什么，你知道原理么？
    这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画的时候从CPU转向GPU
## less
*  Less 有了解过吗？有什么好处？
   什么是CSS 预处理器 / 后处理器？
    * 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，
    还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。
   * 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。
## 常见的浏览器端的存储技术都有哪些，以及他们的优缺点和使用场景？
有时需要将网页中的一些数据保存在浏览器端，这样做的好处是，当下次访问页面时，不需要再次向服务器请求数据，直接就可以从本地读取数据。目前常用的有以下几种方法：
### **cookie**
cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量，另外，cookie能存储的数据容量有限，根据浏览器类型不同而不同，IE6大约只能存储2K，cookie数据大小不能超过4k
### **Flash ShareObject**
这种方式能能解决上面提到的cookie存储的两个弊端，而且能够跨浏览器，应该说是目前最好的本地存储方案。不过，需要在页面中插入一个Flash，当浏览器没有安装Flash控件时就不能用了。所幸的是，没有安装Flash的用户极少。
缺点：需要安装Flash插件。
### **sessionStorage**
使用于Firefox2+的火狐浏览器，用这种方式存储的数据仅窗口级别有效，同一个窗口（或者Tab）页面刷新或者跳转，都能获取到本地存储的数据，当新开窗口或者页面时，原来的数据就失效了。
缺点：IE不支持、不能实现数据的持久保存。
### **localStorage**
localStorage是Web Storage互联网存储规范中的一部分，现在在Firefox 3.5、Safari 4和IE8中得到支持。
缺点：低版本浏览器不支持。

提示：localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。
&gt;//存储信息   （存储的信息名称，要存储的字符串）
localStorage.setItem(&quot;CC_email_list&quot;,input_eamil[i])
//读取信息   （要读取的信息名称）
localStorage.getItem(&quot;CC_email_list&quot;)
//清除信息    （要清除的信息名称）
localStorage.removeItem(&quot;CC_email_list&quot;);

### **globalStorage**
使用于Firefox2+的火狐浏览器，类似于IE的userData。
1 //赋值 2 globalStorage[location.hostname][&#39;name&#39;] = &#39;tugai&#39;; 3 //读取 4 globalStorage[location.hostname][&#39;name&#39;]; 5 //删除 6 globalStorage[location.hostname].removeItem(&#39;name&#39;);
### **Google Gear**
Google开发出的一种本地存储技术。
缺点：需要安装Gear组件。
### **userData**
IE浏览器可以使用userData来存储数据，容量可达到640K，这种方案是很可靠的，不需要安装额外的插件。缺点：它仅在IE下有效。
缺点：IE不支持。

结论：Flash shareobject是不错的选择，如果你不想在页面上嵌入Flash，可以结合使用userData(IE6+)和globalStorage(Firefox2+)和localStorage(chrome3+)实现跨浏览器。
***
## 请描述一下 cookies，sessionStorage 和 localStorage 的区别？

    cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
    cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
    sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。
### 存储大小：
        cookie数据大小不能超过4k。
        sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。
### 有期时间：
        localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
        sessionStorage  数据在当前浏览器窗口关闭后自动删除。
        cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭

***
## html 获取页面，浏览器，屏幕宽高
一个页面的展示，从外到内的容器为：屏幕-&gt;浏览器-&gt;页面本身。
HTML元素展现在页面内-&gt;页面展现在浏览器内-&gt;而浏览器展现在屏幕内。
通过Js的一些对象可以获取这些容器的高度、宽度。
1：总

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-c6dff4f74e7f2eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)


2:屏幕
![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-f47a188d60bd97a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
3:浏览器

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-8e3d9af0d6d264b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/2377897-5e416993bde1fdb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)


5:可视区 
定义：可视区域是指能显示网页内容区域的宽高。
拉动控制台的时候网页可视区域的宽高也会随之改变。
可视区宽高跟内容宽高没关系。

如果内容超过可视区域的高度或者宽度就出现滚动条。要获取可视区域的宽高每个浏览器的获取方法不一样

[参照](http://www.cnblogs.com/polk6/p/5051935.html)
***
## Doctype
1.Doctype作用
位置：&lt;!DOCTYPE&gt;声明位于html第一行
作用： 告知浏览器用什么标准解析html文档
            &lt;!DOCTYPE&gt;不存在，或者格式不正确，会导致文档以兼容模 (怪异模式)式出现

语法：
      HTML 顶级元素 可用性 &quot;注册//组织//类型 标签//定义 语言&quot;&quot;URL&quot;
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot;&gt; 
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Strict//EN&quot;&gt;

其中，DTD的是W3C所发布的一个文档类型定义，简单的说，就是告诉浏览器你的这个HTML，是根据那个标准写的，解析的时候用哪个标准解析。




http://www.qdfuns.com/notes/21146/12ba5b538dd5974b1bee88f77c71b0a0.html
***

##为什么HTML5就只要写&lt;!DOCTYPE HTML&gt;?
HTML 4.01 中的 doctype 需要对 DTD 进行引用，因为 HTML 4.01 基于 SGML。 HTML 5 不基于 SGML，因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为。
其中，SGML是标准通用标记语言,简单的说，就是比HTML,XML更老的标准，这两者都是由SGML发展而来的。BUT，HTML5不是的。
***
## 标准模式与兼容模式（怪异模式）各有什么区别?

A：在标准模式中，浏览器根据规范呈现页面；在混杂模式中，页面以一种比较宽松向后兼容的方式显示。简单的说，就是尽可能的显示能显示的东西给用户看。（但是会有些样式失效）

1：width不同
在严格模式中 ：width是内容宽度 ，元素真正的宽度 = width+（padding+border+margin）2
在兼容模式中 ：width则是元素的实际宽度 ，内容宽度 = width - ( padding2+border2)

2.兼容模式下可设置百分比的高度和行内元素的高宽
    在Standards模式下，给span等行内元素设置wdith和height都不会生效，而在兼容模式下，则会生效。
    在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置高度，子元素设置一个百分比的高度是无效的。

3.用margin:0 auto设置水平居中在IE下会失效
    使用margin:0 auto在standards模式下可以使元素水平居中，但在兼容模式下却会失效（用text-align属性解决）
    body{text-align:center};#content{text-align:left}

4.兼容模式下Table中的字体属性不能继承上层的设置，white-space:pre会失效，设置图片的padding会失效

***
## 介绍一下你对浏览器内核的理解？
主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。
  渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。

JS引擎则：解析和执行javascript来实现网页的动态效果。
***
常见的浏览器内核有哪些？
 Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]
  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等
  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]
  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]
***
## HTML、XML、XHTML 有什么区别？
HTML是被设计用来显示数据的，重点是:显示数据以及如何显示数据更好上面。
XML是被设计用来描述数据的，重点是:什么是数据，如何存放数据。
XHTML基于HTML的基础上进行了扩展和规范，让XHTML更加严格，主要目的是促进HTML向XML过渡。

HTML的弊端：
编码不规范，结构混乱臃肿，需要智能的终端才能很好的显示；
表现和结构混乱，不利于开发和维护；
不能使用于更多的网络设备中，比如手机；
为了让HTML逐渐过渡到XML阶段，w3c又定制了XHTML标准。

而XML的弊端也不少：
在数据中寻找信息非常难
大数据量效率低
使用XML传输数据时没有数据库系统那样的信息管理功能
因此XML因为自身严苛限制等因素逐渐被HTML5取代。
***
## 怎样理解 HTML 语义化？
HTML语义化能提高网页语义的清晰度，方便爬虫工具识别网站内容，爬虫工具在识别网站内容时不会受到网站样式的影响，只会关注网站内容本身
HTML的语义化能够提高团队对网站的维护和改进效率
改善网页的可访问性，遇到视觉障碍用户时屏幕阅读器能够更好的系别网页内容

***
## iframe有那些缺点？

  * iframe会阻塞主页面的Onload事件；
  * 搜索引擎的检索程序无法解读这种页面，不利于SEO;

  * iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。

  使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript
  动态给iframe添加src属性值，这样可以绕开以上两个问题。
***

## 为什么要初始化CSS样式。
- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。

  - 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。
淘宝的样式初始化代码：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &amp;#123; margin:0; padding:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;body, button, input, select, textarea &amp;#123; font:12px/1.5tahoma, arial, \5b8b\4f53; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h1, h2, h3, h4, h5, h6&amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;address, cite, dfn, em, var &amp;#123; font-style:normal; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;code, kbd, pre, samp &amp;#123; font-family:couriernew, courier, monospace; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;small&amp;#123; font-size:12px; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ul, ol &amp;#123; list-style:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a &amp;#123; text-decoration:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a:hover &amp;#123; text-decoration:underline; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sup &amp;#123; vertical-align:text-top; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub&amp;#123; vertical-align:text-bottom; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;legend &amp;#123; color:#000; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fieldset, img &amp;#123; border:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button, input, select, textarea &amp;#123; font-size:100%; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;table &amp;#123; border-collapse:collapse; border-spacing:0; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

## 用纯CSS创建一个三角形的原理是什么？
 把上、左、右三条边隐藏掉（颜色设为 transparent）

&gt;  #demo {
    width: 0;
    height: 0;
    border-width: 20px;
    border-style: solid;
    border-color: transparent transparent red transparent;
  }
***
## 经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？
 * png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.

  * 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。

  * IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。

    浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}

    这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)

    渐进识别的方式，从总体中逐渐排除局部。

    首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。
    接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。

    css
        .bb{
            background-color:red;/*所有识别*/
            background-color:#00deff\9; /*IE6、7、8识别*/
            +background-color:#a200ff;/*IE6、7识别*/
            _background-color:#1e0bd1;/*IE6识别*/
        }


  *  IE下,可以使用获取常规属性的方法来获取自定义属性,
     也可以使用getAttribute()获取自定义属性;
     Firefox下,只能使用getAttribute()获取自定义属性。
     解决方法:统一通过getAttribute()获取自定义属性。

  *  IE下,even对象有x,y属性,但是没有pageX,pageY属性;
     Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。

  *  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。

  *  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,
     可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。

  超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:
  L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}
***
## 什么是外边距合并？
外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
  合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
  w3school介绍网址： http://www.w3school.com.cn/css/css_margin_collapsing.asp
***
## zoom:1的清除浮动原理?
清除浮动，触发hasLayout；
  Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。
  譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。

  来龙去脉大概如下：
  当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。

  Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。

  目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？
  可以通过css3里面的动画属性scale进行缩放。 
  ***
## 如何居中div？

水平居中：给div设置一个宽度，然后添加margin:0 auto属性

 div{
     width:200px;
     margin:0 auto;
  }
让绝对定位的div居中

 div {
     position: absolute;
     width: 300px;
     height: 300px;
     margin: auto;
     top: 0;
     left: 0;
     bottom: 0;
     right: 0;
     background-color: pink;    /* 方便看效果 */
 }

水平垂直居中一

 确定容器的宽高 宽500 高 300 的层
 设置层的外边距

 div {
     position: relative;        /* 相对定位或绝对定位均可 */
     width:500px;
     height:300px;
     top: 50%;
     left: 50%;
     margin: -150px 0 0 -250px;         /* 外边距为自身宽高的一半 */
     background-color: pink;         /* 方便看效果 */

  }

水平垂直居中二

 未知容器的宽高，利用 `transform` 属性

 div {
     position: absolute;        /* 相对定位或绝对定位均可 */
     width:500px;
     height:300px;
     top: 50%;
     left: 50%;
     transform: translate(-50%, -50%);
     background-color: pink;         /* 方便看效果 */

 }

水平垂直居中三

 利用 flex 布局
 实际使用时应考虑兼容性

 .container {
     display: flex;
     align-items: center;         /* 垂直居中 */
     justify-content: center;    /* 水平居中 */

 }
 .container div {
     width: 100px;
     height: 100px;
     background-color: pink;        /* 方便看效果 */
 } 
## position的值relative和absolute定位原点是？

    absolute
      生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
    fixed （老IE不支持）
      生成绝对定位的元素，相对于浏览器窗口进行定位。
    relative
      生成相对定位的元素，相对于其正常位置进行定位。
    static
      默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
    inherit
      规定从父元素继承 position 属性的值。
***

# HTML5
## 新特性
### 1:标签语义化，
比如header，footer，nav，aside，article，section等，新增了很多表单元素，入email，url等，除去了center等样式标签，还有除去了有性能问题的frame，frameset等标签

### 2、音视频元素，
video，audio的增加使得我们不需要在依赖外部的插件就可以往网页中加入音视频元素。

### 3、新增很多api，
比如获取用户地理位置的window.navigator.geoloaction

### 、websocket
websocket是伴随html5到来的基于tcp/ip的全双工通信的协议。
主要通信过程：先借http完成握手，达到了长连接
第一步：浏览器基于tcp，发送http请求
第二步：服务器端，接收到请求后。将 tcp用户网络层协议变为websocket协议，完成了握手
第三步：服务器端和浏览器完成握手，他们之间形成一条通道，可以源源不断的传送信息
websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端。
***
### 、HTML5 能够本地存储数据，在之前都是使用 cookies 使用的。
HTML5 提供了下面本地存储方案：webstorage包括localeStorage和sessionStorage，localeStorage是持久化存储在客户端，只要用户不主动删除，就不会消失，sessionStorage也是存储在客户端，但是他的存在时间是一个回话，一旦浏览器的关于该回话的页面关闭了，sessionStorage就消失了，
***
### ：请描述一下 cookies，sessionStorage 和 localStorage 的区别？
  cookie是网站为了标示用户身份而储存在客户端上的数据（通常经过加密）。
  cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
  sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。

  存储大小：
      cookie数据大小不能超过4k。
      sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。

  有期时间：
      localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
      sessionStorage  数据在当前浏览器窗口关闭后自动删除。
      cookie  在过期时间之前一直有效，即使窗口或浏览器关闭
## 具体应用
### cookie:
document.cookie = name, value, expires, domain, path, secure
encodeURIComponent
decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd)
### localStoragey用法
localStorage储存的值都是字符串类型，使用时要注意。另外，可以在浏览器调试器中的Resources的localStorage中看到储存的信息。
&gt;//存储信息   （存储的信息名称，要存储的字符串）
storage = window.localStorage
storage.setItem(&quot;CC_email_list&quot;,input_eamil[i])
//读取信息   （要读取的信息名称）
storage.getItem(&quot;CC_email_list&quot;)
//清除信息    （要清除的信息名称）
storage.removeItem(&quot;CC_email_list&quot;);
storage.clear();
### sessionStorage:
sessionStorage用法和localStorage完全一致，差别只在有效期：

***

### 1.什么是cookie？
    答：cookie是用于在客户端存储会话信息的。
### 4.如何操作cookie？
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var CookieUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 设置cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set : function (name, value, expires, domain, path, secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var cookieText = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cookieText += encodeURIComponent(name) + &amp;quot;=&amp;quot; + encodeURIComponent(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (expires instanceof Date) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; expires=&amp;quot; + expires.toGMTString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; path=&amp;quot; + path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (domain) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; domain=&amp;quot; + domain;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieText += &amp;quot;; secure&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        document.cookie = cookieText;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // name=value; expires=expiration_time; path=domain_path; domain=domain_name; secure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 获取cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    get : function (name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var cookieName = encodeURIComponent(name) + &amp;quot;=&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieStart = document.cookie.indexOf(cookieName),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieValue = &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (cookieStart &amp;gt; -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var cookieEnd = document.cookie.indexOf (&amp;quot;;&amp;quot;, cookieStart);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (cookieEnd == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                cookieEnd = document.cookie.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookieValue = decodeURIComponent(document.cookie.substring(cookieStart + cookieName.length, cookieEnd));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return cookieValue; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 删除cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unset : function (name, domain, path, secure) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.set(name, &amp;quot;&amp;quot;, Date(0), domain, path, secure);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CookieUtil.set(&amp;quot;name&amp;quot;, &amp;quot;zhang&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var name = CookieUtil.get(&amp;quot;name&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(name);    // zhang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CookieUtil.unset(&amp;quot;name&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(CookieUtil.get(&amp;quot;name&amp;quot;));  // 空&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

### 2.cookie的组成部分？
    ①名称：一个唯一确定cookie 的名称。建议区分大小写。cookie 的名称必须是经过URL 编码的。
    ②值：储存在cookie 中的字符串值。值必须被URL 编码。
    ③域：cookie 对于哪个域是有效的。所有向该域发送的请求中都会包含这个cookie 信息。这个值可以包含子域（subdomain，如www.wrox.com），也可以不包含它（如.wrox.com，则对于wrox.com的所有子域都有效）。如果没有明确设定，那么这个域会被认作来自设置cookie 的那个域。
    ④路径：对于指定域中的那个路径，应该向服务器发送cookie。例如，你可以指定cookie 只有从http://www.wrox.com/books/ 中才能访问，那么http://www.wrox.com 的页面就不会发送cookie 信息，即使请求都是来自同一个域的。
    ⑤失效时间：表示cookie 何时应该被删除的时间戳。默认情况下，浏览器会话结束时即将所有cookie 删除；不过也可以自己设置删除时间。这个值是个GMT 格式的日期（Wdy, DD-Mon-YYYY HH:MM:SS GMT），用于指定应该删除cookie 的准确时间。因此，cookie 
    可在浏览器关闭后依然保存在用户的机器上。如果你设置的失效日期是个以前的时间，则cookie 会被立刻删除。
    ⑥安全标志：指定后，cookie 只有在使用SSL 连接的时候才发送到服务器。例如，cookie 信息只能发送给https://www.wrox.com，而http://www.wrox.com 的请求则不能发送cookie。
### 3.列举一个cookie的例子？
    以下是一个完整的cookie的例子，我们将把它分解开来：
    Set-Cookie: name=value; expires=Mon, 22-Jan-07 07:10:24 GMT; domain=.wrox.com; path=/; secure
    ①名称: name字符串表示
    ②值：value字符串表示
    ③过期时间：Mon, 22-Jan-07 07:10:24 GMT
    ④域名：.wrox.com
    ⑤路径：当前目录/
    ⑥安全标志：secure
***
### 、应用程序缓存：
在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。
  原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。

html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：

1、首先给html添加manifest属性，并赋值为cache.manifest
2、cache.manifest的内容为: 
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  #v1.2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CACHE :           //表示需要缓存的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:    //表示只在用户在线的时候才需要的文件，不会缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  c.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/        /index.html     //表示如果找不到第一个资源就用第二个资源代替&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

***
### 、web worker，web worker
是运行在浏览器后台的js程序，他不影响主程序的运行，是另开的一个js线程，可以用这个线程执行复杂的数据操作，然后把操作结果通过postMessage传递给主线程，这样在进行复杂且耗时的操作时就不会阻塞主线程了。
***
### 标签页的通信
localstorge在一个标签页里被添加、修改或删除时，都会触发一个storage事件，通过在另一个标签页里监听storage事件，即可得到localstorge存储的值，实现不同标签页之间的通信。
标签页1：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input id=&amp;quot;name&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;提交&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;#btn&amp;quot;).click(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var name=$(&amp;quot;#name&amp;quot;).val();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            localStorage.setItem(&amp;quot;name&amp;quot;, name);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

标签页2：
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        window.addEventListener(&amp;quot;storage&amp;quot;, function(event)&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(event.key + &amp;quot;=&amp;quot; + event.newValue);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

使用cookie+setInterval，将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。
标签页1： 
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input id=&amp;quot;name&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;btn&amp;quot; value=&amp;quot;提交&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $(&amp;quot;#btn&amp;quot;).click(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var name=$(&amp;quot;#name&amp;quot;).val();    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            document.cookie=&amp;quot;name=&amp;quot;+name;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

标签页2：  
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(function()&amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        function getCookie(key) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return JSON.parse(&amp;quot;&amp;#123;\&amp;quot;&amp;quot; + document.cookie.replace(/;\s+/gim,&amp;quot;\&amp;quot;,\&amp;quot;&amp;quot;).replace(/=/gim, &amp;quot;\&amp;quot;:\&amp;quot;&amp;quot;) + &amp;quot;\&amp;quot;&amp;#125;&amp;quot;)[key];    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setInterval(function()&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;quot;name=&amp;quot; + getCookie(&amp;quot;name&amp;quot;));    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;, 10000);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

# 重排重绘
## 浏览器从下载文档到显示页面的过程
  * 浏览器引擎会解析HTML文档来构建DOM树
  * 根据DOM元素的几何属性构建一棵用于渲染的树
渲染树的每个节点都有大小和边距等属性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了
  * 根据渲染树节点的样式属性绘制出页面。
## 重绘redraw
重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。
重绘不会带来重新布局，并不一定伴随重排。
## 重排
重排是几何上的改变，可以理解为渲染树需要重新计算。
###  触发重排：
   * 1.DOM元素的几何属性变化（定位，位置）
      * 渲染树中的相关节点就会失效，重新构建渲染树中失效的节点，根据新的渲染树重新绘制这部分页面
       * 例如：动画
       * 一个元素重排可能会使其他元素重排重绘
    * 2.DOM树的结构变化（dom增删，移动）
        * 例如节点的增减、移动等，也会触发重排
     * 3.获取某些属性（offsetWidth和offsetHeight）
　浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。
所以，在多次使用这些值时应进行缓存。

### 减少重排
 * 将多次改变样式属性封装成一个类，用js加上类
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div.changeDiv &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background: #eee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color: #093;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(‘changeDiv’).className = ‘changeDiv’;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

   * 将需要多次重排的元素，position属性设为absolute或fixed
这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。
* 最小化DOM深度
减少你的DOM树的大小和每个分支的元素数量。你的文档越小，越浅，重排就会越快。如果你不支持旧版的浏览器，可能你要移除不需要的包裹元素。
* 保证n次创建，1次写入。
例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。
* dom 复杂操作时，先隐藏，再显示
由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。
* 
在多次使用这些值时应进行缓存。
## 表格排序考虑到减少重排重绘
保证n次创建，1次写入。

***
# CSS3
## css3的新特性哪些，你都用过哪些 5%
CSS3有哪些新内容，请至少说出5个。

   1）border-radius。CSS3圆角表格

   2）font-effect。以往对网页上的文字加特效只能用filter属性，但是在CSS3中专门制定了一个加文字特效的属性，而且不止加阴影这种效果。

   3）text-underline-style，text-underline-color，text-underline-mode，text-underline-position。丰富了对链接下划线的样式，以往的下划线都是直线，这次可不一样了，有波浪线、点线、虚线等等，更可对下划线的颜色和
位置进行任意改变，哈哈~~下划线的世界从此不再单一。（还有对应顶线和中横线的样式，效果与下划线类似）

   4）font-emphasize-style和font-emphasize-position。我们在做笔记时经常要在文字下点几个点或打个圈什么的，以示重点，CSS3也开始加入了这项功能，这应该在某些特定网页上很有用。

   5）Font-face可以用来加载字体样式，而且它还能够加载服务器端的字体文件，显示客户端没有安装的字体。
***
## 媒体查询具体到语句 5%
作用：媒体查询可以让我们根据设备显示器的特性（如视口宽度、屏幕比例、设备方向：横向或纵向）为其设定CSS样式，检测的媒体特性有 width 、 height 和 color （等）。

##  响应式布局meta,scale 怎样使用media?
### meta,scale
第一步：
 首先需要在html文档中添加以下代码，用来兼容移动设备的显示效果
&lt;meta name=&quot;viewport content=&quot; width=&quot;device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;/&quot;&gt;

&lt;p&gt;ps:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;width=device-width:宽度等于当前设备的宽度&lt;br&gt;initial-scale=1：初始的缩放比例（默认为1）&lt;br&gt;maximum-scale=1：允许用户缩放到得最大比例（默认为1）&lt;br&gt;user-scalable=no：用户不能手动缩放&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第二步：媒体查询-语句&quot;&gt;&lt;a href=&quot;#第二步：媒体查询-语句&quot; class=&quot;headerlink&quot; title=&quot;第二步：媒体查询 语句&quot;&gt;&lt;/a&gt;第二步：媒体查询 语句&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:720px) and (min-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       background-color:red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:320px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         background-color:blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;css-伪类-5&quot;&gt;&lt;a href=&quot;#css-伪类-5&quot; class=&quot;headerlink&quot; title=&quot;css 伪类 5%&quot;&gt;&lt;/a&gt;css 伪类 5%&lt;/h2&gt;&lt;h3 id=&quot;伪类选择器&quot;&gt;&lt;a href=&quot;#伪类选择器&quot; class=&quot;headerlink&quot; title=&quot;伪类选择器&quot;&gt;&lt;/a&gt;伪类选择器&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;p:first-of-type	选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:last-of-type	选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-of-type	选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:only-child		选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p:nth-child(2)	选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;伪类-伪元素-1&quot;&gt;&lt;a href=&quot;#伪类-伪元素-1&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h3&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;说一下flex-3&quot;&gt;&lt;a href=&quot;#说一下flex-3&quot; class=&quot;headerlink&quot; title=&quot;说一下flex 3%&quot;&gt;&lt;/a&gt;说一下flex 3%&lt;/h2&gt;&lt;h3 id=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot;&gt;&lt;a href=&quot;#请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？&quot; class=&quot;headerlink&quot; title=&quot;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&quot;&gt;&lt;/a&gt;请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？&lt;/h3&gt;&lt;p&gt; 一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。&lt;br&gt;   较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。&lt;br&gt;   采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。&lt;br&gt;   它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。&lt;br&gt;   常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。&lt;br&gt;   在布局上有了比以前更加灵活的空间&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css3/flexbox-basics.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css3/flexbox-basics.html&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;动画-2&quot;&gt;&lt;a href=&quot;#动画-2&quot; class=&quot;headerlink&quot; title=&quot;动画 2%&quot;&gt;&lt;/a&gt;动画 2%&lt;/h2&gt;&lt;p&gt;  二维动画——animation  这个属性必须配合@keyframes动画关键帧来使用。keyframes里面包含一个百分数，后面跟上在这段时间内变换的css样式。&lt;br&gt;     animation是一个复合属性，它包括以下几个组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.animation-name：执行动画的keyframes的名字。&lt;ul&gt;
&lt;li&gt;2.animation-duration：执行动画的总时长。&lt;/li&gt;
&lt;li&gt;3.animation-timing-function：指定过渡函数。&lt;/li&gt;
&lt;li&gt;4.animation-delay：执行延迟时间。&lt;/li&gt;
&lt;li&gt;5.animation-direction：动画播放的方式。这个属性的值主要有：normal正常播放模式、reverse倒序播放、alternate&lt;pre&gt;&lt;code&gt;动画在奇数次正向播放偶数次倒序播放、alternate-reverse动画在奇数次倒序播放偶数次正向播放。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;6.animation-iteration-count：动画执行的次数。infinite是无限次，写一个数字就是要执行几次。&lt;ul&gt;
&lt;li&gt;7.animation-fill-mode：执行完动画后物体停止的位置。forwards是停在结束的位置上、backwards是快速执行初始帧&lt;pre&gt;&lt;code&gt;（这个最好配合延迟来观察）、
none是回到初始帧的位置、both是同时具有forwards和backwards的效果。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;8.animation-play-state：控制动画的播放状态。running是播放、paused是暂停。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;css3动画卡了&quot;&gt;&lt;a href=&quot;#css3动画卡了&quot; class=&quot;headerlink&quot; title=&quot;css3动画卡了&quot;&gt;&lt;/a&gt;css3动画卡了&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;transform: transition3d(0, 0, 0);
transform: translateZ(0);
这两个属性可以开启GPU加速模式
然而面试官问我为什么，你知道原理么？
这两个属性都会开启GPU硬件加速模式，从而让浏览器在渲染动画的时候从CPU转向GPU。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;移动端&quot;&gt;&lt;a href=&quot;#移动端&quot; class=&quot;headerlink&quot; title=&quot;移动端&quot;&gt;&lt;/a&gt;移动端&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/359985?p=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.v2ex.com/t/359985?p=1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://caibaojian.com/vw-vh.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://caibaojian.com/vw-vh.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://aotu.io/notes/2017/04/28/2017-4-28-CSS-viewport-units/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;移动端适配：&quot;&gt;&lt;a href=&quot;#移动端适配：&quot; class=&quot;headerlink&quot; title=&quot;移动端适配：&quot;&gt;&lt;/a&gt;移动端适配：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通常&lt;br&gt;通常使用响应式布局和弹性布局+媒体查询配置多个响应断点&lt;br&gt;缺陷：布局在响应断点范围内的分辨率下维持不变，而在响应断点切换的瞬间，布局带来断层式的切换变化，如同卡带的唱机般“咔咔咔”地一下又一下。&lt;/li&gt;
&lt;li&gt;rem单位动态计算&lt;br&gt;rem单位的动态计算的弹性布局，则是需要在头部内嵌一段脚本来进行监听分辨率的变化来动态改变根元素字体大小，使得 CSS 与 JS 耦合了在一起。&lt;/li&gt;
&lt;li&gt;vh,vw视口单位实现适配&lt;ul&gt;
&lt;li&gt;优点：既能解决响应式断层问题，又能解觉rem决脚本依赖的问题的。&lt;/li&gt;
&lt;li&gt;缺点：由于相对于视口为单位，随着视口增大而增大，失去了最大最小宽度限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;vw+rem&lt;ul&gt;
&lt;li&gt;rem 弹性布局的核心在于动态改变根元素大小，那么我们可以通过：&lt;ul&gt;
&lt;li&gt;给根元素大小设置随着视口变化而变化的 vw 单位，这样就可以实现动态改变其大小。&lt;/li&gt;
&lt;li&gt;限制根元素字体大小的最大最小值，配合g body 加上最大宽度和最小宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;自适应，响应式布局：&quot;&gt;&lt;a href=&quot;#自适应，响应式布局：&quot; class=&quot;headerlink&quot; title=&quot;自适应，响应式布局：&quot;&gt;&lt;/a&gt;自适应，响应式布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置meta viewport&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;目的是：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;网页宽度默认等于屏幕宽度（width=device-width）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ，原始缩放比例（initial-scale=1）为1.0，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;即网页初始大小占屏幕面积的100%。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;媒体查询&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-device-width: 400px) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不指定像素宽度&lt;br&gt;宽度定百分比或者width:auto&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相对大小的字体em,rem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;流动布局&lt;br&gt;各个区块的位置都是浮动的（float），不是固定不变的,绝对定位的使用也要 非常小心&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;meta-viewport&quot;&gt;&lt;a href=&quot;#meta-viewport&quot; class=&quot;headerlink&quot; title=&quot;meta viewport&quot;&gt;&lt;/a&gt;meta viewport&lt;/h2&gt;&lt;h3 id=&quot;视窗基本属性&quot;&gt;&lt;a href=&quot;#视窗基本属性&quot; class=&quot;headerlink&quot; title=&quot;视窗基本属性&quot;&gt;&lt;/a&gt;视窗基本属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;width：控制 viewport 的大小，你可以给它指定一个值，如：600，或者甚至还可以给它一个特殊的值，如：device-width，device-width为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）。&lt;/li&gt;
&lt;li&gt;height：与 width 相对应，指定viewport 高度。&lt;/li&gt;
&lt;li&gt;initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例。&lt;/li&gt;
&lt;li&gt;maximum-scale：允许用户缩放到的最大比例。&lt;/li&gt;
&lt;li&gt;minimum-scale：允许用户缩放到的最小比例。&lt;/li&gt;
&lt;li&gt;user-scalable：是否允许用户手动缩放。&lt;h3 id=&quot;三个视窗&quot;&gt;&lt;a href=&quot;#三个视窗&quot; class=&quot;headerlink&quot; title=&quot;三个视窗&quot;&gt;&lt;/a&gt;三个视窗&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;布局视窗：css定义的网页内容宽度，网页内容宽度跟移动端浏览器窗口无关&lt;/li&gt;
&lt;li&gt;视觉视窗：用户正看的区域window.innerWidth/Height&lt;/li&gt;
&lt;li&gt;理想视窗：定义理想视口是浏览器的工作，而不是设备或操作系统的工作。因此，同一设备上的不同浏览器拥有不同的理想视口。screen.width/height返回是理想视口的尺寸&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/xiaohuochai/p/5496995.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;三个视窗&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://yunkus.com/meta-viewport-usage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta-viewport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;媒体查询&quot;&gt;&lt;a href=&quot;#媒体查询&quot; class=&quot;headerlink&quot; title=&quot;媒体查询&quot;&gt;&lt;/a&gt;媒体查询&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:480px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; .ads &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   display:none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (min-width:600px) and (max-width:900px)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  body &amp;#123;background-color:#f5f5f5;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;flex弹性布局：-1&quot;&gt;&lt;a href=&quot;#flex弹性布局：-1&quot; class=&quot;headerlink&quot; title=&quot;flex弹性布局：&quot;&gt;&lt;/a&gt;flex弹性布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/li&gt;
&lt;li&gt;父块元素：display: flex;&lt;/li&gt;
&lt;li&gt;父行级元素：display: inline-flex;&lt;/li&gt;
&lt;li&gt;设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/li&gt;
&lt;li&gt;具体描述：&lt;br&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;ul&gt;
&lt;li&gt;父亲容器属性：&lt;ul&gt;
&lt;li&gt;flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li&gt;justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/li&gt;
&lt;li&gt;孩子項目屬性：&lt;ul&gt;
&lt;li&gt;order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/li&gt;
&lt;li&gt;flex-basis：属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。&lt;/li&gt;
&lt;li&gt;flex-grow：属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大&lt;/li&gt;
&lt;li&gt;flex-shrink：属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。&lt;/li&gt;
&lt;li&gt;align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;br&gt;【问题】：&lt;br&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;br&gt;【答案】：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;flex-grow:0; 定义弹性盒子项的拉伸因子，即子项分配父项剩余空间的比，默认值为 0flex-shrink:1; 指定了 flex 元素的收缩规则，子项的收缩所占的份数，默认值为1 [ 当所有子项相加的宽度大于父项的宽度，每个子项减少的多出的父项宽度的 1/n ]felx-basis:auto; 指定了 flex 元素在主轴方向上的初始大小，即子项的宽度&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;grid-system-，网格布局，栅格化&quot;&gt;&lt;a href=&quot;#grid-system-，网格布局，栅格化&quot; class=&quot;headerlink&quot; title=&quot;grid system ，网格布局，栅格化&quot;&gt;&lt;/a&gt;grid system ，网格布局，栅格化&lt;/h2&gt;&lt;p&gt;栅格化？&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/dojo-lzz/p/4621627.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dojo-lzz/p/4621627.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.w3cplus.com/css/learncssgrid.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/css/learncssgrid.html&lt;/a&gt;&lt;br&gt;网格布局的好处？&lt;br&gt;规范网页中的版面布局以及信息分布，让网页设计不再无规律可循。&lt;br&gt;有规律的网页设计，可以为网页前端开发带来很多便利。&lt;br&gt;栅格化主要好处是：快速开发、提高整站布局的一致性。&lt;br&gt;缺点：灵活性可能稍嫌不足。但我觉得，划分 12 栏的网格系统其实也已具有较大的灵活性了。&lt;br&gt;&lt;a href=&quot;http://www.chinaz.com/design/2009/0527/77426.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.chinaz.com/design/2009/0527/77426.shtml&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建网格容器&lt;br&gt;display: grid/inline-grid&lt;br&gt;网格项目默认纵项排列&lt;/li&gt;
&lt;li&gt;设置网格项目的高或者宽&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grid-template-columns/rows: 10px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grid-template-columns: 1fr 1fr 2fr;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;px-em-rem，-的区别&quot;&gt;&lt;a href=&quot;#px-em-rem，-的区别&quot; class=&quot;headerlink&quot; title=&quot;px,em,rem，%的区别?&quot;&gt;&lt;/a&gt;px,em,rem，%的区别?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;px&lt;br&gt;相对屏幕分辨率&lt;/li&gt;
&lt;li&gt;&lt;p&gt;em&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若自身定义了font-size，按照自身算&lt;/li&gt;
&lt;li&gt;自身没定义就按照父元素算&lt;/li&gt;
&lt;li&gt;em的值并不是固定的&lt;/li&gt;
&lt;li&gt;具体使用方案：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   body选择器中声明Font-size=62.5%；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   16px*62.5% = 10px&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1em = 10px; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IE浏览器:Font-size=63%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   将你的原来的px数值除以10，然后换上em作为单位；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重新计算那些被放大的字体的em数值。避免字体大小的重复声明。如：行高、字体大小。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;缺陷：整个页面内1em不是一个固定的值，设置em要知道父元素font-size&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rem &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对于html根元素来算，免字体大小逐层复合&lt;/li&gt;
&lt;li&gt;除了IE8及更早版本外，所有浏览器均已支持rem&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;百分比&lt;ul&gt;
&lt;li&gt;相对于父元素的百分比&lt;/li&gt;
&lt;li&gt;使用：如果是随着父容器或者是整体页面布局而改变尺寸，则使用百分比更好，如元素的高度和宽度设置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;知道css新属性-vw-vh-？【4】&quot;&gt;&lt;a href=&quot;#知道css新属性-vw-vh-？【4】&quot; class=&quot;headerlink&quot; title=&quot;知道css新属性 vw vh ？【4】&quot;&gt;&lt;/a&gt;知道css新属性 vw vh ？【4】&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义&lt;ul&gt;
&lt;li&gt;css3的新单位&lt;/li&gt;
&lt;li&gt;css3引入的”vw”和”vh”基于宽度/高度相对于窗口大小&lt;/li&gt;
&lt;li&gt;”vw”=”view width”, “vh”=”view height”; &lt;/li&gt;
&lt;li&gt;相对于浏览器窗口的大小定义的最佳方式&lt;/li&gt;
&lt;li&gt;字体大小会随着你窗口改变而改变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用&lt;br&gt;根据&lt;a href=&quot;https://drafts.csswg.org/css-values-3/#viewport-relative-lengths&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3规范&lt;/a&gt;，视口单位主要包括以下4个：·&lt;br&gt;vw : 1vw 等于视口宽度的1%&lt;br&gt;vh : 1vh 等于视口高度的1%&lt;br&gt;vmin : 选取 vw 和 vh 中最小的那个&lt;br&gt;vmax : 选取 vw 和 vh 中最大的那个&lt;br&gt;视口单位区别于%单位，视口单位是依赖于视口的尺寸，根据视口尺寸的百分比来定义的；而%单位则是依赖于元素的祖先元素。&lt;/li&gt;
&lt;li&gt;兼容性&lt;br&gt;兼容主流浏览,IE兼容IE10&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;设备像素物理像素？&quot;&gt;&lt;a href=&quot;#设备像素物理像素？&quot; class=&quot;headerlink&quot; title=&quot;设备像素物理像素？&quot;&gt;&lt;/a&gt;设备像素物理像素？&lt;/h2&gt;&lt;h3 id=&quot;设备像素-物理像素&quot;&gt;&lt;a href=&quot;#设备像素-物理像素&quot; class=&quot;headerlink&quot; title=&quot;设备像素(物理像素)&quot;&gt;&lt;/a&gt;设备像素(物理像素)&lt;/h3&gt;&lt;p&gt;又叫 物理像素，设备能控制显示的最小单位，&lt;/p&gt;
&lt;h3 id=&quot;设备独立像素（css像素）&quot;&gt;&lt;a href=&quot;#设备独立像素（css像素）&quot; class=&quot;headerlink&quot; title=&quot;设备独立像素（css像素）&quot;&gt;&lt;/a&gt;设备独立像素（css像素）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;独立于设备的用于逻辑衡量像素的单位。平时用的虚拟像素，但不是屏幕分辨率。&lt;/li&gt;
&lt;li&gt;移动端，PC端通过screen.width/height获取的这个值是设备独立像素（CSS 像素），而不是设备的屏幕分辨率，因为设备的屏幕分辨率对于WEB开发者来说是无法通过代码来获得的，是完全透明的。 &lt;h3 id=&quot;物理像素与设备独立像素&quot;&gt;&lt;a href=&quot;#物理像素与设备独立像素&quot; class=&quot;headerlink&quot; title=&quot;物理像素与设备独立像素&quot;&gt;&lt;/a&gt;物理像素与设备独立像素&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;在PC端浏览器默认情况下（100%，即页面没被缩放），一个物理像素 = 一个设备独立像素&lt;/li&gt;
&lt;li&gt;在移动端时候，一般物理像素与设备独立像素不相等，有一定的换算关系。&lt;br&gt;设备像素比 = 物理像素/设备独立像素（在某个方向上）&lt;/li&gt;
&lt;li&gt;获取设备像素比 : window.devicePixelRatio&lt;h3 id=&quot;PPI&quot;&gt;&lt;a href=&quot;#PPI&quot; class=&quot;headerlink&quot; title=&quot;PPI&quot;&gt;&lt;/a&gt;PPI&lt;/h3&gt;像素密度（pixel density）.&lt;br&gt;全称是（pixel per inch）就是每英寸内有多少个设备像素点.&lt;br&gt;PPI的值越高，画质越好，也就是越细腻，看起来更有逼格。&lt;br&gt;标准的PPI是160, 不过现在屏幕标准的少了, 都超过了160.&lt;br&gt;PPI 值超过300的叫做超高密度屏幕，Apple 给它换了个高大尚的名称：Retina视网膜屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://yunkus.com/physical-pixel-device-independent-pixels/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设备像素&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/af6dad66e49a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;物理像素&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;用宽确定高，百分比（元素宽度为窗口的多少）&quot;&gt;&lt;a href=&quot;#用宽确定高，百分比（元素宽度为窗口的多少）&quot; class=&quot;headerlink&quot; title=&quot;用宽确定高，百分比（元素宽度为窗口的多少）&quot;&gt;&lt;/a&gt;用宽确定高，百分比（元素宽度为窗口的多少）&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 使用padding，根据宽来定高，注意，元素有内容时，需要去除文本高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;width: 50%;padding: 25% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2使用vw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; width: 50vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; height: 50vw;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;css一个正方形，宽度是屏幕的一半，水平垂直居中&quot;&gt;&lt;a href=&quot;#css一个正方形，宽度是屏幕的一半，水平垂直居中&quot; class=&quot;headerlink&quot; title=&quot;css一个正方形，宽度是屏幕的一半，水平垂直居中&quot;&gt;&lt;/a&gt;css一个正方形，宽度是屏幕的一半，水平垂直居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;vw 获取屏幕的width&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直水平居中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;width: 50vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;height: 50vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transform: translate(-50%, -50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background: pink;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当元素无内容的时候，padding: 25% 0;可以当作元素的高；&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;width: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;padding: 25% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transform: translate(-50%, -50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;background: red;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;ul-gt-li列表，小于480时一行显示两个，大于480-lt-960时候一行显示三个&quot;&gt;&lt;a href=&quot;#ul-gt-li列表，小于480时一行显示两个，大于480-lt-960时候一行显示三个&quot; class=&quot;headerlink&quot; title=&quot;ul&amp;gt;li列表，小于480时一行显示两个，大于480&amp;lt;960时候一行显示三个&quot;&gt;&lt;/a&gt;ul&amp;gt;li列表，小于480时一行显示两个，大于480&amp;lt;960时候一行显示三个&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;media ,vw,可以弄出元素的宽高&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@media screen and (max-width:480px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               width: 38vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               height: 38vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               background: pink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-left: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-bottom: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       @media screen and (min-width:481px)and (max-width:960px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               width: 27vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               height: 27vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               background: greenyellow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-left: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-bottom: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       @media screen and (min-width:962px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               width: 30vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               height: 30vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               background: purple;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-left: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               margin-bottom: 1vw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ul &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           position: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;响应式&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (max-width:480px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 44%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 22% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: pink;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (min-width:480px)and (max-width:960px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 30%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 15% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: green;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ul &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            position: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ul&amp;gt;li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list-style-type: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @media screen and (min-width:960px) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            li &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                width: 30%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                padding: 15% 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                background: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-left: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                margin-bottom: 1%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;apos;con&amp;apos;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;4&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;5&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;li&amp;gt;6&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;h2 id=&quot;js数据类型有哪些-5&quot;&gt;&lt;a href=&quot;#js数据类型有哪些-5&quot; class=&quot;headerlink&quot; title=&quot;js数据类型有哪些 5%&quot;&gt;&lt;/a&gt;js数据类型有哪些 5%&lt;/h2&gt;&lt;p&gt;数据类型分为：简单数据类型和引用&lt;br&gt; (五大)简单数据类型 ：数字 ，字符串 ， 布尔值(true/false)， null，undifined&lt;br&gt;引用：数组，函数，正则表达式，对象&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;null-和undefined&quot;&gt;&lt;a href=&quot;#null-和undefined&quot; class=&quot;headerlink&quot; title=&quot;null 和undefined&quot;&gt;&lt;/a&gt;null 和undefined&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相似性：&lt;ul&gt;
&lt;li&gt;undefined和null在if语句中，都会被自动转为false&lt;ul&gt;
&lt;li&gt;undefined == null // true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;null：&lt;ul&gt;
&lt;li&gt;null表示”没有对象”，即该处不应该有值&lt;/li&gt;
&lt;li&gt;用法：&lt;ul&gt;
&lt;li&gt;原型链的终点&lt;/li&gt;
&lt;li&gt;作为函数的参数，表示该函数的参数不是对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;undefined&lt;ul&gt;
&lt;li&gt;undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义&lt;/li&gt;
&lt;li&gt;典型用法是：&lt;ul&gt;
&lt;li&gt;变量定义了没有赋值&lt;/li&gt;
&lt;li&gt;函数应该传递的参数没有传递&lt;/li&gt;
&lt;li&gt;对象定义属性没有赋值&lt;/li&gt;
&lt;li&gt;函数没有返回值的时候 返回undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;简单说一下作用域与作用域链-5&quot;&gt;&lt;a href=&quot;#简单说一下作用域与作用域链-5&quot; class=&quot;headerlink&quot; title=&quot;简单说一下作用域与作用域链 5%&quot;&gt;&lt;/a&gt;简单说一下作用域与作用域链 5%&lt;/h2&gt;&lt;h3 id=&quot;作用域和作用域链&quot;&gt;&lt;a href=&quot;#作用域和作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域和作用域链&quot;&gt;&lt;/a&gt;作用域和作用域链&lt;/h3&gt;&lt;p&gt;因为当某个函数第一次被调用时候，会创建相应的执行环境和作用域链&lt;br&gt;并把作用域链赋值给内部属性：scope,使用this,arguments和函数的初始参数为活动对象（活动对象就是函数执行上下文中的变量）&lt;br&gt;当在函数中访问变量的时候，需要在作用域链中进行查找，先访问自己的内部的，再访问外部的，再访问外部外部的，直到作用域链的终点：全局执行环境&lt;br&gt;创建函数时，会创建包含函数外部对象的 作用域链，作用域链保存在当前函数的scope中&lt;br&gt;调用函数时，会创建执行环境，创建执行环境的作用域链：是靠复制函数的scope里面的对象&lt;br&gt;作用域链的本质是指向变量对象的指针链表，指引用，不实际包含变量对象&lt;/p&gt;
&lt;h3 id=&quot;谈一下关于作用域&quot;&gt;&lt;a href=&quot;#谈一下关于作用域&quot; class=&quot;headerlink&quot; title=&quot;谈一下关于作用域&quot;&gt;&lt;/a&gt;谈一下关于作用域&lt;/h3&gt;&lt;p&gt;  函数里外变量名相同,取函数内部的。Es6 作用域和他一样吗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es5函数作用域，作用域链&lt;br&gt;es5只有全局作用域和函数作用域&lt;ul&gt;
&lt;li&gt;作用域&lt;br&gt;作用域指的是变量的作用范围。&lt;/li&gt;
&lt;li&gt;作用域链&lt;br&gt;函数内部作用域由函数的参数，局部变量，函数构成。内部作用域和外部的作用域一层层的链接起来形成作用域链。&lt;br&gt;当在函数内部要访问一个变量的时候，首先查找自己的内部作用域有没有这个变量，如果没有就到这个函数所在的外层作用域中找，直到到window所在的作用域。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;es6作用域&lt;br&gt;函数内部访问一个变量,由于块级作用域，只能在函数内部查找是否有这个变量，若函数内部没有这个变量还去访问会报错。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;原型-原型链-原型继承（说一下原型-原型链，考了几道题-让你现在作答）-5&quot;&gt;&lt;a href=&quot;#原型-原型链-原型继承（说一下原型-原型链，考了几道题-让你现在作答）-5&quot; class=&quot;headerlink&quot; title=&quot;原型 原型链 原型继承（说一下原型 原型链，考了几道题 让你现在作答） 5%&quot;&gt;&lt;/a&gt;原型 原型链 原型继承（说一下原型 原型链，考了几道题 让你现在作答） 5%&lt;/h2&gt;&lt;p&gt;请简单说一下原型,原型链，继承&lt;/p&gt;
&lt;h3 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来由：原型是在创建对象时原型模式里提出的概念&lt;/li&gt;
&lt;li&gt;定义：创建的每个函数都有一个原型prototype属性，这个属性是一个指针,指向一个对象，这个对象包含着这个函数所有实例可以共享的函数和方法。&lt;br&gt;这个原型对象就是:函数每个原型&lt;/li&gt;
&lt;li&gt;优点：可以让所有实例共享原型对象中的属性和方法&lt;/li&gt;
&lt;li&gt;缺点：因为共享的特性，实例改写引用类型属性 会更改原型对象属性 使得其他实例属性也改变；还有一个：无法给函数初始化参数&lt;/li&gt;
&lt;li&gt;prototype与在构造函数中定义属性和方法有什么区别？&lt;ul&gt;
&lt;li&gt;构造函数中的属性和方法，每个实例都将构造函数中的所有属性创建一遍副本，&lt;/li&gt;
&lt;li&gt;缺点：无法共享一套属性 &lt;ul&gt;
&lt;li&gt;优点：每个实例改写属性后互不影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用构造函数模式+原型模式创建对象取两者优点&lt;ul&gt;
&lt;li&gt;可传递参数&lt;/li&gt;
&lt;li&gt;每个实例都可以利用原型对象共享方法&lt;/li&gt;
&lt;li&gt;将引用类型属性放到构造函数中，实例改写后互不影响&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name, age, job) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.job = job;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.friends = [&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor: Person,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sayName: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;来由：原型链这个概念是在讲继承的时候提出的&lt;/li&gt;
&lt;li&gt;定义：原型与实例层层递进构成的链条叫做原型链。某个原型对象等于另一函数的实例:child.prototype = new father()，孩子原型.proto指向父原型，父原型的.proto指向 父原型的原型，直到Object.prototype.proto = null&lt;/li&gt;
&lt;li&gt;确定原型和实例的关系&lt;ul&gt;
&lt;li&gt;instance instanceof SubType&lt;/li&gt;
&lt;li&gt;father.prototype.isPrototypeOf(child)&lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型链继承 child.prototype = new father()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问重写父亲引用属性，会更改父原型&lt;/li&gt;
&lt;li&gt;创建子类无法给父构造函数传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.property = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.getSuperValue = function() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.property;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//先继承&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = new SuperType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//再添加方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.getSubValue = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.subproperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var instance = new SubType(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance.getSuperValue()); //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//SuperType.prototype : constructor,getSuperValue(),proto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//SubType.prototype : proto, property = true;getSubValue()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// instance : proto , subproperty = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//确定原型和实例的关系 instanceof /father.prototype.isPrototypeOf(child)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof SubType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof SuperType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(instance instanceof Object);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;借用构造函数继承/经典继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：在子类构造函数中调用父类构造函数 ，子向父类传递参数&lt;/li&gt;
&lt;li&gt;子类中Father.apply(this,param)&lt;/li&gt;
&lt;li&gt;缺点：无法达到共享或者复用性（构造模式的问题）&lt;/li&gt;
&lt;li&gt;优点：可给父类传递参数，副本属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //在子类构造函数中调用父类构造函数 实现了继承 还传递了参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, &amp;apos;carry&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //给子添加 属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = 19;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var instance = new SubType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instance.name; //carry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;组合继承（原型链继承+借用构造函数继承）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：原型链继承(可继承方法：达到共享)+借用构造函数继承(可继承属性：有自己的副本属性)&lt;/li&gt;
&lt;li&gt;组合继承是js中最常用的继承方式&lt;/li&gt;
&lt;li&gt;优点：属性互不影响，又可以共用方法，两全其美&lt;/li&gt;
&lt;li&gt;缺点：要调用两次父类的构造函数，造成了属性副本在子类原型中的多余 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.colors = [&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.sayName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType(name, age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //继承实例属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//继承父类方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype = new SuperType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.sayAge = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var i1 = new SubType(&amp;apos;bill&amp;apos;, 18);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.colors.push(&amp;apos;white&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(i1.colors); //&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;,&amp;apos;white&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayAge(); //18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayName(); //bill&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var i2 = new SubType(&amp;apos;carry&amp;apos;, 28)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i2.colors; //&amp;apos;green&amp;apos;, &amp;apos;red&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i1.sayAge(); //28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原型式继承 var childObj = Object.create(fatherObj) //Object.create() = create()  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有必要兴师动众的创建构造函数的情况下， 只想让两个对象保持差不多一致&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var peron = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;carry1&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friends: [&amp;apos;f1&amp;apos;, &amp;apos;f2&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var np1 = Object.create(peron);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np1.name = &amp;apos;carry2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np1.friends.push(&amp;apos;f3&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var np2 = Object.create(peron, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value: &amp;apos;carry3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(np2.name); //carry3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;peron.friends; //f1,f2,f3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄生式继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装一个仅仅用于实现继承过程的函数 该函数 完成继承操作 然后返回子对象.&lt;/li&gt;
&lt;li&gt;寄生式继承就是利用原型式继承的中Object.create(fatherObj)原理实现实例属性的继承，但是又可以在clone函数中定义自己的方法&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createClone(father) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var clone = Object.create(father);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clone.sayHi = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(&amp;apos;i am clone&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return clone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var peron = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;carry1&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    friends: [&amp;apos;f1&amp;apos;, &amp;apos;f2&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var child = createClone(Person);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child.name = &amp;apos;carry2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child.sayHi(); //&amp;apos;i am clone&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;寄生组合式继承&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用 借用构造函数 来继承属性  使用 原型链的混成形式来继承 方法&lt;/li&gt;
&lt;li&gt;用来完善组合式继承：因为组合式继承 要调用两次父类的构造函数，造成了在子类中又创建了一遍属性&lt;/li&gt;
&lt;li&gt;优点：寄生式组合继承 只使用了一次 父类构造函数，避免了child.prototype上创建没必要的属性，原型链的结构还可以保持不变&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function inheritPrototype(subType, superType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var prototype = Object.create(SuperType.prototype); //创建对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    prototype.constructor = subType; //增强对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subType.prototype = prototype; //指定对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SuperType(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.colors = [&amp;apos;green&amp;apos;, &amp;apos;red&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SuperType.prototype.sayName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function SubType(name, age) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //继承属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SuperType.call(this, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//继承方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inheritPrototype(SubType, SuperType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SubType.prototype.sayAge = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(this.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;&lt;p&gt;闭包大纲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是闭包？&lt;/li&gt;
&lt;li&gt;闭包的原理？&lt;/li&gt;
&lt;li&gt;平时如何用闭包，闭包能解决什么问题？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;a：说一下什么是闭包&quot;&gt;&lt;a href=&quot;#a：说一下什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;a：说一下什么是闭包?&quot;&gt;&lt;/a&gt;a：说一下什么是闭包?&lt;/h3&gt;&lt;p&gt;使用着另一个函数作用域中的变量的函数，保留变量并不被回收&lt;/p&gt;
&lt;h3 id=&quot;b-闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot;&gt;&lt;a href=&quot;#b-闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot; class=&quot;headerlink&quot; title=&quot;b:闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&quot;&gt;&lt;/a&gt;b:闭包的原理（深刻一点，包括作用域链，垃圾回收机制）&lt;/h3&gt;&lt;p&gt;之所以内层函数可以访问外的变量是因为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部函数的作用域链中包含着外层函数的变量对象（活动对象和全局变量对象）&lt;/li&gt;
&lt;li&gt;外层函数执行完毕后，它的执行环境和作用域链会被销毁，但被闭包引用的变量对象不被销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何销毁闭包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var a = outerFunction(‘123’);&lt;/li&gt;
&lt;li&gt;使用闭包后,想销毁闭包的作用域链&lt;/li&gt;
&lt;li&gt;a = null;//通知垃圾回收进行清除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;c-你是如何应用闭包的&quot;&gt;&lt;a href=&quot;#c-你是如何应用闭包的&quot; class=&quot;headerlink&quot; title=&quot;c:你是如何应用闭包的?&quot;&gt;&lt;/a&gt;c:你是如何应用闭包的?&lt;/h3&gt;&lt;p&gt;使用闭包定义私有方法和变量&lt;/p&gt;
&lt;h4 id=&quot;1-模拟块级作用域（私有变量和作用域）&quot;&gt;&lt;a href=&quot;#1-模拟块级作用域（私有变量和作用域）&quot; class=&quot;headerlink&quot; title=&quot;1:模拟块级作用域（私有变量和作用域）&quot;&gt;&lt;/a&gt;1:模拟块级作用域（私有变量和作用域）&lt;/h4&gt;&lt;p&gt;只让for循环内访问变量i，立即函数模拟块级作用域，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo3(count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(&amp;apos;inner:&amp;apos; + i); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;outer:&amp;apos; + i); //5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo3(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用立即函数和闭包定义块级作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo4(count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //块作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (var i = 0; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;inner:&amp;apos; + i); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&amp;apos;outer:&amp;apos; + i); //报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2：构造模式，定义接口，让外界可以访问函数的私有变量&quot;&gt;&lt;a href=&quot;#2：构造模式，定义接口，让外界可以访问函数的私有变量&quot; class=&quot;headerlink&quot; title=&quot;2：构造模式，定义接口，让外界可以访问函数的私有变量&quot;&gt;&lt;/a&gt;2：构造模式，定义接口，让外界可以访问函数的私有变量&lt;/h4&gt;&lt;p&gt;//定义构造函数，使用闭包访问函数的私有变量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Person(name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setName = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new Person(&amp;apos;carry&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var k =  a.getName(); //carry;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.setName(&amp;apos;bill&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.getName(); //bill;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3：原型模式-私有作用域-定义接口&quot;&gt;&lt;a href=&quot;#3：原型模式-私有作用域-定义接口&quot; class=&quot;headerlink&quot; title=&quot;3：原型模式 私有作用域 定义接口&quot;&gt;&lt;/a&gt;3：原型模式 私有作用域 定义接口&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义私有变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var name = &amp;apos;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //定义私有方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //定义接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person.prototype.getName = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Person.prototype.setName = function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4：模块化&quot;&gt;&lt;a href=&quot;#4：模块化&quot; class=&quot;headerlink&quot; title=&quot;4：模块化&quot;&gt;&lt;/a&gt;4：模块化&lt;/h4&gt;&lt;p&gt;retrun {f:f}&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function CoolModule() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var something = &amp;quot;cool&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var another = [1, 2, 3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function doSomething() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert( something );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function doAnother() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert( another.join( &amp;quot; ! &amp;quot; ) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doSomething: doSomething,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        doAnother: doAnother&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var foo = CoolModule();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.doSomething(); // cool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.doAnother(); // 1 ! 2 ! 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;d-使用闭包应该注意？&quot;&gt;&lt;a href=&quot;#d-使用闭包应该注意？&quot; class=&quot;headerlink&quot; title=&quot;d:使用闭包应该注意？&quot;&gt;&lt;/a&gt;d:使用闭包应该注意？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&lt;/li&gt;
&lt;li&gt;2:闭包中的this指向全局环境，无法正常的访问作用域中的this和arguments,&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot;&gt;&lt;a href=&quot;#1-闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot; class=&quot;headerlink&quot; title=&quot;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&quot;&gt;&lt;/a&gt;1:闭包只能取某变量的最后一个值（for循环中的匿名函数）&lt;/h4&gt;&lt;p&gt;下面函数的输出结果是 10个10&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result[i] = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用立即函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo1() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (var i = 0; i &amp;lt; 10; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result[i] = function(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                console.log(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-闭包中的this指向-window&quot;&gt;&lt;a href=&quot;#2-闭包中的this指向-window&quot; class=&quot;headerlink&quot; title=&quot;2:闭包中的this指向 window&quot;&gt;&lt;/a&gt;2:闭包中的this指向 window&lt;/h4&gt;&lt;p&gt;this在运行时是基于函数的执行环境绑定的&lt;br&gt;匿名函数的执行环境具有全局性，闭包中的this指向window&lt;br&gt;闭包在执行环境中搜索 this和arguments&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var name = &amp;apos;the window&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: &amp;apos;my obj&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName: function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var that = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return that.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(obj.getName());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;d-闭包的优缺点&quot;&gt;&lt;a href=&quot;#d-闭包的优缺点&quot; class=&quot;headerlink&quot; title=&quot;d:闭包的优缺点&quot;&gt;&lt;/a&gt;d:闭包的优缺点&lt;/h3&gt;&lt;p&gt;优点：避免全局变量的污染，存在私有变量，使一个成员常驻内存。&lt;br&gt;缺点：闭包会常驻内存，会增大内存使用，使用不当容易造成内存溢出。&lt;br&gt;闭包会保存外层函数的变量对象，会占用更多的内存。&lt;br&gt;V 8优化后的js引擎会尝试回收被闭包占用的内存，但还需慎重使用闭包&lt;/p&gt;
&lt;h3 id=&quot;f-如何创建闭包&quot;&gt;&lt;a href=&quot;#f-如何创建闭包&quot; class=&quot;headerlink&quot; title=&quot;f:如何创建闭包&quot;&gt;&lt;/a&gt;f:如何创建闭包&lt;/h3&gt;&lt;p&gt;1.定义外层函数，和变量。&lt;br&gt;2.定义内层函数，并对外部函数的变量进行使用。&lt;br&gt;3.返回内层函数。&lt;br&gt;返回的内层函数，在其他地方被调用，仍然保存着外函数的变量。（通过访问闭包来访问变量，闭包使变量为私有变量）&lt;/p&gt;
&lt;h3 id=&quot;作用域和作用域链-1&quot;&gt;&lt;a href=&quot;#作用域和作用域链-1&quot; class=&quot;headerlink&quot; title=&quot;作用域和作用域链&quot;&gt;&lt;/a&gt;作用域和作用域链&lt;/h3&gt;&lt;p&gt;因为当某个函数第一次被调用时候，会创建相应的执行环境和作用域链&lt;br&gt;并把作用域链赋值给内部属性：scope,使用this,arguments和函数的初始参数为活动对象（活动对象就是函数执行上下文中的变量）&lt;br&gt;当在函数中访问变量的时候，需要在作用域链中进行查找，先访问自己的内部的，再访问外部的，再访问外部外部的，直到作用域链的终点：全局执行环境&lt;br&gt;创建函数时，会创建包含函数外部对象的 作用域链，作用域链保存在当前函数的scope中&lt;br&gt;调用函数时，会创建执行环境，创建执行环境的作用域链：是靠复制函数的scope里面的对象&lt;br&gt;作用域链的本质是指向变量对象的指针链表，指引用，不实际包含变量对象&lt;/p&gt;
&lt;h3 id=&quot;内存泄露，垃圾回收机制&quot;&gt;&lt;a href=&quot;#内存泄露，垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;内存泄露，垃圾回收机制&quot;&gt;&lt;/a&gt;内存泄露，垃圾回收机制&lt;/h3&gt;&lt;p&gt;循环引用会导致内存泄露&lt;br&gt;在IE9之前版本使用闭包，会导致一些特殊的问题。例如，闭包的作用域链中保存着html元素，无法被销毁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决 定义访问的dom元素的副本，element = null; //解除对dom对象的引用&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function foo2() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var element = document.getElementById(&amp;apos;someElement&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var id = element.id; //定义让闭包访问的副本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element.onclick = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    element = null; //解除对dom对象的引用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;函数声明与函数表达式&quot;&gt;&lt;a href=&quot;#函数声明与函数表达式&quot; class=&quot;headerlink&quot; title=&quot;函数声明与函数表达式&quot;&gt;&lt;/a&gt;函数声明与函数表达式&lt;/h3&gt;&lt;p&gt;function a (){};&lt;br&gt;a();&lt;br&gt;var a = function(){};&lt;br&gt;a();&lt;/p&gt;
&lt;p&gt;函数声明方式后不能直接加 ()调用，需要 (function a (){})();&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;js事件-5&quot;&gt;&lt;a href=&quot;#js事件-5&quot; class=&quot;headerlink&quot; title=&quot;js事件 5%&quot;&gt;&lt;/a&gt;js事件 5%&lt;/h2&gt;&lt;h3 id=&quot;事件模型&quot;&gt;&lt;a href=&quot;#事件模型&quot; class=&quot;headerlink&quot; title=&quot;事件模型&quot;&gt;&lt;/a&gt;事件模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM0 :原始事件模型&lt;ul&gt;
&lt;li&gt;btn.onclick=function(){}这种类型的事件模型（btn.onclick = null;）&lt;/li&gt;
&lt;li&gt;基于DOM0的事件，对于同一个dom节点而言，只能注册一个， 取后面事件。后边注册的同种事件会覆盖之前注册的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM2&lt;ul&gt;
&lt;li&gt;冒泡 ：事件从事件的发生地（目标元素），一直向上传递，直到window&lt;ul&gt;
&lt;li&gt;IE只支持事件冒泡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;捕获 ：事件是从window向下传递，直到事件的发生地（目标元素）&lt;/li&gt;
&lt;li&gt;设置捕获和冒泡：&lt;ul&gt;
&lt;li&gt;IE：默认事件冒泡&lt;ul&gt;
&lt;li&gt;标准： addEventListener()第三个参数:捕获/冒泡 = true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绑定或者解除事件&lt;ul&gt;
&lt;li&gt;标准：addEventListener(type,handler),removeEventListener(type,handler)&lt;/li&gt;
&lt;li&gt;IE: attachEvent,target.detachEvent(“on”+type,handler);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阻止事件冒泡：evt.stopPropagation()/evt.cancelBubble=true&lt;/li&gt;
&lt;li&gt;获取事件对象(标准||IE):var event=window.event||event; &lt;/li&gt;
&lt;li&gt;获取事件源对象：var target = event.target||event.srcElement;&lt;/li&gt;
&lt;li&gt;同一个节点元素，给她添加捕获和冒泡事件模型，捕获比冒泡快&lt;/li&gt;
&lt;li&gt;绑定多个事件的顺序:比如说一下子注册了3个冒泡事件，那么执行顺序就按照注册的顺序来，先注册先执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h3&gt;&lt;p&gt;应用场景：动态添加 或删除孩子的时候&lt;br&gt;含义：孩子的事委托父亲做&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ul id=&amp;quot;ul1&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;111&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;222&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;333&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;li&amp;gt;444&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   oUl.onclick = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里用父级ul做事件处理，当li被点击时，由于冒泡原理，事件就会冒泡到ul上，因为ul上有点击事件，所以事件就会触发.&lt;br&gt;当然，这里当点击ul的时候，也是会触发的，那么问题就来了，如果我想让事件代理的效果跟直接给节点的事件效果一样怎么办，比如说只有点击li才会触发，不怕，我们有绝招：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　var oUl = document.getElementById(&amp;quot;ul1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　oUl.onclick = function(event)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var ev = event || window.event;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　var target = ev.target || ev.srcElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　if(target.nodeName.toLowerCase() == &amp;apos;li&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　 　　　　　　 alert(123);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　　  alert(target.innerHTML);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##【事件相关问题】&lt;br&gt;1：阻止默认事件：preventDefault():&lt;br&gt;2：阻止冒泡：stopPropagation();&lt;br&gt;3：什么时候会事件捕获？应用事件捕获解决什么问题？&lt;br&gt;你想作全局的点击事件监听，相对于document结点与document下所有的子结点，在某个条件下要求所有的子结点点击无效，这种情况下冒泡模型就解决不了了，而捕获型却非常适合，可以在最顶层结点添加捕获型事件监听器。&lt;br&gt;3：事件冒泡和事件捕获分别有哪些浏览器支持？&lt;br&gt;IE只支持事件冒泡&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浏览器对事件的处理过&quot;&gt;&lt;a href=&quot;#浏览器对事件的处理过&quot; class=&quot;headerlink&quot; title=&quot;浏览器对事件的处理过&quot;&gt;&lt;/a&gt;浏览器对事件的处理过&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;鼠标点击以后 浏览器对于事件的处理详细过程？&lt;br&gt;当(click)点击某个元素，以PC端为例，操作系统会将(click)鼠标点击事件广播到所有应用中，浏览器应用接受到鼠标事件广播后，查询事件源和对应的回函数（按照先捕获后冒泡的顺序），并压入事件处理队列（Event Queue）。Event Loop 则会从中取出回调函数并执行。&lt;ul&gt;
&lt;li&gt;注册（绑定）事件，浏览器干嘛了？&lt;br&gt;DOM.addEventListener，函数以类似”委托”的形式注册到浏览器内建的队列中，等到某个”事件”被触发后，则回Call之前注册的函数。&lt;/li&gt;
&lt;li&gt;执行（响应）事件浏览器干嘛了？&lt;br&gt;当(click)点击某个元素，以PC端为例，操作系统会将(click)鼠标点击事件广播到所有应用中，浏览器应用接受到鼠标事件广播后，查询事件源和对应的回函数（按照先捕获后冒泡的顺序），并压入事件处理队列（Event Queue）。&lt;/li&gt;
&lt;li&gt;异步&lt;br&gt;js中的异步没有从语言上约定其异步的特性，是浏览器/执行引擎来实现，我们所探讨的“异步”都是由执行引擎所赋予的。&lt;br&gt;javascript 是的单线程的，于是就产生了一种任务执行机制叫 eventloop。它维护了一个任务队列，完成一个任务才会开始下一个任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收?&quot;&gt;&lt;/a&gt;垃圾回收?&lt;/h2&gt;&lt;h3 id=&quot;为什么要垃圾回收？&quot;&gt;&lt;a href=&quot;#为什么要垃圾回收？&quot; class=&quot;headerlink&quot; title=&quot;* 为什么要垃圾回收？&quot;&gt;&lt;/a&gt;* 为什么要垃圾回收？&lt;/h3&gt;&lt;p&gt;由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。&lt;/p&gt;
&lt;h3 id=&quot;垃圾回收的基本方法？&quot;&gt;&lt;a href=&quot;#垃圾回收的基本方法？&quot; class=&quot;headerlink&quot; title=&quot;* 垃圾回收的基本方法？&quot;&gt;&lt;/a&gt;* 垃圾回收的基本方法？&lt;/h3&gt;&lt;h4 id=&quot;1、标记清除（mark-and-sweep）&quot;&gt;&lt;a href=&quot;#1、标记清除（mark-and-sweep）&quot; class=&quot;headerlink&quot; title=&quot;1、标记清除（mark and sweep）&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、标记清除（mark and sweep）&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;　　这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。　　垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。&lt;/p&gt;
&lt;h4 id=&quot;2。标记清除&quot;&gt;&lt;a href=&quot;#2。标记清除&quot; class=&quot;headerlink&quot; title=&quot;2。标记清除&quot;&gt;&lt;/a&gt;2。标记清除&lt;/h4&gt;&lt;p&gt;　　另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该*变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。&lt;/p&gt;
&lt;h4 id=&quot;减少垃圾回收？&quot;&gt;&lt;a href=&quot;#减少垃圾回收？&quot; class=&quot;headerlink&quot; title=&quot;* 减少垃圾回收？&quot;&gt;&lt;/a&gt;* 减少垃圾回收？&lt;/h4&gt;&lt;p&gt; 1:只保留程序运行时需要的数据，对于已经使用的或者不需要的数据，应该将其值设为 null&lt;br&gt; 2:避免创建对象&lt;br&gt;    清空数组：array.length = 0&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;原生js的-增-删-改-5&quot;&gt;&lt;a href=&quot;#原生js的-增-删-改-5&quot; class=&quot;headerlink&quot; title=&quot;原生js的(增 删 改) 5%&quot;&gt;&lt;/a&gt;原生js的(增 删 改) 5%&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d9abdd592a00f11f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;增&quot;&gt;&lt;a href=&quot;#增&quot; class=&quot;headerlink&quot; title=&quot;增&quot;&gt;&lt;/a&gt;增&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;若添加新元素：首先创建该元素节点，然后添加&lt;/li&gt;
&lt;li&gt;创建元素节点：document.createElement(‘h1’)&lt;/li&gt;
&lt;li&gt;创建文本节点：document.createTextNode(‘描述’)&lt;/li&gt;
&lt;li&gt;增加：&lt;ul&gt;
&lt;li&gt;添加孩子&lt;ul&gt;
&lt;li&gt;A.append(B) : 把B追加到A内部&lt;/li&gt;
&lt;li&gt;A.appendTo(B) : 把A追加到B内部&lt;/li&gt;
&lt;li&gt;A.prepend(B) : 在A的开始添加孩子B&lt;/li&gt;
&lt;li&gt;A.prependTo(B) : 把A追加到B的开始&lt;ul&gt;
&lt;li&gt;添加兄弟&lt;/li&gt;
&lt;li&gt;A.after(B) :  在A后添加B&lt;/li&gt;
&lt;li&gt;A.before(B): 在A前追加B&lt;/li&gt;
&lt;li&gt;添加class&lt;/li&gt;
&lt;li&gt;elm.classList.add(‘nn’)&lt;/li&gt;
&lt;li&gt;elm.className+=” nn”  //nn前边有空格&lt;/li&gt;
&lt;li&gt;parent.insertBefore(newNode,oldNode):在父节点n里面的B节点前面追加A&lt;br&gt;模拟insertAfter: parent.insertBefore(newNode,oN.nextsilibing());&lt;/li&gt;
&lt;li&gt;替换节点：parent.replaceChild(child,oldElem);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;删&quot;&gt;&lt;a href=&quot;#删&quot; class=&quot;headerlink&quot; title=&quot;删&quot;&gt;&lt;/a&gt;删&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;elementNow.remove():删除当前元素&lt;/li&gt;
&lt;li&gt;parent.removeChild(child):删除父元素中的子元素&lt;/li&gt;
&lt;li&gt;child.parentNode.removeChild(child)：不确定父元素的时候可以这样做&lt;h3 id=&quot;改&quot;&gt;&lt;a href=&quot;#改&quot; class=&quot;headerlink&quot; title=&quot;改&quot;&gt;&lt;/a&gt;改&lt;/h3&gt;&lt;a href=&quot;http://www.jianshu.com/writer#/notebooks/10862078/notes/15825654/preview&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/writer#/notebooks/10862078/notes/15825654/preview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;( 获取，设置) 修改HTML元素内容&lt;ul&gt;
&lt;li&gt;node.textContent:用来设置或是获取某个元素内所有文本内容，包括子元素中的内容。（css等兼容性比innerText好）&lt;/li&gt;
&lt;li&gt;node.innerText: 只获取当前节点内容&lt;/li&gt;
&lt;li&gt;node.innerHTML：&lt;/li&gt;
&lt;li&gt;node.outerHTML：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更改属性&lt;ul&gt;
&lt;li&gt;设置属性：node.setAttribute(‘style’,’color:red’)&lt;/li&gt;
&lt;li&gt;获取属性：var a = node.getAttribute(‘’style’’);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改元素CSS&lt;ul&gt;
&lt;li&gt;node.style.color=”red”&lt;h3 id=&quot;查&quot;&gt;&lt;a href=&quot;#查&quot; class=&quot;headerlink&quot; title=&quot;查&quot;&gt;&lt;/a&gt;查&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;querySelector()、&lt;/li&gt;
&lt;li&gt;querySelectorAll()&lt;/li&gt;
&lt;li&gt;getElementById()、&lt;/li&gt;
&lt;li&gt;getElementsByTagName()、&lt;/li&gt;
&lt;li&gt;getElementsByName()、&lt;/li&gt;
&lt;li&gt;getElementsByClassName()、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;jq增删改查&quot;&gt;&lt;a href=&quot;#jq增删改查&quot; class=&quot;headerlink&quot; title=&quot;jq增删改查&quot;&gt;&lt;/a&gt;jq增删改查&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内部插入主要方法：&lt;ul&gt;
&lt;li&gt;append(content) 向每个匹配的元素内部追加内容。&lt;/li&gt;
&lt;li&gt;prepend(content) 向每个匹配的元素内部前置内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部插入：&lt;ul&gt;
&lt;li&gt;after(content) 在每个匹配的元素之后插入内容。&lt;/li&gt;
&lt;li&gt;before(content) 在每个匹配的元素之前插入内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除：&lt;ul&gt;
&lt;li&gt;empty() 删除匹配的元素集合中所有的子节点。&lt;/li&gt;
&lt;li&gt;remove([expr]) 从DOM中删除所有匹配的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;深拷贝与浅拷贝&quot;&gt;&lt;a href=&quot;#深拷贝与浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;深拷贝与浅拷贝&quot;&gt;&lt;/a&gt;深拷贝与浅拷贝&lt;/h2&gt;&lt;p&gt;深拷贝与浅拷贝是之于Array,Object来说的，来由背景，引用类型对象的赋值，一个改变，会引起另一个改变，因为两个变量指向同一个堆空间放的对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的复制实体，而不是引用地址&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;a = &amp;#123;b:&#39;k&#39;&amp;#125;&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var c = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.b = &amp;apos;carry&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c.b? 答案是&amp;apos;carry&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么我们如何给引用类型对象赋值（copy），完全隔离，互不影响呢？&lt;/p&gt;
&lt;h3 id=&quot;数组深拷贝&quot;&gt;&lt;a href=&quot;#数组深拷贝&quot; class=&quot;headerlink&quot; title=&quot;数组深拷贝&quot;&gt;&lt;/a&gt;数组深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6拷贝数组Array.from， […oldArr]&lt;/li&gt;
&lt;li&gt;使用循环遍历拷贝&lt;/li&gt;
&lt;li&gt;使用slice，concat进行数组拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1-使用slice，concat进行数组拷贝&quot;&gt;&lt;a href=&quot;#1-使用slice，concat进行数组拷贝&quot; class=&quot;headerlink&quot; title=&quot;1.使用slice，concat进行数组拷贝&quot;&gt;&lt;/a&gt;1.使用slice，concat进行数组拷贝&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. var a = [1,2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = a.slice(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b[0] = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(a) //1,2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. var a = [1,2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var b = a.concat(0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-使用循环遍历拷贝&quot;&gt;&lt;a href=&quot;#2-使用循环遍历拷贝&quot; class=&quot;headerlink&quot; title=&quot;2.使用循环遍历拷贝&quot;&gt;&lt;/a&gt;2.使用循环遍历拷贝&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3,4];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(var i=0; i&amp;lt;arr1.length; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  arr2[i]=arr1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1); //12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2); //12346&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-ES6拷贝数组Array-from，-…oldArr&quot;&gt;&lt;a href=&quot;#3-ES6拷贝数组Array-from，-…oldArr&quot; class=&quot;headerlink&quot; title=&quot;3. ES6拷贝数组Array.from， […oldArr]&quot;&gt;&lt;/a&gt;3. ES6拷贝数组Array.from， […oldArr]&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一种：var newArr = Array.from(oldArr);&lt;/li&gt;
&lt;li&gt;第二种：var newArr = […oldArr]&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=Array.from(arr1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //1235&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr1=[1,2,3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var arr2=[...arr1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1.push(4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2.push(5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr1);  //1234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(arr2);  //1235&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对象深拷贝&quot;&gt;&lt;a href=&quot;#对象深拷贝&quot; class=&quot;headerlink&quot; title=&quot;对象深拷贝&quot;&gt;&lt;/a&gt;对象深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JSON对象的parse和stringify&lt;/li&gt;
&lt;li&gt;jQuery中的extend复制方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;JSON对象的parse和stringify&quot;&gt;&lt;a href=&quot;#JSON对象的parse和stringify&quot; class=&quot;headerlink&quot; title=&quot;JSON对象的parse和stringify&quot;&gt;&lt;/a&gt;JSON对象的parse和stringify&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var source = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name:&amp;quot;source&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name:&amp;quot;child&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var target = JSON.parse(JSON.stringify(source));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改变target的name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.name = &amp;quot;target&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(source.name);   //source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(target.name);   //target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//改变target的child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target.child.name = &amp;quot;target child&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(source.child.name);  //child&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(target.child.name);  //target child&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;jQuery中的extend复制方法&quot;&gt;&lt;a href=&quot;#jQuery中的extend复制方法&quot; class=&quot;headerlink&quot; title=&quot;jQuery中的extend复制方法&quot;&gt;&lt;/a&gt;jQuery中的extend复制方法&lt;/h4&gt;&lt;h3 id=&quot;自己实现深拷贝&quot;&gt;&lt;a href=&quot;#自己实现深拷贝&quot; class=&quot;headerlink&quot; title=&quot;自己实现深拷贝&quot;&gt;&lt;/a&gt;自己实现深拷贝&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断对象数据类型 Object.prototype.toString.call(obj);&lt;/li&gt;
&lt;li&gt;若为Object则实现深拷贝&lt;/li&gt;
&lt;li&gt;Array和Object 用遍历的方式深拷贝&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//util作为判断变量具体类型的辅助模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var util = (function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var class2type = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [&amp;quot;Null&amp;quot;,&amp;quot;Undefined&amp;quot;,&amp;quot;Number&amp;quot;,&amp;quot;Boolean&amp;quot;,&amp;quot;String&amp;quot;,&amp;quot;Object&amp;quot;,&amp;quot;Function&amp;quot;,&amp;quot;Array&amp;quot;,&amp;quot;RegExp&amp;quot;,&amp;quot;Date&amp;quot;].forEach(function(item)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           class2type[&amp;quot;[object &amp;quot;+ item + &amp;quot;]&amp;quot;] = item.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       function isType(obj, type)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return getType(obj) === type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       function getType(obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return class2type[Object.prototype.toString.call(obj)] || &amp;quot;object&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           isType:isType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           getType:getType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   function copy(obj,deep)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //如果obj不是对象，那么直接返回值就可以了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if(obj === null || typeof obj !== &amp;quot;object&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　//定义需要的局部变脸，根据obj的类型来调整target的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       var i, target = util.isType(obj,&amp;quot;array&amp;quot;) ? [] : &amp;#123;&amp;#125;,value,valueType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       for(i in obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           value = obj[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueType = util.getType(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　　　　　　//只有在明确执行深复制，并且当前的value是数组或对象的情况下才执行递归复制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           if(deep &amp;amp;&amp;amp; (valueType === &amp;quot;array&amp;quot; || valueType === &amp;quot;object&amp;quot;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               target[i] = copy(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               target[i] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;h3 id=&quot;New一共做了几个操作步骤，要求具体说明&quot;&gt;&lt;a href=&quot;#New一共做了几个操作步骤，要求具体说明&quot; class=&quot;headerlink&quot; title=&quot;New一共做了几个操作步骤，要求具体说明&quot;&gt;&lt;/a&gt;New一共做了几个操作步骤，要求具体说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建空对象；&lt;br&gt;　　var obj = {};&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置新对象的constructor属性为构造函数的名称，设置新对象的&lt;strong&gt;proto&lt;/strong&gt;属性指向构造函数的prototype对象；&lt;br&gt;　　obj.&lt;strong&gt;proto&lt;/strong&gt; = ClassA.prototype;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用新对象调用函数，函数中的this被指向新实例对象：&lt;br&gt;　　ClassA.call(obj);　　//{}.构造函数();          &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将初始化完毕的新对象地址，保存到等号左边的变量中&lt;/p&gt;
&lt;h3 id=&quot;new一个对象-执行了什么过程？，那-return-‘-’，null-undefined会怎样？&quot;&gt;&lt;a href=&quot;#new一个对象-执行了什么过程？，那-return-‘-’，null-undefined会怎样？&quot; class=&quot;headerlink&quot; title=&quot;new一个对象 执行了什么过程？，那 return ‘ ’，null,undefined会怎样？&quot;&gt;&lt;/a&gt;new一个对象 执行了什么过程？，那 return ‘ ’，null,undefined会怎样？&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何判定js一个变量值的类型（至少3种）3&quot;&gt;&lt;a href=&quot;#如何判定js一个变量值的类型（至少3种）3&quot; class=&quot;headerlink&quot; title=&quot;如何判定js一个变量值的类型（至少3种）3%&quot;&gt;&lt;/a&gt;如何判定js一个变量值的类型（至少3种）3%&lt;/h2&gt;&lt;p&gt;Object.prototype.toString.call(obj)&lt;br&gt;[] instanceof Array&lt;br&gt;[].constructor === Object&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数组和字符串的转换-3&quot;&gt;&lt;a href=&quot;#数组和字符串的转换-3&quot; class=&quot;headerlink&quot; title=&quot;数组和字符串的转换 3%&quot;&gt;&lt;/a&gt;数组和字符串的转换 3%&lt;/h2&gt;&lt;p&gt;split,join&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;arguments&quot;&gt;&lt;a href=&quot;#arguments&quot; class=&quot;headerlink&quot; title=&quot;arguments&quot;&gt;&lt;/a&gt;arguments&lt;/h2&gt;&lt;h3 id=&quot;是啥？&quot;&gt;&lt;a href=&quot;#是啥？&quot; class=&quot;headerlink&quot; title=&quot;是啥？&quot;&gt;&lt;/a&gt;是啥？&lt;/h3&gt;&lt;p&gt;函数参数对象，不是数组，但是有length属性，也能arguments[0]取值&lt;/p&gt;
&lt;h3 id=&quot;转为数组？&quot;&gt;&lt;a href=&quot;#转为数组？&quot; class=&quot;headerlink&quot; title=&quot;转为数组？&quot;&gt;&lt;/a&gt;转为数组？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Array.prototype.slice.apply(arguments)这是运行效率比较快的方法&lt;/li&gt;
&lt;li&gt;Array.prototype.concat.apply(thisArg,arguments)&lt;/li&gt;
&lt;li&gt;Array.prototype.slice.call(arguments);&lt;br&gt;对象转为数组&lt;/li&gt;
&lt;li&gt;Array.from(arguments) &lt;/li&gt;
&lt;li&gt;[…arguments]&lt;h3 id=&quot;arguments其他用法？&quot;&gt;&lt;a href=&quot;#arguments其他用法？&quot; class=&quot;headerlink&quot; title=&quot;arguments其他用法？&quot;&gt;&lt;/a&gt;arguments其他用法？&lt;/h3&gt;&lt;h4 id=&quot;利用arguments-callee实现递归&quot;&gt;&lt;a href=&quot;#利用arguments-callee实现递归&quot; class=&quot;headerlink&quot; title=&quot;利用arguments.callee实现递归&quot;&gt;&lt;/a&gt;利用arguments.callee实现递归&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;递归&quot;&gt;&lt;a href=&quot;#递归&quot; class=&quot;headerlink&quot; title=&quot;递归&quot;&gt;&lt;/a&gt;递归&lt;/h2&gt;&lt;h3 id=&quot;1-arguments-callee&quot;&gt;&lt;a href=&quot;#1-arguments-callee&quot; class=&quot;headerlink&quot; title=&quot;1.arguments.callee&quot;&gt;&lt;/a&gt;1.arguments.callee&lt;/h3&gt;&lt;p&gt;解决函数名递归带来的危险，arguments.callee指向正在执行的函数，使用它来代替函数名&lt;br&gt;arguments.callee是一个指向正在执行的函数的指针&lt;br&gt;好处：不用使用当前函数进行递归，性能变高&lt;br&gt;缺点：严格模式下不管用&lt;/p&gt;
&lt;h3 id=&quot;2-使用函数命名表达式&quot;&gt;&lt;a href=&quot;#2-使用函数命名表达式&quot; class=&quot;headerlink&quot; title=&quot;2.使用函数命名表达式&quot;&gt;&lt;/a&gt;2.使用函数命名表达式&lt;/h3&gt;&lt;p&gt;一个函数两个名字&lt;br&gt;有点：严格模式和非严格模式都适用。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var factorial = （ function f(num)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return num * f(num-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-递归性能上的分析？优化？用es6优化？&quot;&gt;&lt;a href=&quot;#3-递归性能上的分析？优化？用es6优化？&quot; class=&quot;headerlink&quot; title=&quot;3.递归性能上的分析？优化？用es6优化？&quot;&gt;&lt;/a&gt;3.递归性能上的分析？优化？用es6优化？&lt;/h3&gt;&lt;p&gt;递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）&lt;/p&gt;
&lt;h4 id=&quot;使用尾调递归优化递归&quot;&gt;&lt;a href=&quot;#使用尾调递归优化递归&quot; class=&quot;headerlink&quot; title=&quot;使用尾调递归优化递归&quot;&gt;&lt;/a&gt;使用尾调递归优化递归&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function factorial(n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (n === 1) return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return n * factorial(n - 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(5) // 120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比正常递归函数多了一个参数total&lt;br&gt;尾递归，只保留一个调用记录，复杂度 O(1)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function factorial(n, total) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (n === 1) return total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return factorial(n - 1, n * total);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(5, 1) // 120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;ES6尾调用&quot;&gt;&lt;a href=&quot;#ES6尾调用&quot; class=&quot;headerlink&quot; title=&quot;ES6尾调用&quot;&gt;&lt;/a&gt;ES6尾调用&lt;/h4&gt;&lt;p&gt;ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。&lt;br&gt;这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。&lt;br&gt;func.arguments：返回调用时函数的参数。&lt;br&gt;func.caller：返回调用当前函数的那个函数。&lt;br&gt;尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;字符串和json的转换3&quot;&gt;&lt;a href=&quot;#字符串和json的转换3&quot; class=&quot;headerlink&quot; title=&quot;字符串和json的转换3%&quot;&gt;&lt;/a&gt;字符串和json的转换3%&lt;/h2&gt;&lt;p&gt;JSON.stringify( );&lt;br&gt;JSON.parse（）&lt;/p&gt;
&lt;h2 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;eval()&quot;&gt;&lt;/a&gt;eval()&lt;/h2&gt;&lt;p&gt;eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。&lt;br&gt;eval(“alert(‘Hello world’)”)&lt;br&gt;eval(“x=10;y=20;document.write(x*y)”)&lt;/p&gt;
&lt;h2 id=&quot;typeof-输出&quot;&gt;&lt;a href=&quot;#typeof-输出&quot; class=&quot;headerlink&quot; title=&quot;typeof 输出&quot;&gt;&lt;/a&gt;typeof 输出&lt;/h2&gt;&lt;p&gt;typeof(的)运算数未定义,返回(的)就是 “undefined”.&lt;br&gt;typeof(undifiend)//undifiend&lt;/p&gt;
&lt;p&gt;运算数为数字 typeof(x) = “number”&lt;br&gt;字符串 typeof(x) = “string”&lt;br&gt;布尔值 typeof(x) = “boolean”&lt;br&gt;对象,数组和null typeof(x) = “object”&lt;br&gt;函数 typeof(x) = “function”&lt;br&gt;        typeof(‘aa’+4);//string&lt;br&gt;       typeof(‘1’+undifiend);//报错&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;链式调用&quot;&gt;&lt;a href=&quot;#链式调用&quot; class=&quot;headerlink&quot; title=&quot;链式调用&quot;&gt;&lt;/a&gt;链式调用&lt;/h2&gt;&lt;p&gt;所谓链式调用就是能够返回自身对象&lt;br&gt;$(‘#id’).show().hide().show().hide().show().hide();&lt;br&gt;有点：代码简洁易读，减少了多次重复使用同一个变量&lt;/p&gt;
&lt;h3 id=&quot;1-方法中直接-return-this&quot;&gt;&lt;a href=&quot;#1-方法中直接-return-this&quot; class=&quot;headerlink&quot; title=&quot;1.方法中直接 return this&quot;&gt;&lt;/a&gt;1.方法中直接 return this&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   function ClassA()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ClassA.prototype = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hide:function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;hide&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getName:function(callback)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         if(callback)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            callback.call(this,this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        show:function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            console.log(&amp;apos;show&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = new ClassA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a.show().hide().show().hide().show();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;h2 id=&quot;如何解决ajax跨域&quot;&gt;&lt;a href=&quot;#如何解决ajax跨域&quot; class=&quot;headerlink&quot; title=&quot;如何解决ajax跨域&quot;&gt;&lt;/a&gt;如何解决ajax跨域&lt;/h2&gt;&lt;h3 id=&quot;1-CROS方式（跨域资源共享）&quot;&gt;&lt;a href=&quot;#1-CROS方式（跨域资源共享）&quot; class=&quot;headerlink&quot; title=&quot;1.CROS方式（跨域资源共享）&quot;&gt;&lt;/a&gt;1.CROS方式（跨域资源共享）&lt;/h3&gt;&lt;p&gt; 原理 ：配置的两大基本信息,Origin和headers&lt;br&gt;第一步:配置Php 后台允许跨域&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&amp;apos;Access-Control-Allow-Origin: *&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;header(&amp;apos;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//主要为跨域CORS配置的两大基本信息,Origin和headers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二步:配置Apache web服务器跨域(httpd.conf中)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Directory /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //AllowOverride none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //Require all denied&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Options FollowSymLinks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AllowOverride none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Order deny,allow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Allow from all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;2-JSONP方式&quot;&gt;&lt;a href=&quot;#2-JSONP方式&quot; class=&quot;headerlink&quot; title=&quot;2.JSONP方式&quot;&gt;&lt;/a&gt;2.JSONP方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jsonp解决跨域问题是一个比较古老的方案(实际中不推荐使用),&lt;/li&gt;
&lt;li&gt;这里做简单介绍(实际项目中如果要使用JSONP,&lt;/li&gt;
&lt;li&gt;一般会使用JQ等对JSONP进行了封装的类库来进行ajax请求)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JSONP之所以能够用来解决跨域方案,&lt;/li&gt;
&lt;li&gt;主要是因为 script脚本拥有跨域能力,&lt;/li&gt;
&lt;li&gt;而JSONP正是利用这一点来实现。具体原理如图&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function addScriptTag(src) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var script = document.createElement(&amp;apos;script&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  script.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;text/javascript&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  script.src = src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  document.body.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;window.onload = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addScriptTag(&amp;apos;http://example.com/ip?callback=foo&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function foo(data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(&amp;apos;response data: &amp;apos; + JSON.stringify(data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端对应的接口在返回参数外面添加函数包裹层&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;test&amp;quot;: &amp;quot;testData&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;jsonp的弊端&quot;&gt;&lt;a href=&quot;#jsonp的弊端&quot; class=&quot;headerlink&quot; title=&quot;jsonp的弊端&quot;&gt;&lt;/a&gt;jsonp的弊端&lt;/h4&gt;&lt;p&gt;JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。&lt;/p&gt;
&lt;h2 id=&quot;请求代理进行跨域nginx&quot;&gt;&lt;a href=&quot;#请求代理进行跨域nginx&quot; class=&quot;headerlink&quot; title=&quot;请求代理进行跨域nginx&quot;&gt;&lt;/a&gt;请求代理进行跨域nginx&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;如何解决ajax跨域&lt;/p&gt;
&lt;p&gt;一般ajax跨域解决就是通过JSONP解决或者CORS解决,如以下:(注意，现在已经几乎不会再使用JSONP了，所以JSONP了解下即可)&lt;/p&gt;
&lt;h2 id=&quot;其他跨域&quot;&gt;&lt;a href=&quot;#其他跨域&quot; class=&quot;headerlink&quot; title=&quot;其他跨域&quot;&gt;&lt;/a&gt;其他跨域&lt;/h2&gt;&lt;p&gt;2:通过修改document.domain来跨子域&lt;br&gt;仅在相同主域下才有效，且window.domain需要设置为相同的父域 不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。&lt;br&gt;比如，有一个页面，它的地址是&lt;a href=&quot;http://www.example.com/a.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.example.com/a.html&lt;/a&gt; ，&lt;br&gt;在这个页面里面有一个iframe，它的src是&lt;a href=&quot;http://example.com/b.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://example.com/b.html&lt;/a&gt;,&lt;br&gt;很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function test()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var iframe = document.getElementById(&amp;apos;iframe&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var win = document.contentWindow;//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var doc = win.document;//这里获取不到iframe里的document对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var name = win.name;//这里同样获取不到window对象的name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;iframe id = &amp;quot;iframe&amp;quot; src=&amp;quot;http://example.com/b.html&amp;quot; onload = &amp;quot;test()&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-b81be614658808c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;3:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-d51bad8105ff7116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;4：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-665a15e11ea92788.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;br&gt;5：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2e14787d1c2eae05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;if-false-的几种情况&quot;&gt;&lt;a href=&quot;#if-false-的几种情况&quot; class=&quot;headerlink&quot; title=&quot;if() false 的几种情况&quot;&gt;&lt;/a&gt;if() false 的几种情况&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;if(false)&lt;/li&gt;
&lt;li&gt;if(null)&lt;/li&gt;
&lt;li&gt;if(undefined)&lt;/li&gt;
&lt;li&gt;if(‘’)&lt;/li&gt;
&lt;li&gt;if(NaN)-数字NaN&lt;/li&gt;
&lt;li&gt;if(0)-数字0&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Ajax实现流程&quot;&gt;&lt;a href=&quot;#Ajax实现流程&quot; class=&quot;headerlink&quot; title=&quot;Ajax实现流程&quot;&gt;&lt;/a&gt;Ajax实现流程&lt;/h2&gt;&lt;p&gt;创建一个XMLHttpRequest()实例&lt;br&gt;准备一个Ajax请求以待发送&lt;br&gt;发送Ajax请求&lt;br&gt;根据服务器响应的结果，将相应数据填充到xhr对象的属性中 注意url是相对于执行代码的当前页面，也可以是绝对路径。&lt;/p&gt;
&lt;p&gt;var xhr = new XMLHttpRequest();&lt;br&gt;xhr.open(Type,URL,Boolean);&lt;br&gt;//请求类型，请求地址，是否异步&lt;br&gt;xhr.send(null);&lt;br&gt;xhr.onreadystatechange = function(){&lt;br&gt;    if(xhr.readyState == 4){&lt;br&gt;        if(xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300 || xhr.status == 304){&lt;br&gt;            alert(xhr.responseText);&lt;br&gt;        }else {&lt;br&gt;            alert(‘unsuccessful ‘ + xhr.status);&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;};&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;单线程&quot;&gt;&lt;a href=&quot;#单线程&quot; class=&quot;headerlink&quot; title=&quot;单线程&quot;&gt;&lt;/a&gt;单线程&lt;/h2&gt;&lt;p&gt;为什么javascrip是单线程&lt;br&gt;JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。&lt;br&gt;浏览器端多线程&lt;br&gt;js&lt;br&gt;css&lt;br&gt;事件&lt;br&gt;数据交互&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;垃圾回收-1&quot;&gt;&lt;a href=&quot;#垃圾回收-1&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;p&gt;垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存，内存泄露和浏览器实现的垃圾回收机制息息相关， 而浏览器实现标识无用变量的策略主要有下两个方法：&lt;br&gt;第一，引用计数法&lt;br&gt;跟踪记录每个值被引用的次数。当声明一个变量并将引用类型的值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次 数加1.相反，如果包含对这个值引用的变量又取得另外一个值，则这个值的引用次数减1.当这个值的引用次数变成0时，则说明没有办法访问这个值了，因此就 可以将其占用的内存空间回收回来。&lt;/p&gt;
&lt;p&gt;如： var a = {};     //对象{}的引用计数为1&lt;br&gt;     b = a;          //对象{}的引用计数为 1+1&lt;br&gt;     a = null;       //对象{}的引用计数为2-1&lt;br&gt;所以这时对象{}不会被回收;&lt;br&gt;IE 6, 7 对DOM对象进行引用计数回收， 这样简单的垃圾回收机制，非常容易出现循环引用问题导致内存不能被回收， 进行导致内存泄露等问题，一般不用引用计数法。&lt;br&gt;第二，标记清除法&lt;br&gt;到2008年为止，IE,Firefox,Opera,Chrome和Safari的javascript实现使用的都是标记清除式的垃圾收集策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。&lt;br&gt;标记清除的算法分为两个阶段，标记(mark)和清除(sweep). 第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;a href=&quot;#javascript创建对象的几种方式？&quot; class=&quot;headerlink&quot; title=&quot;javascript创建对象的几种方式？&quot;&gt;&lt;/a&gt;javascript创建对象的几种方式？&lt;/h2&gt;&lt;p&gt; javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。&lt;/p&gt;
&lt;p&gt; 1、对象字面量的方式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;person={firstname:&amp;quot;Mark&amp;quot;,lastname:&amp;quot;Yun&amp;quot;,age:25,eyecolor:&amp;quot;black&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 2、用function来模拟无参的构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Person(){}
var person=new Person();//定义一个function，如果使用new&amp;quot;实例化&amp;quot;,该function可以看作是一个Class
person.name=&amp;quot;Mark&amp;quot;;
person.age=&amp;quot;25&amp;quot;;
person.work=function(){
alert(person.name+&amp;quot; hello...&amp;quot;);
}
person.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Pet(name,age,hobby){
   this.name=name;//this作用域：当前对象
   this.age=age;
   this.hobby=hobby;
   this.eat=function(){
      alert(&amp;quot;我叫&amp;quot;+this.name+&amp;quot;,我喜欢&amp;quot;+this.hobby+&amp;quot;,是个程序员&amp;quot;);
   }
}
var maidou =new Pet(&amp;quot;麦兜&amp;quot;,25,&amp;quot;coding&amp;quot;);//实例化、创建对象
maidou.eat();//调用eat方法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 4、用工厂方式来创建（内置对象）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var wcDog =new Object();
wcDog.name=&amp;quot;旺财&amp;quot;;
wcDog.age=3;
wcDog.work=function(){
  alert(&amp;quot;我是&amp;quot;+wcDog.name+&amp;quot;,汪汪汪......&amp;quot;);
}
wcDog.work();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用原型方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Dog(){

 }
 Dog.prototype.name=&amp;quot;旺财&amp;quot;;
 Dog.prototype.eat=function(){
 alert(this.name+&amp;quot;是个吃货&amp;quot;);
 }
 var wangcai =new Dog();
 wangcai.eat();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 5、用混合方式来创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Car(name,price){
  this.name=name;
  this.price=price;
}
 Car.prototype.sell=function(){
   alert(&amp;quot;我是&amp;quot;+this.name+&amp;quot;，我现在卖&amp;quot;+this.price+&amp;quot;万元&amp;quot;);
  }
var camry =new Car(&amp;quot;凯美瑞&amp;quot;,27);
camry.sell();
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;a href=&quot;#JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot; class=&quot;headerlink&quot; title=&quot;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&quot;&gt;&lt;/a&gt;JavaScript有几种类型的值？，你能画一下他们的内存图吗？&lt;/h2&gt;&lt;p&gt; 栈：原始数据类型（Undefined，Null，Boolean，Number、String）&lt;br&gt; 堆：引用数据类型（对象、数组和函数）&lt;/p&gt;
&lt;p&gt; 两种类型的区别是：存储位置不同；&lt;br&gt; 原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；&lt;br&gt; 引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-f0c90cfaba1aabac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;a href=&quot;#说几条写JavaScript的基本规范？&quot; class=&quot;headerlink&quot; title=&quot;说几条写JavaScript的基本规范？&quot;&gt;&lt;/a&gt;说几条写JavaScript的基本规范？&lt;/h2&gt;&lt;p&gt; 1.不要在同一行声明多个变量。&lt;br&gt; 2.请使用 ===/!==来比较true/false或者数值&lt;br&gt; 3.使用对象字面量替代new Array这种形式&lt;br&gt; 4.不要使用全局函数。&lt;br&gt; 5.Switch语句必须带有default分支&lt;br&gt; 6.函数不应该有时候有返回值，有时候没有返回值。&lt;br&gt; 7.For循环必须使用大括号&lt;br&gt; 8.If语句必须使用大括号&lt;br&gt; 9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;ES6&quot;&gt;&lt;a href=&quot;#ES6&quot; class=&quot;headerlink&quot; title=&quot;ES6&quot;&gt;&lt;/a&gt;ES6&lt;/h1&gt;&lt;h2 id=&quot;项目中常用的有哪些&quot;&gt;&lt;a href=&quot;#项目中常用的有哪些&quot; class=&quot;headerlink&quot; title=&quot;项目中常用的有哪些&quot;&gt;&lt;/a&gt;项目中常用的有哪些&lt;/h2&gt;&lt;p&gt;模块化 import export&lt;br&gt;&lt;a href=&quot;http://m.blog.csdn.net/Dong_PT/article/details/52701184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://m.blog.csdn.net/Dong_PT/article/details/52701184&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;promise&quot;&gt;&lt;a href=&quot;#promise&quot; class=&quot;headerlink&quot; title=&quot;promise&quot;&gt;&lt;/a&gt;promise&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如何解决回调问题？&lt;br&gt;目的是为异步操作提供统一接口，它使得异步操作具备同步操作的接口，使得程序具备正常的同步运行的流程，回调函数不必再一层层嵌套。&lt;/li&gt;
&lt;li&gt;Promise些缺点。&lt;ul&gt;
&lt;li&gt;无法取消Promise&lt;br&gt;一旦新建它就会立即执行，无法中途取消。&lt;/li&gt;
&lt;li&gt;必须设置回调函数&lt;br&gt;其次，如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。&lt;/li&gt;
&lt;li&gt;处于Pending不知阶段&lt;br&gt;当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Promise对象只有三种状态:&lt;br&gt;未完成：pending&lt;br&gt;已完成：resolved(也称fulfilled)&lt;br&gt;失败：rejected&lt;br&gt;以上三种状态只有以下两种变化,一旦当前状态变为“resolved”或“rejected”，就意味着不会再有新的状态变化&lt;br&gt;1、pending-&amp;gt;resolved （reslove()）&lt;br&gt;2、pending-&amp;gt;rejected   ( reject()  )&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Promise(executor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var _this = this&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _this.status = &amp;apos;pending&amp;apos; // Promise当前的状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _this.data = undefined  // Promise的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _this.onResolvedCallback = [] // Promise resolve时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _this.onRejectedCallback = [] // Promise reject时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//resolve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  function resolve(value)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(function()&amp;#123; //异步执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(_this.status == &amp;apos;pending&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _this.status = &amp;apos;resolved&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _this.data = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(var i=0;i&amp;lt; _this.onResolvedCallback.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _this. _this.onResolvedCallback[i](value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //reject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  function reject(reason)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(function()&amp;#123; //异步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if(_this.status == &amp;apos;pending&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _this.status =&amp;apos;rejected&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _this.data = reason;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      for(var i=0;i&amp;lt; _this.onRejectedCallback.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _this.onRejectedCallback[i](reason);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      executor(resolve, reject) // 执行executor并传入相应的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;catch(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      reject(e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;//end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// then方法接收两个参数，onResolved，onRejected，分别为Promise成功或失败后的回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Promise.prototype.then = function(onResolved,onRejected)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var _this = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var promise2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 根据标准，如果then的参数不是function，则我们需要忽略它，此处以如下方式处理   实参留空 且让值可以穿透到后面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onResolved = typeof onResolved === &amp;apos;function&amp;apos; ? onResolved : function(value) &amp;#123;return value;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onRejected = typeof onRejected === &amp;apos;function&amp;apos; ? onRejected : function(reason) &amp;#123;return reason;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //Promise 里面有三种状态，我们分三个if来处理，在里面分别返回一个new Promise。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  //根据标准我们知道，promise2的值取决于then里面函数的返回值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   if (_this.status === &amp;apos;resolved&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //此时this的状态已经是resolved ，所以我们这里执行onResolved&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return promise2 = new Promise(function(resolve, reject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         try&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           var x = onResolved(_this.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           if (x instanceof Promise) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果onResolved的返回值是一个Promise对象，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //直接取它的结果做为promise2的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                x.then(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resolve(x) // 否则，以它的返回值做为promise2的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;catch(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 如果出错，以捕获到的错误做为promise2的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           reject(e) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (_this.status === &amp;apos;rejected&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      //此时this的状态已经是rejected ，所以我们这里执行onRejected&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     return promise2 = new Promise(function(resolve, reject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              var x = onRejected(self.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              if (x instanceof Promise) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  x.then(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125; catch (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              reject(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (_this.status === &amp;apos;pending&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 如果当前的Promise还处于pending状态，我们并不能确定调用onResolved还是onRejected，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // 只能等到Promise的状态确定后，才能确实如何处理。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 所以我们需要把我们的**两种情况**的处理逻辑做为callback放入this的回调数组里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return promise2 = new Promise(function(resolve, reject) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _this.onResolvedCallback.push(function(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var x = onResolved(_this.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (x instanceof Promise) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    x.then(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125; catch (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 reject(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         _this. onRejectedCallback.push(function(resaon) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var x = onRejected(_this.data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (x instanceof Promise) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    x.then(resolve, reject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125; catch (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 reject(e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;箭头函数&quot;&gt;&lt;a href=&quot;#箭头函数&quot; class=&quot;headerlink&quot; title=&quot;箭头函数&quot;&gt;&lt;/a&gt;箭头函数&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/yangbingbinga/article/details/61424363&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/yangbingbinga/article/details/61424363&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;箭头函数中的this&quot;&gt;&lt;a href=&quot;#箭头函数中的this&quot; class=&quot;headerlink&quot; title=&quot;箭头函数中的this&quot;&gt;&lt;/a&gt;&lt;strong&gt;箭头函数中的this&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;箭头函数中的this默认指向在定义它时,它所处的对象,而不是执行时的对象, 定义它的时候,可能环境是window&lt;br&gt;下面通过一些例子来研究一下 this的一些使用场景[ 使用最新版 chrome&lt;a href=&quot;http://lib.csdn.net/base/softwaretest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试&lt;/a&gt; ]&lt;/p&gt;
&lt;h3 id=&quot;一层箭头函数-：箭头函数中的-this指向，箭头函数存在的对象&quot;&gt;&lt;a href=&quot;#一层箭头函数-：箭头函数中的-this指向，箭头函数存在的对象&quot; class=&quot;headerlink&quot; title=&quot;一层箭头函数 ：箭头函数中的 this指向，箭头函数存在的对象&quot;&gt;&lt;/a&gt;一层箭头函数 ：箭头函数中的 this指向，箭头函数存在的对象&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    say: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.say(); // obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时的 this指的是定义它的对象, obj,而不是 window&lt;/p&gt;
&lt;h3 id=&quot;多层嵌套的箭头函数-：箭头函数中的this都指向外层箭头函数所处的对象&quot;&gt;&lt;a href=&quot;#多层嵌套的箭头函数-：箭头函数中的this都指向外层箭头函数所处的对象&quot; class=&quot;headerlink&quot; title=&quot;多层嵌套的箭头函数 ：箭头函数中的this都指向外层箭头函数所处的对象&quot;&gt;&lt;/a&gt;多层嵌套的箭头函数 ：箭头函数中的this都指向外层箭头函数所处的对象&lt;/h3&gt;&lt;p&gt;因为f1定义时所处的函数 中的 this是指的 obj所以不管有多层嵌套,都是 obj&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    say: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var f1 = () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this); // obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          console.log(this); // obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      f1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.say()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;普通函数和箭头函数混杂嵌套，箭头函数this指向都是-window&quot;&gt;&lt;a href=&quot;#普通函数和箭头函数混杂嵌套，箭头函数this指向都是-window&quot; class=&quot;headerlink&quot; title=&quot;普通函数和箭头函数混杂嵌套，箭头函数this指向都是 window,&quot;&gt;&lt;/a&gt;普通函数和箭头函数混杂嵌套，箭头函数this指向都是 window,&lt;/h3&gt;&lt;p&gt;都是 window,因为 箭头函数在定义的时候它所处的环境相当于是window所以在箭头函数内部的this函数window&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    say: function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var f1 = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        console.log(this);    // window, f1调用时,没有宿主对象,默认是window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          console.log(this); // window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      f1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  obj.say()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;严格模式下&quot;&gt;&lt;a href=&quot;#严格模式下&quot; class=&quot;headerlink&quot; title=&quot;严格模式下&quot;&gt;&lt;/a&gt;严格模式下&lt;/h3&gt;&lt;p&gt; 严格模式下,没有宿主调用的函数中的this是undefined!!!所以箭头函数中的也是undefined!&lt;/p&gt;
&lt;h2 id=&quot;es6扩充的api&quot;&gt;&lt;a href=&quot;#es6扩充的api&quot; class=&quot;headerlink&quot; title=&quot;es6扩充的api&quot;&gt;&lt;/a&gt;es6扩充的api&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用域let,const&lt;ul&gt;
&lt;li&gt;有了块级作用域&lt;/li&gt;
&lt;li&gt;不存在变量提升&lt;/li&gt;
&lt;li&gt;let变量所在作用域，先声明后使用&lt;/li&gt;
&lt;li&gt;let不允许在相同作用域内，重复声明同一个变量&lt;br&gt;（不能在函数内部重新声明参数。）&lt;/li&gt;
&lt;li&gt;不再需要立即执行函数模拟块级作用域&lt;/li&gt;
&lt;li&gt;const一旦声明变量，就必须立即初始化，不能留到以后赋值。(区分let)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;map&lt;br&gt;因为原生js中的 obj={},obj的key只能是字符串，为了扩展这一功能 实现新的数据类型Map。&lt;/li&gt;
&lt;li&gt;set&lt;br&gt;set和map一样，但是set中的obj不能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;es5中的filter-forEach-map&quot;&gt;&lt;a href=&quot;#es5中的filter-forEach-map&quot; class=&quot;headerlink&quot; title=&quot;es5中的filter,forEach,map&quot;&gt;&lt;/a&gt;es5中的filter,forEach,map&lt;/h2&gt;&lt;h3 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h3&gt;&lt;p&gt;filter(callback,thisArg)&lt;br&gt;thisArg可选。执行 callback 时的用于 this 的值。&lt;br&gt; 为数组中的每个元素调用一次 callback&lt;br&gt; 函数，并利用所有使得 callback&lt;br&gt; 返回 true 或 的元素创建一个新数组。&lt;/p&gt;
&lt;p&gt;callback&lt;br&gt; 只会在已经赋值的索引上被调用，对于那些已经被删除或者从未被赋值的索引    不会被调用。那些没有通过 callback&lt;br&gt;测试的元素会被跳过，不会被包含在新数组中。&lt;/p&gt;
&lt;p&gt;callback 被调用时传入三个参数：&lt;br&gt;元素的值&lt;br&gt;元素的索引&lt;br&gt;被遍历的数组&lt;/p&gt;
&lt;h3 id=&quot;forEach与map-each&quot;&gt;&lt;a href=&quot;#forEach与map-each&quot; class=&quot;headerlink&quot; title=&quot;forEach与map,$().each&quot;&gt;&lt;/a&gt;forEach与map,$().each&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//forEach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array.forEach(callback(currentValue, index, array)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //do something&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var new_array = arr.map(callback[, thisArg])　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//$.each()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(selector).each(function(index,element))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;二、区别&lt;/p&gt;
&lt;p&gt;2.1、forEach()返回值是undefined，不可以链式调用。&lt;/p&gt;
&lt;p&gt;2.2、map()返回一个新数组，原数组不会改变。&lt;/p&gt;
&lt;p&gt;2.3、没有办法终止或者跳出forEach()循环，除非抛出异常，所以想执行一个数组是否满足什么条件，返回布尔值，可以用一般的for循环实现，或者用Array.every()或者Array.some();&lt;/p&gt;
&lt;p&gt;2.4、$.each()方法规定为每个匹配元素规定运行的函数，可以返回 false 可用于及早停止循环。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;slice，splice的区别&quot;&gt;&lt;a href=&quot;#slice，splice的区别&quot; class=&quot;headerlink&quot; title=&quot;slice，splice的区别&quot;&gt;&lt;/a&gt;slice，splice的区别&lt;/h2&gt;&lt;p&gt;slice :获得新数组，不改变原来数组&lt;br&gt;splice( para1,para2 ) : 删除数组中任意数量的项(改变数组以及长度)&lt;br&gt;从para1开始的para2项。注意的是用splice删除数组中的值会直接将某几项从数组中完全删除，会导致数组length值的改变&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;es7中的aysnc-await&quot;&gt;&lt;a href=&quot;#es7中的aysnc-await&quot; class=&quot;headerlink&quot; title=&quot;es7中的aysnc await&quot;&gt;&lt;/a&gt;es7中的aysnc await&lt;/h2&gt;&lt;hr&gt;
&lt;h2 id=&quot;除了promise-还有其他的异步方式？&quot;&gt;&lt;a href=&quot;#除了promise-还有其他的异步方式？&quot; class=&quot;headerlink&quot; title=&quot;除了promise,还有其他的异步方式？&quot;&gt;&lt;/a&gt;除了promise,还有其他的异步方式？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/78dfb38ac3d7?winzoom=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/78dfb38ac3d7?winzoom=1&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;promise&lt;/li&gt;
&lt;li&gt;generator,可中断&lt;/li&gt;
&lt;li&gt;async,await;&lt;h3 id=&quot;async&quot;&gt;&lt;a href=&quot;#async&quot; class=&quot;headerlink&quot; title=&quot;async&quot;&gt;&lt;/a&gt;async&lt;/h3&gt;async函数声明定义了异步函数，它会返回一个AsyncFunction对象。和普通函数一样，你也可以定义一个异步函数表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;调用异步函数时会返回一个promise对象。当这个异步函数成功返回一个值时，将会使用promise的resolve方法来处理这个返回值，当异步函数抛出的是异常或者非法值时，将会使用promise的reject方法来处理这个异常值。&lt;/p&gt;
&lt;p&gt;异步函数可能会包括await表达式，这将会使异步函数暂停执行并等待promise解析传值后，继续执行异步函数并返回解析值。&lt;/p&gt;
&lt;p&gt;注意：await只能用在async函数中。&lt;/p&gt;
&lt;p&gt;前面依次读取两个文件的代码写成async函数如下：&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var asyncReadFile = async function ()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var f1 = await readFile(&amp;apos;/etc/fstab&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var f2 = await readFile(&amp;apos;/etc/shells&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(f1.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.log(f2.toString())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h1&gt;&lt;h2 id=&quot;说一下有哪些常用的模块化方案，各自有哪些使用场景和区别&quot;&gt;&lt;a href=&quot;#说一下有哪些常用的模块化方案，各自有哪些使用场景和区别&quot; class=&quot;headerlink&quot; title=&quot;说一下有哪些常用的模块化方案，各自有哪些使用场景和区别&quot;&gt;&lt;/a&gt;说一下有哪些常用的模块化方案，各自有哪些使用场景和区别&lt;/h2&gt;&lt;h3 id=&quot;require-js-AMD&quot;&gt;&lt;a href=&quot;#require-js-AMD&quot; class=&quot;headerlink&quot; title=&quot;require.js -AMD&quot;&gt;&lt;/a&gt;require.js -AMD&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;发展：&lt;br&gt;Require.JS在发展成浏览器端的模块加载器的同时向 Rhino / Node 等环境的模块加载器发展&lt;h3 id=&quot;sea-js-CMD&quot;&gt;&lt;a href=&quot;#sea-js-CMD&quot; class=&quot;headerlink&quot; title=&quot;sea.js - CMD&quot;&gt;&lt;/a&gt;sea.js - CMD&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;异步&lt;/li&gt;
&lt;li&gt;发展：&lt;br&gt;Sea.js 专门发展 Web 浏览器端&lt;h3 id=&quot;CommonJS&quot;&gt;&lt;a href=&quot;#CommonJS&quot; class=&quot;headerlink&quot; title=&quot;CommonJS&quot;&gt;&lt;/a&gt;CommonJS&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;同步，使用在服务器端&lt;/li&gt;
&lt;li&gt;优点：&lt;br&gt;服务器端便于重用&lt;br&gt;简单并容易使用&lt;/li&gt;
&lt;li&gt;缺点：&lt;br&gt;同步的模块方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的&lt;br&gt;不能非阻塞的并行加载多个模块&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A.js文件中调用另一个B.js文件，一定要在A.js中引入B.js&lt;br&gt;   require(“B.js”);&lt;br&gt;   另一个被调用的js，也就是B.js一定要对外提供接口。&lt;br&gt;   module.exports=b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;es6模块化&quot;&gt;&lt;a href=&quot;#es6模块化&quot; class=&quot;headerlink&quot; title=&quot;es6模块化&quot;&gt;&lt;/a&gt;es6模块化&lt;/h3&gt;&lt;p&gt;ECMAScript 6 模块化的目标是创建一种 CommonJS 和 AMD 使用者都乐意接受的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;类似 CommonJS，拥有简洁的语法，倾向于单一的接口并且支持循环依赖。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;类似 AMD，直接支持异步加载和配置模块加载。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内置语言允许 ES6 模块化超出 CommonJS 和 AMD 规范（之后会详细介绍）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;语法将比 CommonJS 的更简洁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;比 CommonJS 做的更好的循环依赖。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;结构可以做静态分析（静态检测，优化等）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ES6 模块化标准包括两部分：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;声明语法（引入与导出）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;编程式加载接口：用来配置如何加载模块和按条件加载模块。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;它能够更加精确地定义模块间哪些需要被 exposed/imported &lt;/li&gt;
&lt;li&gt;使得在编译时就能确定模块的依赖关系，同时使得前端在复杂项目时可以更好的分工和规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;UMD&quot;&gt;&lt;a href=&quot;#UMD&quot; class=&quot;headerlink&quot; title=&quot;UMD&quot;&gt;&lt;/a&gt;UMD&lt;/h3&gt;&lt;p&gt;UMD是AMD和CommonJS的糅合&lt;/p&gt;
&lt;p&gt;AMD模块以浏览器第一的原则发展，异步加载模块。&lt;br&gt;CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装&lt;br&gt;这迫使人们又想出另一个更通用的模式UMD ,希望解决跨平台的解决方案。 UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。&lt;br&gt;在判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function (window, factory) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (typeof exports === &amp;apos;object&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        module.exports = factory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else if (typeof define === &amp;apos;function&amp;apos; &amp;amp;&amp;amp; define.amd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        define(factory);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        window.eventUtil = factory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(this, function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //module ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;require-js-与sea-js&quot;&gt;&lt;a href=&quot;#require-js-与sea-js&quot; class=&quot;headerlink&quot; title=&quot;require.js 与sea.js&quot;&gt;&lt;/a&gt;require.js 与sea.js&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;都是异步模块加载&lt;/li&gt;
&lt;li&gt;对依赖模块的执行时机处理所不同&lt;ul&gt;
&lt;li&gt;AMD推崇依赖前置，在定义模块的时候就要声明其依赖的模块&lt;ul&gt;
&lt;li&gt;define(id?, dependencies?, factory);&lt;/li&gt;
&lt;li&gt;js可以方便知道依赖模块是谁，立即加载&lt;/li&gt;
&lt;li&gt;AMD在加载模块完成后就会执行改模块，所有模块都加载执行完后会进入require的回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMD推崇就近依赖，什么时候用到什么时候加载&lt;ul&gt;
&lt;li&gt;需要使用把模块变为字符串解析一遍才知道依赖了那些模块&lt;/li&gt;
&lt;li&gt;CMD加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到require语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这也是很多人说AMD用户体验好，因为没有延迟，依赖模块提前执行了，CMD性能好，因为只有用户需要的时候才执行的原因&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//AMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define([&amp;apos;./a&amp;apos;,&amp;apos;./b&amp;apos;], function (a, b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //依赖一开始就写好&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b.test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//CMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(function (requie, exports, module) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //依赖可以就近书写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var a = require(&amp;apos;./a&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //软依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var b = requie(&amp;apos;./b&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        b.test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;gulp-模块化&quot;&gt;&lt;a href=&quot;#gulp-模块化&quot; class=&quot;headerlink&quot; title=&quot;gulp 模块化&quot;&gt;&lt;/a&gt;gulp 模块化&lt;/h3&gt;&lt;p&gt;在gulpfile里编写任务实现模块化&lt;br&gt;gulpfile.js&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//基本模块引入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var gulp = require(&amp;apos;gulp&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var brow = require(&amp;apos;browerify&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var source = require(&amp;apos;vinyl-source-stream&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//任务编写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gulp.task(&amp;apos;bundle&amp;apos;, function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //将任务交付给browserify&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //browerify读取入口文件后，能自动查找相互之间有依赖的关系的模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return brow(&amp;apos;./entry.js&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .bundle()//输出一个文件流变量（gulp的工作机制）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .pipe(source(&amp;apos;bundle.js&amp;apos;))//将文件流变量输出为文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .pipe(gulp.dest(&amp;apos;js&amp;apos;));//将文件最终输出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-ff8c9d3c45a31e50.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;20170111164714676.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;你了解的模块化&quot;&gt;&lt;a href=&quot;#你了解的模块化&quot; class=&quot;headerlink&quot; title=&quot;你了解的模块化&quot;&gt;&lt;/a&gt;你了解的模块化&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/042dd3576508&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/042dd3576508&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/9171c5496c8e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/9171c5496c8e&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000006215047&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000006215047&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;commonjs&quot;&gt;&lt;a href=&quot;#commonjs&quot; class=&quot;headerlink&quot; title=&quot;commonjs&quot;&gt;&lt;/a&gt;commonjs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;①模块化：指的就是遵守commonjs规范，解决不同js模块之间相互调用问题&lt;/li&gt;
&lt;li&gt;②CommonJS：&lt;br&gt;A.js文件中调用另一个B.js文件，一定要在A.js中引入B.js&lt;br&gt;require(“B.js”);&lt;br&gt;另一个被调用的js，也就是B.js一定要对外提供接口。&lt;br&gt;module.exports=b&lt;/li&gt;
&lt;li&gt;common:可以定义变量的作用域，还可以定义模块之间的依赖。&lt;br&gt;可惜这是专为 Node 设计的，不支持在浏览器运行，也不能异步加载模块&lt;br&gt;。但是，它可以在前端app使用，借助 Browserify 或者其他工具来转换，就可以让它在浏览器运行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;require-js-使用-AMD-异步模块声明-define-require&quot;&gt;&lt;a href=&quot;#require-js-使用-AMD-异步模块声明-define-require&quot; class=&quot;headerlink&quot; title=&quot;require.js 使用 AMD  异步模块声明(define + require)&quot;&gt;&lt;/a&gt;require.js 使用 AMD  异步模块声明(define + require)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;效率高，可惜有点冗长，而且不能在 Node.js 本地运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;define(‘myModule’, [‘dep1’, ‘dep2’], function (dep1, dep2){&lt;br&gt;        // JavaScript chunk, with a potential deferred loading&lt;br&gt;        return {hello: () =&amp;gt; console.log(‘hello from myModule’)};&lt;br&gt;    });&lt;br&gt;    // anywhere else&lt;br&gt;    require([‘myModule’], function (myModule) {&lt;br&gt;        myModule.hello() // display ‘hello form myModule’&lt;br&gt;    });&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;sea-js-使用-CMD-公共模块声明-exports-require&quot;&gt;&lt;a href=&quot;#sea-js-使用-CMD-公共模块声明-exports-require&quot; class=&quot;headerlink&quot; title=&quot;sea.js  使用 CMD 公共模块声明(exports + require)&quot;&gt;&lt;/a&gt;sea.js  使用 CMD 公共模块声明(exports + require)&lt;/h3&gt;&lt;p&gt;   define  定义一个模块&lt;br&gt;    require  加载一个模块&lt;br&gt;    export  暴露一个模块&lt;br&gt;    module  模块&lt;br&gt;sea.js、require.js中每个模块是单独的一个文件。每个模块都是define函数中设置暴露的功能。每个模块都是一个单独的作用域。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;sea-对比require&quot;&gt;&lt;a href=&quot;#sea-对比require&quot; class=&quot;headerlink&quot; title=&quot;sea 对比require&quot;&gt;&lt;/a&gt;sea 对比require&lt;/h3&gt;&lt;p&gt;Sea.js与Require.js发展方向有差异，Require.JS在发展成浏览器端的模块加载器的同时向 Rhino / Node 等环境的模块加载器发展。Sea.js 专门发展 Web 浏览器端，同时通过 Node 扩展的方式也可以 在Node 环境中使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;es6模块化-UMD-AMD-和-CommonJS&quot;&gt;&lt;a href=&quot;#es6模块化-UMD-AMD-和-CommonJS&quot; class=&quot;headerlink&quot; title=&quot;es6模块化 UMD(AMD 和 CommonJS)&quot;&gt;&lt;/a&gt;es6模块化 UMD(AMD 和 CommonJS)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ES6的模块化的基本规则或特点， 欢迎补充：&lt;br&gt;　1：每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；&lt;br&gt;　2：每一个模块内声明的变量都是局部变量， 不会污染全局作用域；&lt;br&gt;　3：模块内部的变量或者函数可以通过export导出；&lt;br&gt;　4：一个模块可以导入别的模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//lib.js&lt;br&gt;//导出常量&lt;br&gt;export const sqrt = Math.sqrt;&lt;br&gt;//导出函数&lt;br&gt;export function square(x) {&lt;br&gt;    return x * x;&lt;br&gt;}&lt;br&gt;//导出函数&lt;br&gt;export function diag(x, y) {&lt;br&gt;    return sqrt(square(x) + square(y));&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;//main.js&lt;br&gt;import { square, diag } from ‘./lib’;&lt;br&gt;console.log(square(11)); // 121&lt;br&gt;console.log(diag(4, 3)); // 5&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;使用模块化的好处？模块化可以解决的问题？&quot;&gt;&lt;a href=&quot;#使用模块化的好处？模块化可以解决的问题？&quot; class=&quot;headerlink&quot; title=&quot;使用模块化的好处？模块化可以解决的问题？&quot;&gt;&lt;/a&gt;使用模块化的好处？模块化可以解决的问题？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/seajs/seajs/issues/547&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/seajs/seajs/issues/547&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恼人的命名冲突&lt;br&gt;若将复用部分 提取到一个util.js文件中，自己定义的js中的函数名可能跟util.js中的函数重复&lt;/li&gt;
&lt;li&gt;&lt;p&gt;烦琐的文件依赖&lt;br&gt;我想在基于 util.js，其中有一个最被大家喜欢的组件是 dialog.js，使用方式很简单。&lt;br&gt;在 dialog.js 前没有引入 util.js，因此 dialog.js 无法正常工作。同样不要以为我上面的故事是虚构的，在我待过的公司里，至今依旧有类似的脚本报错，特别是在各种快速制作的营销页面中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块间相互调用，协同工作，实现某特定功能。&lt;/li&gt;
&lt;li&gt;模块化的核心价值：模块化最核心的价值在于解决不同文件之间的分工和调用问题，即依赖关系。&lt;/li&gt;
&lt;li&gt;模块的版本管理。通过别名等配置，配合构建工具，可以比较轻松地实现模块的版本管理。&lt;/li&gt;
&lt;li&gt;提高可维护性。模块化可以让每个文件的职责单一，非常有利于代码的维护。&lt;/li&gt;
&lt;li&gt;前端性能优化。Sea.js 通过异步加载模块，这对页面性能非常有益。Sea.js 还提供了 combo、flush 等插件，配合服务端，可以很好地对页面性能进行调优。&lt;/li&gt;
&lt;li&gt;跨环境共享模块。CMD 模块定义规范与 Node.js 的模块规范非常相近。通过 Sea.js 的 Node.js 版本，可以很方便实现模块的跨服务器和浏览器共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;自己封装Ajax&quot;&gt;&lt;a href=&quot;#自己封装Ajax&quot; class=&quot;headerlink&quot; title=&quot;自己封装Ajax&quot;&gt;&lt;/a&gt;自己封装Ajax&lt;/h2&gt;&lt;h3 id=&quot;基本步骤&quot;&gt;&lt;a href=&quot;#基本步骤&quot; class=&quot;headerlink&quot; title=&quot;基本步骤&quot;&gt;&lt;/a&gt;基本步骤&lt;/h3&gt;&lt;h4 id=&quot;１-发送请求：&quot;&gt;&lt;a href=&quot;#１-发送请求：&quot; class=&quot;headerlink&quot; title=&quot;１.发送请求：&quot;&gt;&lt;/a&gt;１.发送请求：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;var xhr=new XMLHttpRequest();&lt;/li&gt;
&lt;li&gt;xhr.open(“GET”,”test1.txt”,true)：规定请求的类型、URL 以及是否异步处理请求。     &lt;/li&gt;
&lt;li&gt;xhr.send()&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(method,url,async)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     method：请求的类型；GET 或 POST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      url：文件在服务器上的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      async：true（异步）或 false（同步）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      xhr.send()&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     send(string): 将请求发送到服务器。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      string：仅用于 POST 请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;２-判断响应是否成功（获得响应数据）：&quot;&gt;&lt;a href=&quot;#２-判断响应是否成功（获得响应数据）：&quot; class=&quot;headerlink&quot; title=&quot;２.判断响应是否成功（获得响应数据）：&quot;&gt;&lt;/a&gt;２.判断响应是否成功（获得响应数据）：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;知晓请求的状态 xhr.readyState==4,每次状态改变都会触发onreadystatechange&lt;blockquote&gt;
&lt;p&gt;0:请求未初始化&lt;br&gt; 1:与服务器连接已经建立&lt;br&gt; 2:服务器已经接收到请求&lt;br&gt; 3:服务器正在处理请求&lt;br&gt; 4:请求已经完成，且响应已经就绪
　&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听服务器的状态码xhr.status == 200&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange=function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if(xhr.readyState==4 &amp;amp;&amp;amp;xhr.status==200 )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //执行响应数据 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;注意：Ajax中get-post处理方式不一样&quot;&gt;&lt;a href=&quot;#注意：Ajax中get-post处理方式不一样&quot; class=&quot;headerlink&quot; title=&quot;注意：Ajax中get post处理方式不一样&quot;&gt;&lt;/a&gt;注意：Ajax中get post处理方式不一样&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;请求url不同&lt;br&gt;get: 请求数据会出现在url中：opt.url + ‘?’ + postData&lt;br&gt;post: opt.url&lt;/li&gt;
&lt;li&gt;post需要设置请求头&lt;br&gt;这个请求头是告诉服务器怎么去解析请求的正文部分。&lt;/li&gt;
&lt;li&gt;xhr.send&lt;br&gt;post: xhr.send(postData);&lt;br&gt;get: xmlHttp.send(null);&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;ajax实现完整代码&quot;&gt;&lt;a href=&quot;#ajax实现完整代码&quot; class=&quot;headerlink&quot; title=&quot;ajax实现完整代码&quot;&gt;&lt;/a&gt;ajax实现完整代码&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* 封装ajax函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125;opt.type http连接的方式，包括POST和GET两种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;string&amp;#125;opt.url 发送请求的url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;boolean&amp;#125;opt.async 是否为异步请求，true为异步的，false为同步的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;object&amp;#125;opt.data 发送的参数，格式为对象类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &amp;#123;function&amp;#125;opt.success ajax发送并接收成功调用的回调函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function ajax(opt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt = opt || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt.method = opt.method.toUpperCase() || &amp;apos;POST&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt.url = opt.url || &amp;apos;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt.async = opt.async || true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt.data = opt.data || null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        opt.success = opt.success || function () &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var xmlHttp = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (XMLHttpRequest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp = new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp = new ActiveXObject(&amp;apos;Microsoft.XMLHTTP&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;var params = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (var key in opt.data)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            params.push(key + &amp;apos;=&amp;apos; + opt.data[key]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var postData = params.join(&amp;apos;&amp;amp;&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (opt.method.toUpperCase() === &amp;apos;POST&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp.open(opt.method, opt.url, opt.async);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp.setRequestHeader(&amp;apos;Content-Type&amp;apos;, &amp;apos;application/x-www-form-urlencoded;charset=utf-8&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp.send(postData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else if (opt.method.toUpperCase() === &amp;apos;GET&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp.open(opt.method, opt.url + &amp;apos;?&amp;apos; + postData, opt.async);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            xmlHttp.send(null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xmlHttp.onreadystatechange = function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (xmlHttp.readyState == 4 &amp;amp;&amp;amp; xmlHttp.status == 200) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                opt.success(xmlHttp.responseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    method: &amp;apos;POST&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &amp;apos;test.php&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name1: &amp;apos;value1&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name2: &amp;apos;value2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: function (response) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       console.log(response)；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/a757956132/p/5603176.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;封装&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/u011032902/article/details/54728710?utm_source=itdadao&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现原理&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;get-post方式的区别：&quot;&gt;&lt;a href=&quot;#get-post方式的区别：&quot; class=&quot;headerlink&quot; title=&quot;get post方式的区别：&quot;&gt;&lt;/a&gt;get post方式的区别：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GET：一般用来获取数据  ，POST：一般用来修改数据&lt;/li&gt;
&lt;li&gt;get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。&lt;/li&gt;
&lt;li&gt;大部分浏览器对GET url有长度限制2k，post传送的数据量较大，一般被默认为不受限制。但理论上，IIS4中最大量为80KB，IIS5中为100KB。&lt;/li&gt;
&lt;li&gt;缓存的问题。GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。但是post请求是不会被缓存的。&lt;/li&gt;
&lt;li&gt;对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。&lt;/li&gt;
&lt;li&gt;GET/POST使用场景有区别&lt;ul&gt;
&lt;li&gt;用get:&lt;br&gt;请求中的URL可以被手动输入&lt;br&gt;请求中的URL可以被存在书签里，或者历史里，或者快速拨号里面，或者分享给别人。&lt;br&gt;请求中的URL可以被缓存。GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。但是post请求是不会被缓存的。&lt;br&gt; 用GET： 可以重复的交互，比如取个数据，跳个页面&lt;/li&gt;
&lt;li&gt;post:&lt;br&gt;表单数据，数据库内添加新的数据行，用POST, 因为POST不能被缓存，所以浏览器不会多次提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延伸&lt;br&gt;http:get 获取数据 post:修改数据 put:增加数据 delete：删除数据&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何判断ajax数据加载完毕？&quot;&gt;&lt;a href=&quot;#如何判断ajax数据加载完毕？&quot; class=&quot;headerlink&quot; title=&quot;如何判断ajax数据加载完毕？&quot;&gt;&lt;/a&gt;如何判断ajax数据加载完毕？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ajax请求设置为同步（同步慎用-项目中的这种办法）&lt;br&gt;在$(ajax)中，的async:false，变为同步，也就是说，先请求并将数据写入表格以后，再执行排序的代码.&lt;br&gt;但是建议：同步请求慎用，在数据量比较大的时候，用户缺一直在等待数据加载出来，很痛苦&lt;/li&gt;
&lt;li&gt;ajax异步请求，判断数据加载完毕&lt;ul&gt;
&lt;li&gt;设置定时器监测&lt;/li&gt;
&lt;li&gt;promise（fetch）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Node-amp-Express&quot;&gt;&lt;a href=&quot;#Node-amp-Express&quot; class=&quot;headerlink&quot; title=&quot;Node&amp;amp;Express&quot;&gt;&lt;/a&gt;Node&amp;amp;Express&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;基于node的其他web开发框架&lt;/li&gt;
&lt;li&gt;node 有关的知识点&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h2&gt;&lt;p&gt;Express 是一个基于 Node的极简灵活的web 应用开发框架。Express是在Node之上扩展了 Web 应用所需的基本功能。&lt;br&gt;Express完全是由中间件构成一个的 web 开发框架：从本质上来说，一个 Express 应用就是在调用各种中间件。&lt;/p&gt;
&lt;h3 id=&quot;中间件含义&quot;&gt;&lt;a href=&quot;#中间件含义&quot; class=&quot;headerlink&quot; title=&quot;中间件含义&quot;&gt;&lt;/a&gt;中间件含义&lt;/h3&gt;&lt;p&gt;是一个函数或功能，（err,res,rep,next），是封装在程序中处理请求的功能。后台的请求分为一部分一部分，每一部分都有中间件来完成,之道响应完毕&lt;/p&gt;
&lt;h3 id=&quot;Express-几种中间件：&quot;&gt;&lt;a href=&quot;#Express-几种中间件：&quot; class=&quot;headerlink&quot; title=&quot;Express 几种中间件：&quot;&gt;&lt;/a&gt;Express 几种中间件：&lt;/h3&gt;&lt;p&gt;应用级中间件&lt;br&gt;绑定到app 对象使用 app.use()和 app.METHOD()， 其中， METHOD 是需要处理的 HTTP 请求的方法，例如 GET, PUT, POST 等等&lt;/p&gt;
&lt;p&gt;路由级中间件&lt;br&gt;绑定的对象为 express.Router()。路由级使用 router.use() 加载&lt;/p&gt;
&lt;p&gt;错误处理中间件&lt;br&gt;4 个参数，而不是 3 个，其签名如下： (err, req, res, next)。&lt;/p&gt;
&lt;p&gt;内置的中间件&lt;br&gt;express.static是 Express 唯一内置的中间件。负责在 Express 应用中托管静态资源。&lt;/p&gt;
&lt;p&gt;第三方中间件&lt;br&gt;例如 cookie-parser&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h1&gt;&lt;p&gt; 对前端安全有什么看法？&lt;br&gt;是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？&lt;/p&gt;
&lt;p&gt;1, XSS(cross-site scripting跨域脚本攻击)是一种经常出现在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。 其实在web前端方面，可以简单的理解为一种javascript代码注入。 解决方法：将前端输出数据都进行转义（$lt,$gt）&lt;/p&gt;
&lt;p&gt;2, CSRF（cross-site request forgery），翻译为跨站请求伪造，与XSS非常相似，但XSS是利用用户对当前网站的信任来发起攻击，而CSRF是利用网站对用户的信任来发起攻击(即模拟请求攻击)。&lt;/p&gt;
&lt;p&gt;对于CSRF攻击，我们所能做的可以有：&lt;/p&gt;
&lt;p&gt;检查报头中的Referer参数确保请求发自正确的网站（但XHR请求可调用setRequestHeader方法来修改Referer报头）；&lt;br&gt;对于任何重要的请求都需要重新验证用户的身份；&lt;br&gt;创建一个唯一的令牌（Token），将其存在服务端的session中及客户端的cookie中，对任何请求，都检查二者是否一致。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;网络部分&quot;&gt;&lt;a href=&quot;#网络部分&quot; class=&quot;headerlink&quot; title=&quot;网络部分&quot;&gt;&lt;/a&gt;网络部分&lt;/h1&gt;&lt;h2 id=&quot;一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;a href=&quot;#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot; class=&quot;headerlink&quot; title=&quot;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&quot;&gt;&lt;/a&gt;一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）&lt;/h2&gt;&lt;p&gt; 详细版：&lt;br&gt;      1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;&lt;br&gt;      2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;&lt;br&gt;      3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;&lt;br&gt;      4、进行HTTP协议会话，客户端发送报头(请求报头);&lt;br&gt;      5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;&lt;br&gt;      6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;&lt;br&gt;      7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;&lt;br&gt;      8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;&lt;br&gt;      9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;&lt;br&gt;      10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;简洁版：
  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
  载入解析到的资源文件，渲染页面，完成。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;a href=&quot;#页面渲染流程主要分三部分&quot; class=&quot;headerlink&quot; title=&quot;页面渲染流程主要分三部分&quot;&gt;&lt;/a&gt;页面渲染流程主要分三部分&lt;/h2&gt;&lt;p&gt;HTML文档解析生成DOM树&lt;br&gt;DOM树构建完到Webkit绘制上下文&lt;br&gt;上下文到最终生成的图像 (JavaScript省略为JS)&lt;br&gt;当用户输入URL时候，WebKit调用其资源加载器加载该URL对应的网页。&lt;br&gt;加载器依赖网络模块建立连接，发送请求并接受答复。&lt;br&gt;WebKit收到各种网页或资源的数据，可能是同步或者是异步获取的。&lt;br&gt;网页被交给HTML解释器转换成一系列词语(Token)。&lt;br&gt;解释器根据词语构建节点(Node)，形成DOM树。&lt;br&gt;如果节点是JS，调用JS引擎解释并执行。&lt;br&gt;JS代码修改DOM树的结构&lt;br&gt;如果节点需要依赖其他资源，如图片、css等，调用资源加载器来加载他们，但他们是异步的，不会阻碍当前DOM树的继续构建，如果是JS资源URL(未标记异步)，则需要停止当前DOM数的构建，直到JS引擎执行后才继续构建DOM树。 至此会触发两个事件，一个时DOMConent表示DOM构建完全(和jQuery的$(function(){})()一样),后者是 onload 事件，表示DOM树所依赖的各种图片、css等资源加载完毕，通常这两个事件不是同时发生。&lt;br&gt;接下来是利用CSS和DOM树构建RenderObject树直到绘图上下文。&lt;/p&gt;
&lt;p&gt;CSS文件被CSS解释器解释成表示结构。&lt;br&gt;CSS解释器完成工作之后，在DOM树上附加解释后的样式信息，包括布局计算，这就是RenderObject树。&lt;br&gt;RenderObject节点在创建的同时，WebKit会根据网页的层次结构创建RenderLayer树，同时构建一个虚拟的绘图上下文。&lt;br&gt;实际上，DOM树，RenderObject树，RenderLayer树和绘图上下文在关闭浏览器前并不会被销毁。&lt;/p&gt;
&lt;p&gt;最后，根据绘图上下文生成最终图像，主要依赖2D和3D图形库。&lt;/p&gt;
&lt;p&gt;绘图上下文将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类，绘图实现类将2D图形库或者3D图形库绘制的结果保存下来，交给浏览器来显示。&lt;/p&gt;
&lt;h2 id=&quot;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot;&gt;&lt;a href=&quot;#浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot; class=&quot;headerlink&quot; title=&quot;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&quot;&gt;&lt;/a&gt;浏览器接收到服务器文件（HTML、JS、CSS、图象等），开始加载资源，对于加载到的资源进行以下操作：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浏览器解析&lt;ul&gt;
&lt;li&gt;解析html形成 Dom Tree&lt;/li&gt;
&lt;li&gt;解析 css 形成 Css Rule Tree&lt;/li&gt;
&lt;li&gt;Js通过  DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构建Render Tree&lt;ul&gt;
&lt;li&gt;浏览器引擎用Dom Tree 和 Css Rule Tree 构建 Render Tree&lt;ul&gt;
&lt;li&gt;Css Rule Tree对比DOM生成Style Context Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绘制网页&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;网络有几层，每层有哪些协议&quot;&gt;&lt;a href=&quot;#网络有几层，每层有哪些协议&quot; class=&quot;headerlink&quot; title=&quot;网络有几层，每层有哪些协议&quot;&gt;&lt;/a&gt;网络有几层，每层有哪些协议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OSI分层（7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。&lt;/li&gt;
&lt;li&gt;TCP/IP分层（4层）：网络接口层、网际层、运输层、应用层。&lt;/li&gt;
&lt;li&gt;五层协议（5层）：物理层、数据链路层、网络层、运输层、应用层。&lt;br&gt;tcp,udp在运输层&lt;br&gt;http,ftp 在应用层&lt;br&gt;ip在网络层&lt;h2 id=&quot;UDP-TCP-的区别，什么时候用哪个-哪个是可靠的？&quot;&gt;&lt;a href=&quot;#UDP-TCP-的区别，什么时候用哪个-哪个是可靠的？&quot; class=&quot;headerlink&quot; title=&quot;UDP TCP 的区别，什么时候用哪个,哪个是可靠的？&quot;&gt;&lt;/a&gt;UDP TCP 的区别，什么时候用哪个,哪个是可靠的？&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;1、TCP面向连接;UDP是无连接的，即发送数据之前不需要建立连接&lt;/li&gt;
&lt;li&gt;2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达（ack）;UDP尽最大努力交付，即不保证可靠交付&lt;/li&gt;
&lt;li&gt;3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的&lt;br&gt;UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）&lt;/li&gt;
&lt;li&gt;4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信&lt;/li&gt;
&lt;li&gt;5、TCP首部开销20字节;UDP的首部开销小，只有8个字节&lt;/li&gt;
&lt;li&gt;6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;http-中get和post的区别&quot;&gt;&lt;a href=&quot;#http-中get和post的区别&quot; class=&quot;headerlink&quot; title=&quot;http 中get和post的区别&quot;&gt;&lt;/a&gt;http 中get和post的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;GET：一般用来获取数据  ，POST：一般用来修改数据&lt;/li&gt;
&lt;li&gt;发送值：&lt;br&gt;　&lt;em&gt; geturl参数可见。
　&lt;/em&gt; post是通过HTTP post机制，将数据放到 头传过去&lt;/li&gt;
&lt;li&gt;长度限制：&lt;ul&gt;
&lt;li&gt;大部分浏览器对GET url有长度限制2k&lt;/li&gt;
&lt;li&gt;post传送的数据量较大，一般被默认为不受限制。80KB-100KB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存:&lt;ul&gt;
&lt;li&gt;GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。&lt;ul&gt;
&lt;li&gt;但是post请求是不会被缓存的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GET/POST使用场景有区别&lt;ul&gt;
&lt;li&gt;用get:&lt;br&gt;请求中的URL可以被手动输入&lt;br&gt;请求中的URL可以被存在书签里，或者历史里，或者快速拨号里面，或者分享给别人。&lt;br&gt;请求中的URL可以被缓存。GET 请求默认在ajax环境下是会被缓存的 ，这样就会减轻服务器端的压力。但是post请求是不会被缓存的。&lt;br&gt; 用GET： 可以重复的交互，比如取个数据，跳个页面&lt;/li&gt;
&lt;li&gt;post:&lt;br&gt;表单数据，数据库内添加新的数据行，用POST, 因为POST不能被缓存，所以浏览器不会多次提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;延伸&lt;br&gt;http:get 获取数据 post:修改数据 put:增加数据 delete：删除数据&lt;h2 id=&quot;为什么get方式有限制是2kb-，出于什么原因？&quot;&gt;&lt;a href=&quot;#为什么get方式有限制是2kb-，出于什么原因？&quot; class=&quot;headerlink&quot; title=&quot;为什么get方式有限制是2kb.，出于什么原因？&quot;&gt;&lt;/a&gt;为什么get方式有限制是2kb.，出于什么原因？&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;不同&lt;strong&gt;的&lt;/strong&gt;浏览器对于URL是有限制&lt;strong&gt;的&lt;/strong&gt;，比如IE浏览器对于URL&lt;strong&gt;的&lt;/strong&gt;限制为&lt;strong&gt;2KB&lt;/strong&gt;，而Chrome，FireFox浏览器理论上对于URL是没有限制&lt;strong&gt;的&lt;/strong&gt;，它真正&lt;strong&gt;的&lt;/strong&gt;限制取决于操作系统本身&lt;/li&gt;
&lt;li&gt;服务器最多处理64K大小的url。超过的部分，恕不处理。&lt;h2 id=&quot;知道post请求发几个包？，知道某个名词吗&quot;&gt;&lt;a href=&quot;#知道post请求发几个包？，知道某个名词吗&quot; class=&quot;headerlink&quot; title=&quot;知道post请求发几个包？，知道某个名词吗?&quot;&gt;&lt;/a&gt;知道post请求发几个包？，知道某个名词吗?&lt;/h2&gt;GET和POST还有一个重大区别是：GET产生一个TCP数据包，而POST产生两个TCP数据包(但又不是绝对)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1、对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200(返回数据);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、而对于POST，浏览器先发送header，服务器响应100(客户端应当继续发送请求) continue，浏览器再发送data，服务器响应200 ok(返回数据)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、也就是说，GET只需要汽车跑一趟就把货送到了，而POST得跑两趟，第一趟，先去和服务器打个招呼“嗨，我等下要送一批货来，你们打开门迎接我”，然后再回头把货送过去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;4、因为POST需要两步，时间上消耗的要多一点，看起来GET比POST更有效。因此Yahoo团队有推荐用GET替换POST来优化网站性能。但这是一个坑!跳入需谨慎。为什么?&lt;/li&gt;
&lt;li&gt;6、 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。&lt;/li&gt;
&lt;li&gt;7、但并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。&lt;h2 id=&quot;握手挥手&quot;&gt;&lt;a href=&quot;#握手挥手&quot; class=&quot;headerlink&quot; title=&quot;握手挥手&quot;&gt;&lt;/a&gt;握手挥手&lt;/h2&gt;&lt;h3 id=&quot;握手&quot;&gt;&lt;a href=&quot;#握手&quot; class=&quot;headerlink&quot; title=&quot;握手&quot;&gt;&lt;/a&gt;握手&lt;/h3&gt;三次握手过程：&lt;br&gt;客户端向服务器发送一个SYN（包含了SYN，SEQ）。&lt;br&gt;当服务器会向客户端发送一个SYN+ACK的数据包&lt;br&gt;当客户端向服务器发送ACK的数据包，此时ACK数据包中的ack值等于上一次SYN中的seq+syn。&lt;br&gt;如果某个阶段莫名中断，TCP会再次以相同的顺序发送相同的数据包。&lt;h4 id=&quot;三次握手的目的：&quot;&gt;&lt;a href=&quot;#三次握手的目的：&quot; class=&quot;headerlink&quot; title=&quot;三次握手的目的：&quot;&gt;&lt;/a&gt;三次握手的目的：&lt;/h4&gt;防止已过期的连接请求报文突然又传送到服务器，因而产生错误。&lt;h3 id=&quot;四次挥手&quot;&gt;&lt;a href=&quot;#四次挥手&quot; class=&quot;headerlink&quot; title=&quot;四次挥手&quot;&gt;&lt;/a&gt;四次挥手&lt;/h3&gt;第一次挥手：主动关闭方A发送一个FIN，用来A到被动关闭方B对的数据传送，也就是A不再给B发数据了，但是A还可以接收数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二次挥手：B收到FIN包后，发一个ACK给对方，确认序号为收到序号+1。（一个FIN占用一个序号）&lt;/p&gt;
&lt;p&gt;第三次挥手：B发送一个FIN，用来关闭B到A的数据传送&lt;/p&gt;
&lt;p&gt;第四次挥手：A收到FIN后，发送一个ACK给B，确认序号为收到序号+1。完成四次挥手。&lt;/p&gt;
&lt;h2 id=&quot;为什么挥手比握手多了一个次？&quot;&gt;&lt;a href=&quot;#为什么挥手比握手多了一个次？&quot; class=&quot;headerlink&quot; title=&quot;为什么挥手比握手多了一个次？&quot;&gt;&lt;/a&gt;为什么挥手比握手多了一个次？&lt;/h2&gt;&lt;p&gt;但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以它这里的ACK报文和FIN报文分开发送的。&lt;/p&gt;
&lt;h2 id=&quot;http的缓存机制（cookie）&quot;&gt;&lt;a href=&quot;#http的缓存机制（cookie）&quot; class=&quot;headerlink&quot; title=&quot;http的缓存机制（cookie）&quot;&gt;&lt;/a&gt;http的缓存机制（cookie）&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/0c31b58dbccb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/0c31b58dbccb&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000010775131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://segmentfault.com/a/1190000010775131&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-3e3258c0ab144bfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-870aaa08f5c962a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;http请求是有状态的嘛？websocket区别&quot;&gt;&lt;a href=&quot;#http请求是有状态的嘛？websocket区别&quot; class=&quot;headerlink&quot; title=&quot;http请求是有状态的嘛？websocket区别&quot;&gt;&lt;/a&gt;http请求是有状态的嘛？websocket区别&lt;/h2&gt;&lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;http基于tcp&lt;/li&gt;
&lt;li&gt;http为非状态协议，每次发送数据都要重新请求连接&lt;/li&gt;
&lt;li&gt;被动性：服务器不能主动发送请求，只能等待响应&lt;h3 id=&quot;websocket&quot;&gt;&lt;a href=&quot;#websocket&quot; class=&quot;headerlink&quot; title=&quot;websocket&quot;&gt;&lt;/a&gt;websocket&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于tcp,为了实现实时 通信而产生的。&lt;/li&gt;
&lt;li&gt;特点：&lt;ul&gt;
&lt;li&gt;服务器可以主动发送请求&lt;/li&gt;
&lt;li&gt;节约带宽&lt;/li&gt;
&lt;li&gt;持久连接&lt;h2 id=&quot;Http与https&quot;&gt;&lt;a href=&quot;#Http与https&quot; class=&quot;headerlink&quot; title=&quot;Http与https&quot;&gt;&lt;/a&gt;Http与https&lt;/h2&gt;HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。&lt;br&gt;HTTPS和HTTP的区别主要如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。&lt;/p&gt;
&lt;p&gt;　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。&lt;/p&gt;
&lt;p&gt;　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。&lt;/p&gt;
&lt;p&gt;　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;HTTP请求报文与响应报文格式&quot;&gt;&lt;a href=&quot;#HTTP请求报文与响应报文格式&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求报文与响应报文格式&quot;&gt;&lt;/a&gt;HTTP请求报文与响应报文格式&lt;/h2&gt;&lt;h3 id=&quot;请求报文包含三部分：&quot;&gt;&lt;a href=&quot;#请求报文包含三部分：&quot; class=&quot;headerlink&quot; title=&quot;请求报文包含三部分：&quot;&gt;&lt;/a&gt;请求报文包含三部分：&lt;/h3&gt;&lt;p&gt;a、请求行：包含请求方法、URI、HTTP版本信息&lt;br&gt;b、请求首部字段&lt;br&gt;c、请求内容实体&lt;/p&gt;
&lt;h3 id=&quot;响应报文包含三部分：&quot;&gt;&lt;a href=&quot;#响应报文包含三部分：&quot; class=&quot;headerlink&quot; title=&quot;响应报文包含三部分：&quot;&gt;&lt;/a&gt;响应报文包含三部分：&lt;/h3&gt;&lt;p&gt;a、状态行：包含HTTP版本、状态码、状态码的原因短语&lt;br&gt;b、响应首部字段&lt;br&gt;c、响应内容实体&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见HTTP首部字段&quot;&gt;&lt;a href=&quot;#常见HTTP首部字段&quot; class=&quot;headerlink&quot; title=&quot;常见HTTP首部字段&quot;&gt;&lt;/a&gt;常见HTTP首部字段&lt;/h2&gt;&lt;p&gt;###　a、通用首部字段（请求报文与响应报文都会使用的首部字段）&lt;br&gt;Date：创建报文时间&lt;br&gt;Connection：连接的管理&lt;br&gt;Cache-Control：缓存的控制&lt;br&gt;Transfer-Encoding：报文主体的传输编码方式&lt;/p&gt;
&lt;h3 id=&quot;b、请求首部字段（请求报文会使用的首部字段）&quot;&gt;&lt;a href=&quot;#b、请求首部字段（请求报文会使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;b、请求首部字段（请求报文会使用的首部字段）&quot;&gt;&lt;/a&gt;b、请求首部字段（请求报文会使用的首部字段）&lt;/h3&gt;&lt;p&gt;Host：请求资源所在服务器&lt;br&gt;Accept：可处理的媒体类型&lt;br&gt;Accept-Charset：可接收的字符集&lt;br&gt;Accept-Encoding：可接受的内容编码&lt;br&gt;Accept-Language：可接受的自然语言&lt;/p&gt;
&lt;h3 id=&quot;c、响应首部字段（响应报文会使用的首部字段）&quot;&gt;&lt;a href=&quot;#c、响应首部字段（响应报文会使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;c、响应首部字段（响应报文会使用的首部字段）&quot;&gt;&lt;/a&gt;c、响应首部字段（响应报文会使用的首部字段）&lt;/h3&gt;&lt;p&gt;Accept-Ranges：可接受的字节范围&lt;br&gt;Location：令客户端重新定向到的URI&lt;br&gt;Server：HTTP服务器的安装信息&lt;/p&gt;
&lt;h3 id=&quot;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot;&gt;&lt;a href=&quot;#d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot; class=&quot;headerlink&quot; title=&quot;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&quot;&gt;&lt;/a&gt;d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）&lt;/h3&gt;&lt;p&gt;Allow：资源可支持的HTTP方法&lt;br&gt;Content-Type：实体主类的类型&lt;br&gt;Content-Encoding：实体主体适用的编码方式&lt;br&gt;Content-Language：实体主体的自然语言&lt;br&gt;Content-Length：实体主体的的字节数&lt;br&gt;Content-Range：实体主体的位置范围，一般用于发出部分请求时使用&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Http状态码-常用的&quot;&gt;&lt;a href=&quot;#Http状态码-常用的&quot; class=&quot;headerlink&quot; title=&quot;Http状态码 常用的&quot;&gt;&lt;/a&gt;Http状态码 常用的&lt;/h3&gt;&lt;p&gt;成功的状态码：&lt;br&gt;200 – 服务器成功返回网页&lt;br&gt;304 – 未修改&lt;br&gt;失败的状态码：&lt;br&gt;404 – 请求的网页不存在&lt;br&gt;503 – 服务器暂时不可用&lt;br&gt;500 – 服务器内部错误  &lt;/p&gt;
&lt;h2 id=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;a href=&quot;#http状态码有那些？分别代表是什么意思？&quot; class=&quot;headerlink&quot; title=&quot;http状态码有那些？分别代表是什么意思？&quot;&gt;&lt;/a&gt;http状态码有那些？分别代表是什么意思？&lt;/h2&gt;&lt;h3 id=&quot;简单版&quot;&gt;&lt;a href=&quot;#简单版&quot; class=&quot;headerlink&quot; title=&quot;简单版&quot;&gt;&lt;/a&gt;简单版&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[
    100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
    200  OK         正常返回信息
    201  Created      请求成功并且服务器创建了新的资源
    202  Accepted     服务器已接受请求，但尚未处理
    301  Moved Permanently  请求的网页已永久移动到新位置。
    302 Found          临时性重定向。
    303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。
    304  Not Modified 自从上次请求后，请求的网页未修改过。

    400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
    401 Unauthorized 请求未授权。
    403 Forbidden      禁止访问。
    404 Not Found      找不到如何与 URI 相匹配的资源。

    500 Internal Server Error  最常见的服务器端错误。
    503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;完整版&quot;&gt;&lt;a href=&quot;#完整版&quot; class=&quot;headerlink&quot; title=&quot;完整版&quot;&gt;&lt;/a&gt;完整版&lt;/h3&gt;&lt;h4 id=&quot;1-信息类-：表示接收到请求并且继续处理&quot;&gt;&lt;a href=&quot;#1-信息类-：表示接收到请求并且继续处理&quot; class=&quot;headerlink&quot; title=&quot;1**(信息类)：表示接收到请求并且继续处理&quot;&gt;&lt;/a&gt;1**(信息类)：表示接收到请求并且继续处理&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;100——客户必须继续发出请求
101——客户要求服务器根据请求转换HTTP协议版本
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-响应成功-：表示动作被成功接收、理解和接受&quot;&gt;&lt;a href=&quot;#2-响应成功-：表示动作被成功接收、理解和接受&quot; class=&quot;headerlink&quot; title=&quot;2**(响应成功)：表示动作被成功接收、理解和接受&quot;&gt;&lt;/a&gt;2**(响应成功)：表示动作被成功接收、理解和接受&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;200——表明该请求被成功地完成，所请求的资源发送回客户端
201——提示知道新文件的URL
202——接受和处理、但处理未完成
203——返回信息不确定或不完整
204——请求收到，但返回信息为空
205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
206——服务器已经完成了部分用户的GET请求
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-重定向类-：为了完成指定的动作，必须接受进一步处理&quot;&gt;&lt;a href=&quot;#3-重定向类-：为了完成指定的动作，必须接受进一步处理&quot; class=&quot;headerlink&quot; title=&quot;3**(重定向类)：为了完成指定的动作，必须接受进一步处理&quot;&gt;&lt;/a&gt;3**(重定向类)：为了完成指定的动作，必须接受进一步处理&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;300——请求的资源可在多处得到
301——本网页被永久性转移到另一个URL
302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。
303——建议客户访问其他URL或访问方式
304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用
305——请求的资源必须从服务器指定的地址得到
306——前一版本HTTP中使用的代码，现行版本中不再使用
307——申明请求的资源临时性删除
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-客户端错误类-：请求包含错误语法或不能正确执行&quot;&gt;&lt;a href=&quot;#4-客户端错误类-：请求包含错误语法或不能正确执行&quot; class=&quot;headerlink&quot; title=&quot;4**(客户端错误类)：请求包含错误语法或不能正确执行&quot;&gt;&lt;/a&gt;4**(客户端错误类)：请求包含错误语法或不能正确执行&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;400——客户端请求有语法错误，不能被服务器所理解
401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
HTTP 401.1 - 未授权：登录失败
　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败
　　HTTP 401.3 - ACL 禁止访问资源
　　HTTP 401.4 - 未授权：授权被筛选器拒绝
HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败
402——保留有效ChargeTo头响应
403——禁止访问，服务器收到请求，但是拒绝提供服务
HTTP 403.1 禁止访问：禁止可执行访问
　　HTTP 403.2 - 禁止访问：禁止读访问
　　HTTP 403.3 - 禁止访问：禁止写访问
　　HTTP 403.4 - 禁止访问：要求 SSL
　　HTTP 403.5 - 禁止访问：要求 SSL 128
　　HTTP 403.6 - 禁止访问：IP 地址被拒绝
　　HTTP 403.7 - 禁止访问：要求客户证书
　　HTTP 403.8 - 禁止访问：禁止站点访问
　　HTTP 403.9 - 禁止访问：连接的用户过多
　　HTTP 403.10 - 禁止访问：配置无效
　　HTTP 403.11 - 禁止访问：密码更改
　　HTTP 403.12 - 禁止访问：映射器拒绝访问
　　HTTP 403.13 - 禁止访问：客户证书已被吊销
　　HTTP 403.15 - 禁止访问：客户访问许可过多
　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效
HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效
404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL
405——用户在Request-Line字段定义的方法不允许
406——根据用户发送的Accept拖，请求资源不可访问
407——类似401，用户必须首先在代理服务器上得到授权
408——客户端没有在用户指定的饿时间内完成请求
409——对当前资源状态，请求不能完成
410——服务器上不再有此资源且无进一步的参考地址
411——服务器拒绝用户定义的Content-Length属性请求
412——一个或多个请求头字段在当前请求中错误
413——请求的资源大于服务器允许的大小
414——请求的资源URL长于服务器允许的长度
415——请求资源不支持请求项目格式
416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-服务端错误类-：服务器不能正确执行一个正确的请求&quot;&gt;&lt;a href=&quot;#5-服务端错误类-：服务器不能正确执行一个正确的请求&quot; class=&quot;headerlink&quot; title=&quot;5**(服务端错误类)：服务器不能正确执行一个正确的请求&quot;&gt;&lt;/a&gt;5**(服务端错误类)：服务器不能正确执行一个正确的请求&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  HTTP 500 - 服务器遇到错误，无法完成请求
  　　HTTP 500.100 - 内部服务器错误 - ASP 错误
  　　HTTP 500-11 服务器关闭
  　　HTTP 500-12 应用程序重新启动
  　　HTTP 500-13 - 服务器太忙
  　　HTTP 500-14 - 应用程序无效
  　　HTTP 500-15 - 不允许请求 global.asa
  　　Error 501 - 未实现
HTTP 502 - 网关错误
HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;h2 id=&quot;什么是事务？&quot;&gt;&lt;a href=&quot;#什么是事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是事务？&quot;&gt;&lt;/a&gt;什么是事务？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个操作就被失败，以后操作就会回滚到操作前状态，或者是上有个节点。为了确保要么执行，要么不执行，就可以使用事务。要将有组语句作为事务考虑，就需要通过ACID测试，即原子性，一致性，隔离性和持久性。&lt;h2 id=&quot;数据库有哪几种事务&quot;&gt;&lt;a href=&quot;#数据库有哪几种事务&quot; class=&quot;headerlink&quot; title=&quot;数据库有哪几种事务&quot;&gt;&lt;/a&gt;数据库有哪几种事务&lt;/h2&gt;&lt;h2 id=&quot;视图&quot;&gt;&lt;a href=&quot;#视图&quot; class=&quot;headerlink&quot; title=&quot;视图&quot;&gt;&lt;/a&gt;视图&lt;/h2&gt;答：视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询&lt;h2 id=&quot;mysql的left-join，inner-join，right-join&quot;&gt;&lt;a href=&quot;#mysql的left-join，inner-join，right-join&quot; class=&quot;headerlink&quot; title=&quot;mysql的left join，inner join，right join;&quot;&gt;&lt;/a&gt;mysql的left join，inner join，right join;&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;Inner Join:内连接是最常见的一种连接，只连接匹配的行。它又分为等值连接（连接条件运算符为”=”）和不等值连接（连接条件运算符不为”=”，例如between…and）。&lt;/li&gt;
&lt;li&gt;Outer Join：它除了显示符合连接条件的记录以外，还会显示所有左表中的记录（右外连接就是所有右表中的记录）&lt;ul&gt;
&lt;li&gt;A FULL OUTER JOIN B：产生A和B的并集&lt;br&gt;*A Left Outer Join B：产生表A的完全集，而B表中匹配的则有值，没有匹配的则以null值取代。&lt;/li&gt;
&lt;li&gt;A Right Outer Join B：是后面的表为基础&lt;h2 id=&quot;mysql的索引&quot;&gt;&lt;a href=&quot;#mysql的索引&quot; class=&quot;headerlink&quot; title=&quot;mysql的索引;&quot;&gt;&lt;/a&gt;mysql的索引;&lt;/h2&gt;&lt;h2 id=&quot;索引的作用？和它的优点缺点是什么？&quot;&gt;&lt;a href=&quot;#索引的作用？和它的优点缺点是什么？&quot; class=&quot;headerlink&quot; title=&quot;索引的作用？和它的优点缺点是什么？&quot;&gt;&lt;/a&gt;索引的作用？和它的优点缺点是什么？&lt;/h2&gt;答：索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小。&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;h2 id=&quot;进程和线程有什么区别？&quot;&gt;&lt;a href=&quot;#进程和线程有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;进程和线程有什么区别？&quot;&gt;&lt;/a&gt;进程和线程有什么区别？&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程和线程都是CPU工作时间段的描述。&lt;/li&gt;
&lt;li&gt;进程是cpu资源分配的最小单位，线程是cpu调度的最小单位&lt;/li&gt;
&lt;li&gt;线程的划分尺度小于进程，使得多线程程序的并发性高。&lt;/li&gt;
&lt;li&gt;线程执行开销小，但不利于资源的管理和保护；&lt;/li&gt;
&lt;li&gt;一个进程可以有多个线程&lt;/li&gt;
&lt;li&gt;进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些.&lt;h2 id=&quot;什么是死锁，死锁产生的4个条件&quot;&gt;&lt;a href=&quot;#什么是死锁，死锁产生的4个条件&quot; class=&quot;headerlink&quot; title=&quot;什么是死锁，死锁产生的4个条件&quot;&gt;&lt;/a&gt;什么是死锁，死锁产生的4个条件&lt;/h2&gt;&lt;h3 id=&quot;死锁定义：&quot;&gt;&lt;a href=&quot;#死锁定义：&quot; class=&quot;headerlink&quot; title=&quot;死锁定义：&quot;&gt;&lt;/a&gt;死锁定义：&lt;/h3&gt;　在两个或多个并发进程中，如果每个进程持有某种资源而又都等待别的进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗地讲，就是两个或多个进程被无限期地阻塞、相互等待的一种状态。&lt;h3 id=&quot;产生条件：&quot;&gt;&lt;a href=&quot;#产生条件：&quot; class=&quot;headerlink&quot; title=&quot;产生条件：&quot;&gt;&lt;/a&gt;产生条件：&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;1：互斥条件        – 一个资源一次只能被一个进程使用&lt;/li&gt;
&lt;li&gt;2：请求保持条件 – 一个进程因请求资源而阻塞时，对已经获得资源保持不放 &lt;/li&gt;
&lt;li&gt;3：不可抢占条件 – 进程已获得的资源在未使用完之前不能强行剥夺&lt;/li&gt;
&lt;li&gt;4：循环等待条件 – 若干进程之间形成一种头尾相接的循环等待资源的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;预防避免死锁的方法&quot;&gt;&lt;a href=&quot;#预防避免死锁的方法&quot; class=&quot;headerlink&quot; title=&quot;预防避免死锁的方法&quot;&gt;&lt;/a&gt;预防避免死锁的方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1：破坏“请求和保持”条件：规定所有进程在开始运行之前，都必须一次性的申请其在整个运行过程所需要的全部资源。&lt;ul&gt;
&lt;li&gt;优点：简单，安全。 &lt;ul&gt;
&lt;li&gt;缺点：资源严重浪费，恶化了系统的利用率；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2：破坏“不剥夺”条件：进程逐个的提出资源请求，当一个已经保持了某些资源的进程，再提出新的资源请求而不能立即得到满足时，必须释放它已经保持了的所有资源，待以后需要时再重新申请。&lt;ul&gt;
&lt;li&gt;缺点：实现复杂，代价大，反复地申请和释放资源，而使进程的执行无限的推迟、延长了进程的周转时间增加系统开销、降低系统吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3：破坏“环路等待”条件：将所有的资源按类型进行线性排队，并赋予不同的序号。所有进程请求资源必须按照资源递增的次序提出，防止出现环路。 &lt;ul&gt;
&lt;li&gt;缺点：&lt;ul&gt;
&lt;li&gt;1、序号必须相对稳定，限制了新设备类型的增加&lt;/li&gt;
&lt;li&gt;2、作业（进程）使用资源顺序和系统规定的顺序不同而造成资源的浪费&lt;/li&gt;
&lt;li&gt;3、限制了用户编程 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　注意：由于互斥条件是非共享设备所必需的，不能改变&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;JQUERY&quot;&gt;&lt;a href=&quot;#JQUERY&quot; class=&quot;headerlink&quot; title=&quot;JQUERY&quot;&gt;&lt;/a&gt;JQUERY&lt;/h1&gt;&lt;h2 id=&quot;1-你在公司是怎么用jquery的？&quot;&gt;&lt;a href=&quot;#1-你在公司是怎么用jquery的？&quot; class=&quot;headerlink&quot; title=&quot;1 你在公司是怎么用jquery的？&quot;&gt;&lt;/a&gt;1 你在公司是怎么用jquery的？&lt;/h2&gt;&lt;p&gt;答：在项目中是怎么用的是看看你有没有项目经验(根据自己的实际情况来回答) 你用过的选择器啊，复选框啊，表单啊，ajax啊，事件等配置&lt;a href=&quot;http://lib.csdn.net/base/jquery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;环境 下载jquery类库 在jsp页面引用jquery类库即可&lt;/p&gt;
&lt;p&gt;&lt;script type=&quot;text/[JavaScript](http://lib.csdn.net/base/javascript)&quot; src=&quot;jquery/jquery-1.7.2.min.js&quot;&gt;接下来通过在&lt;script&gt; $(function(){ }); &lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-你为什么要使用jquery？&quot;&gt;&lt;a href=&quot;#2-你为什么要使用jquery？&quot; class=&quot;headerlink&quot; title=&quot;2 你为什么要使用jquery？&quot;&gt;&lt;/a&gt;2 你为什么要使用jquery？&lt;/h2&gt;&lt;p&gt;答：因为jQuery是轻量级的框架，大小不到30kb,它有强大的选择器，出色的DOM操作的封装，有可靠的事件处理机制(jQuery在处理事件绑定的时候相当的可靠)，完善的ajax(它的ajax封装的非常的好，不需要考虑复杂浏览器的兼容性和XMLHttpRequest对象的创建和使用的问题。) 出色的浏览器的兼容性。 而且支持链式操作，隐式迭代。行为层和结构层的分离，还支持丰富的插件，jquery的文档也非常的丰富。&lt;/p&gt;
&lt;h2 id=&quot;3-你觉得jquery有哪些好处？-答案同上&quot;&gt;&lt;a href=&quot;#3-你觉得jquery有哪些好处？-答案同上&quot; class=&quot;headerlink&quot; title=&quot;3 你觉得jquery有哪些好处？ 答案同上&quot;&gt;&lt;/a&gt;3 你觉得jquery有哪些好处？ 答案同上&lt;/h2&gt;&lt;h2 id=&quot;4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;a href=&quot;#4-你使用jquery遇到过哪些问题，你是怎么解决的？&quot; class=&quot;headerlink&quot; title=&quot;4 你使用jquery遇到过哪些问题，你是怎么解决的？&quot;&gt;&lt;/a&gt;4 你使用jquery遇到过哪些问题，你是怎么解决的？&lt;/h2&gt;&lt;p&gt;答：这个答案是开发的，看你是否有相关的项目经验。例前台拿不到值，JSON 可是出现的错误(多了一个空格等)这编译是不会报错的 jquery库与其他库冲突：1&amp;gt;如果其他库在jquery库之前导入的话1.我们可以通过jquery.noconflict()将变量的$的控制权过度给其他库2.自定义快捷键,用一个变量接住jquery.noconflict()3.通过函数传参2&amp;gt;如果jquery库在其他库之前导入就直接使用jquery今天在处理一个数据问题时，发现jQuery.ajax()方法返回的值一直有问题，清除缓存后数据无误，多次&lt;a href=&quot;http://lib.csdn.net/base/softwaretest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;测试&lt;/a&gt;后发现返回的值都是之前的值，并且一直未执行url(后台为&lt;a href=&quot;http://lib.csdn.net/base/javase&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;，设置断点一直未进入)。在网上查找下,发现是未设置type的原因。 如果没设置jQuery.ajax的type=”Post”，那么ajax就会默认type=”Get”，这就会导致之前数据被缓存起来。加上type=”Post”，问题解决！&lt;/p&gt;
&lt;h2 id=&quot;5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;a href=&quot;#5-你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot; class=&quot;headerlink&quot; title=&quot;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&quot;&gt;&lt;/a&gt;5 你知道jquery中的选择器吗，请讲一下有哪些选择器？&lt;/h2&gt;&lt;p&gt;答 ：jQuery中的选择器大致分为:基本选择器，层次选择器，过滤选择器，表单选择器&lt;/p&gt;
&lt;h2 id=&quot;6-jquery中的选择器-和-css中的选择器有区别吗？&quot;&gt;&lt;a href=&quot;#6-jquery中的选择器-和-css中的选择器有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;6 jquery中的选择器 和 css中的选择器有区别吗？&quot;&gt;&lt;/a&gt;6 jquery中的选择器 和 css中的选择器有区别吗？&lt;/h2&gt;&lt;p&gt;答：jQuery选择器支持CSS里的选择器，jQuery选择器可用来添加样式和添加相应的行为CSS 中的选择器是只能添加相应的样式&lt;/p&gt;
&lt;h2 id=&quot;7-你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;a href=&quot;#7-你觉得jquery中的选择器有什么优势？&quot; class=&quot;headerlink&quot; title=&quot;7 你觉得jquery中的选择器有什么优势？&quot;&gt;&lt;/a&gt;7 你觉得jquery中的选择器有什么优势？&lt;/h2&gt;&lt;p&gt;答：简单的写法 $(‘ID’) 来代替 document.getElementById()函数支持CSS1 到&lt;a href=&quot;http://lib.csdn.net/base/css3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS3&lt;/a&gt; 选择器完善的处理机制(就算写错了id也不会报错)&lt;/p&gt;
&lt;h2 id=&quot;8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;a href=&quot;#8-你在使用选择器的时候有有没有什么觉得要注意的地方？&quot; class=&quot;headerlink&quot; title=&quot;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&quot;&gt;&lt;/a&gt;8 你在使用选择器的时候有有没有什么觉得要注意的地方？&lt;/h2&gt;&lt;p&gt;答: 1 选择器中含有”.”,”#”,”[“ 等特殊字符的时候需要进行转译2 属性选择器的引号问题3 选择器中含有空格的注意事项&lt;/p&gt;
&lt;h2 id=&quot;9-jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;a href=&quot;#9-jquery对象和dom对象是怎样转换的？&quot; class=&quot;headerlink&quot; title=&quot;9 jquery对象和dom对象是怎样转换的？&quot;&gt;&lt;/a&gt;9 jquery对象和dom对象是怎样转换的？&lt;/h2&gt;&lt;p&gt;答 ：jquery转DOM对象:jQuery 对象是一个数组对象，可以通过[index]的丰富得到相应的DOM对象还可以通过get[index]去得到相应的DOM对象。DOM对象转jQuery对象:$(DOM对象)&lt;/p&gt;
&lt;h2 id=&quot;10-你是如何使用jquery中的ajax的？&quot;&gt;&lt;a href=&quot;#10-你是如何使用jquery中的ajax的？&quot; class=&quot;headerlink&quot; title=&quot;10 你是如何使用jquery中的ajax的？&quot;&gt;&lt;/a&gt;10 你是如何使用jquery中的ajax的？&lt;/h2&gt;&lt;p&gt;答: 如果是一些常规的ajax程序的话，使用load(),$.get(),$.post(),就可以搞定了，一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理)及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;11-你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;a href=&quot;#11-你觉得jquery中的ajax好用吗，为什么？&quot; class=&quot;headerlink&quot; title=&quot;11 你觉得jquery中的ajax好用吗，为什么？&quot;&gt;&lt;/a&gt;11 你觉得jquery中的ajax好用吗，为什么？&lt;/h2&gt;&lt;p&gt;答: 好用的。 因为jQuery提供了一些日常开发中夙瑶的快捷操作，例 load，ajax，get，post等等，所以使用jQuery开发ajax将变得极其简单，我们就可以集中精力在业务和用户的体验上，不需要去理会那些繁琐的XMLHttpRequest对象了。&lt;/p&gt;
&lt;h2 id=&quot;12-jquery中-get-提交和-post-提交有区别吗？&quot;&gt;&lt;a href=&quot;#12-jquery中-get-提交和-post-提交有区别吗？&quot; class=&quot;headerlink&quot; title=&quot;12 jquery中$.get()提交和$.post()提交有区别吗？&quot;&gt;&lt;/a&gt;12 jquery中$.get()提交和$.post()提交有区别吗？&lt;/h2&gt;&lt;p&gt;答: 1 $.get() 方法使用GET方法来进行异步请求的。$.post() 方法使用POST方法来进行异步请求的。2 get请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给Web服务器的，这种传递是对用户不可见的。3 get方式传输的数据大小不能超过2KB 而POST要大的多4 GET 方式请求的数据会被浏览器缓存起来，因此有安全问题。&lt;/p&gt;
&lt;h2 id=&quot;13-jquery中的load方法一般怎么用的？&quot;&gt;&lt;a href=&quot;#13-jquery中的load方法一般怎么用的？&quot; class=&quot;headerlink&quot; title=&quot;13 jquery中的load方法一般怎么用的？&quot;&gt;&lt;/a&gt;13 jquery中的load方法一般怎么用的？&lt;/h2&gt;&lt;p&gt;答：load方法一般在 载入远程HTML 代码并插入到DOM中的时候用，通常用来从Web服务器上获取静态的数据文件。如果要传递参数的话，可以使用$.get() 或 $.post()。&lt;/p&gt;
&lt;h2 id=&quot;14-在jquery中你是如何去操作样式的？&quot;&gt;&lt;a href=&quot;#14-在jquery中你是如何去操作样式的？&quot; class=&quot;headerlink&quot; title=&quot;14 在jquery中你是如何去操作样式的？&quot;&gt;&lt;/a&gt;14 在jquery中你是如何去操作样式的？&lt;/h2&gt;&lt;p&gt;答: addClass() 来追加样式 ，removeClass() 来删除样式，toggle() 来切换样式&lt;/p&gt;
&lt;h2 id=&quot;15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;a href=&quot;#15-简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot; class=&quot;headerlink&quot; title=&quot;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&quot;&gt;&lt;/a&gt;15 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件？&lt;/h2&gt;&lt;p&gt;答: 首先去装载文档，在页面家在完毕后，浏览器会通过javascript 为DOM元素添加事件。&lt;/p&gt;
&lt;h2 id=&quot;16-你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;a href=&quot;#16-你使用过jquery中的动画吗，是怎样用的？&quot; class=&quot;headerlink&quot; title=&quot;16 你使用过jquery中的动画吗，是怎样用的？&quot;&gt;&lt;/a&gt;16 你使用过jquery中的动画吗，是怎样用的？&lt;/h2&gt;&lt;p&gt;答:使用过。hide() 和 show() 同时修改多个样式属性。像高度，宽度，不透明度。 fadeIn() 和fadeOut() fadeTo() 只改变不透明度slideUp() 和 slideDown() slideToggle() 只改变高度animate() 属于自定义动画的方法.&lt;/p&gt;
&lt;h2 id=&quot;17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot;&gt;&lt;a href=&quot;#17-你使用过jquery中的插件吗？-答-看个人的实力和经验来回答了。&quot; class=&quot;headerlink&quot; title=&quot;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&quot;&gt;&lt;/a&gt;17 你使用过jquery中的插件吗？ 答:看个人的实力和经验来回答了。&lt;/h2&gt;&lt;h2 id=&quot;18-你一般用什么去提交数据，为什么？&quot;&gt;&lt;a href=&quot;#18-你一般用什么去提交数据，为什么？&quot; class=&quot;headerlink&quot; title=&quot;18 你一般用什么去提交数据，为什么？&quot;&gt;&lt;/a&gt;18 你一般用什么去提交数据，为什么？&lt;/h2&gt;&lt;p&gt;答:一般我会使用的是$.post() 方法。如果需要设定beforeSend(提交前回调函数),error(失败后处理),success(成功后处理及complete(请求完成后处理)回调函数等，这个时候我会使用$.ajax()&lt;/p&gt;
&lt;h2 id=&quot;19-在jquery中引入css有几种方式？&quot;&gt;&lt;a href=&quot;#19-在jquery中引入css有几种方式？&quot; class=&quot;headerlink&quot; title=&quot;19 在jquery中引入css有几种方式？&quot;&gt;&lt;/a&gt;19 在jquery中引入css有几种方式？&lt;/h2&gt;&lt;p&gt;答:四种 行内式，内嵌式，导入式，链接式&lt;/p&gt;
&lt;h2 id=&quot;20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;a href=&quot;#20-你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&quot;&gt;&lt;/a&gt;20 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？&lt;/h2&gt;&lt;p&gt;答:append(),appendTo(),prepend(),prependTo(),after(),insertAfter()，before(),insertBefore() 大致可以分为 内部追加和外部追加append() 表式向每个元素内部追加内容。appendTo()表示 讲所有的元素追加到指定的元素中。例$(A)appendTo(B) 是将A追加到B中下面的方法解释类似。&lt;/p&gt;
&lt;h2 id=&quot;21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;a href=&quot;#21-你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot; class=&quot;headerlink&quot; title=&quot;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&quot;&gt;&lt;/a&gt;21 你使用过包裹节点的方法吗，包裹节点有方法有什么好处？&lt;/h2&gt;&lt;p&gt;答: wrapAll(),wrap(), wrapInner() 需要在文档中插入额外的结构化标记的时候可以使用这些包裹的方法应为它不会帛画原始文档的语义&lt;/p&gt;
&lt;h2 id=&quot;22-jquery中如何来获取或和设置属性？&quot;&gt;&lt;a href=&quot;#22-jquery中如何来获取或和设置属性？&quot; class=&quot;headerlink&quot; title=&quot;22 jquery中如何来获取或和设置属性？&quot;&gt;&lt;/a&gt;22 jquery中如何来获取或和设置属性？&lt;/h2&gt;&lt;p&gt;jQuery中可以用attr()方法来获取和设置元素属性removeAttr() 方法来删除元素属性&lt;/p&gt;
&lt;h2 id=&quot;23-如何来设置和获取HTML-和文本的值？&quot;&gt;&lt;a href=&quot;#23-如何来设置和获取HTML-和文本的值？&quot; class=&quot;headerlink&quot; title=&quot;23 如何来设置和获取HTML 和文本的值？&quot;&gt;&lt;/a&gt;23 如何来设置和获取HTML 和文本的值？&lt;/h2&gt;&lt;p&gt;答：html()方法 类似于innerHTML属性 可以用来读取或者设置某个元素中的HTML内容注意：html() 可以用于xhtml文档 不能用于xml文档text() 类似于innerText属性 可以用来读取或设置某个元素中文本内容。val() 可以用来设置和获取元素的值&lt;/p&gt;
&lt;h2 id=&quot;24-你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;a href=&quot;#24-你jquery中有哪些方法可以遍历节点？&quot; class=&quot;headerlink&quot; title=&quot;24 你jquery中有哪些方法可以遍历节点？&quot;&gt;&lt;/a&gt;24 你jquery中有哪些方法可以遍历节点？&lt;/h2&gt;&lt;p&gt;答 ：children() 取得匹配元素的子元素集合,只考虑子元素不考虑后代元素 next() 取得匹配元素后面紧邻的同辈元素prev() 取得匹配元素前面紧邻的同辈元素siblings() 取得匹配元素前后的所有同辈元素closest() 取得最近的匹配元素find() 取得匹配元素中的元素集合 包括子代和后代&lt;/p&gt;
&lt;h2 id=&quot;25-子元素选择器-和后代选择器元素有什么区别？&quot;&gt;&lt;a href=&quot;#25-子元素选择器-和后代选择器元素有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;25 子元素选择器 和后代选择器元素有什么区别？&quot;&gt;&lt;/a&gt;25 子元素选择器 和后代选择器元素有什么区别？&lt;/h2&gt;&lt;p&gt;答:子代元素是找子节点下的所有元素,后代元素是找子节点或子节点的子节点中的元素&lt;/p&gt;
&lt;h2 id=&quot;26-在jquery中可以替换节点吗？&quot;&gt;&lt;a href=&quot;#26-在jquery中可以替换节点吗？&quot; class=&quot;headerlink&quot; title=&quot;26 在jquery中可以替换节点吗？&quot;&gt;&lt;/a&gt;26 在jquery中可以替换节点吗？&lt;/h2&gt;&lt;p&gt;答：可以 在jQuery中有两者替换节点的方式 replaceWith() 和 replaceAll()例如在&lt;/p&gt;&lt;p title=&quot;hao are you&quot;&gt;hao are you&lt;/p&gt;替换成&lt;strong&gt;I am fine&lt;/strong&gt;$(‘p’).replaceWith(‘&lt;strong&gt;I am fine&lt;/strong&gt;‘); replaceAll 与replaceWith的用法前后调换一下即可。&lt;em&gt;**&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;27-你觉得beforeSend方法有什么用？&quot;&gt;&lt;a href=&quot;#27-你觉得beforeSend方法有什么用？&quot; class=&quot;headerlink&quot; title=&quot;27 你觉得beforeSend方法有什么用？&quot;&gt;&lt;/a&gt;27 你觉得beforeSend方法有什么用？&lt;/h2&gt;&lt;p&gt;答：发送请求前可以修改XMLHttpRequest对象的函数，在beforeSend中如果返回false 可以取消本次的Ajax请求。XMLHttpRequest对象是唯一的参数所以在这个方法里可以做验证&lt;/p&gt;
&lt;h2 id=&quot;28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot;&gt;&lt;a href=&quot;#28-siblings-方法-和-‘prev-div’-选择器是一样的嘛？&quot; class=&quot;headerlink&quot; title=&quot;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&quot;&gt;&lt;/a&gt;28 siblings() 方法 和 $(‘prev~div’)选择器是一样的嘛？&lt;/h2&gt;&lt;p&gt;答: $(‘prev~div’) 只能选择’#prev’元素后面的同辈&lt;div&gt;元素而siblings()方法与前后的文职无关，只要是同辈节点就都能匹配。&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;29-你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;a href=&quot;#29-你在ajax中使用过JSON吗，你是如何用的？&quot; class=&quot;headerlink&quot; title=&quot;29 你在ajax中使用过JSON吗，你是如何用的？&quot;&gt;&lt;/a&gt;29 你在ajax中使用过JSON吗，你是如何用的？&lt;/h2&gt;&lt;p&gt;答:使用过，在$.getJSON() 方法的时候就是。因为 $.getJSON() 就是用于加载JSON文件的&lt;/p&gt;
&lt;h2 id=&quot;30-有哪些查询节点的选择器？&quot;&gt;&lt;a href=&quot;#30-有哪些查询节点的选择器？&quot; class=&quot;headerlink&quot; title=&quot;30 有哪些查询节点的选择器？&quot;&gt;&lt;/a&gt;30 有哪些查询节点的选择器？&lt;/h2&gt;&lt;p&gt;答：我在公司使用过 :first 查询第一个，:last 查询最后一个，:odd查询奇数但是索引从0开始:even 查询偶数，:eq(index)查询相等的 ,:gt(index)查询大于index的 ,:lt查询小于index:header 选取所有的标题等&lt;/p&gt;
&lt;h2 id=&quot;31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot;&gt;&lt;a href=&quot;#31-nextAll-能-替代-‘prev-siblindgs’-选择器吗？&quot; class=&quot;headerlink&quot; title=&quot;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&quot;&gt;&lt;/a&gt;31 nextAll() 能 替代$(‘prev~siblindgs’)选择器吗？&lt;/h2&gt;&lt;p&gt;答:能。 使用nextAll() 和使用$(‘prev~siblindgs’) 是一样的&lt;/p&gt;
&lt;h2 id=&quot;32-jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;a href=&quot;#32-jQuery中有几种方法可以来设置和获取样式&quot; class=&quot;headerlink&quot; title=&quot;32 jQuery中有几种方法可以来设置和获取样式&quot;&gt;&lt;/a&gt;32 jQuery中有几种方法可以来设置和获取样式&lt;/h2&gt;&lt;p&gt;答 ：addClass() 方法，attr() 方法&lt;/p&gt;
&lt;h2 id=&quot;33-document-ready-方法和window-onload有什么区别？&quot;&gt;&lt;a href=&quot;#33-document-ready-方法和window-onload有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;33 $(document).ready()方法和window.onload有什么区别？&quot;&gt;&lt;/a&gt;33 $(document).ready()方法和window.onload有什么区别？&lt;/h2&gt;&lt;p&gt;答: 两个方法有相似的功能，但是在实行时机方面是有区别的。 1window.onload方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。2 $(document).ready() 方法可以在DOM载入就绪时就对其进行操纵，并调用执行绑定的函数。&lt;/p&gt;
&lt;h2 id=&quot;34-jQuery是如何处理缓存的？&quot;&gt;&lt;a href=&quot;#34-jQuery是如何处理缓存的？&quot; class=&quot;headerlink&quot; title=&quot;34 jQuery是如何处理缓存的？&quot;&gt;&lt;/a&gt;34 jQuery是如何处理缓存的？&lt;/h2&gt;&lt;p&gt;答 ：要处理缓存就是禁用缓存.1 通过$.post() 方法来获取数据，那么默认就是禁用缓存的。2 通过$.get()方法 来获取数据，可以通过设置时间戳来避免缓存。可以在URL后面加上+(+new Date)例 $.get(‘ajax.xml?’+(+new Date),function () { //内容 }); 3 通过$.ajax 方法来获取数据，只要设置cache:false即可。&lt;/p&gt;
&lt;h2 id=&quot;35-getScript-方法-和-getJson-方法有什么区别？&quot;&gt;&lt;a href=&quot;#35-getScript-方法-和-getJson-方法有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&quot;&gt;&lt;/a&gt;35 $.getScript()方法 和 $.getJson() 方法有什么区别？&lt;/h2&gt;&lt;p&gt;答: 1 $.getScript() 方法可以直接加载.js文件，并且不需要对javascript文件进行处理，javascript文件会自动执行。2 $.getJson() 是用于加载JSON 文件的 ，用法和$.getScript()&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTML-amp-CSS&quot;&gt;&lt;a href=&quot;#HTML-amp-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML&amp;amp;CSS&quot;&gt;&lt;/a&gt;HTML&amp;amp;CSS&lt;/h1&gt;&lt;h2 id=&quot;常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot;&gt;&lt;a href=&quot;#常见的行内元素与块级元素都有哪些，分别举例-，并说一说区别5&quot; class=&quot;headerlink&quot; title=&quot;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&quot;&gt;&lt;/a&gt;常见的行内元素与块级元素都有哪些，分别举例 ，并说一说区别5%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;行内元素(inline)：a b span input select strong samll&lt;/li&gt;
&lt;li&gt;块级元素(block)：p div ul ol li dl dt dd h1 table form center&lt;/li&gt;
&lt;li&gt;行内块级元素(inline-block):img（可以设置宽高，多个元素占一行，可设置所有margin和padding）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见的空元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;br/&amp;gt; &amp;lt;hr/&amp;gt;  &amp;lt;link/&amp;gt; &amp;lt;meta/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;行内元素与块级元素的区别：&lt;/li&gt;
&lt;li&gt;行内元素一行占好多个，块级元素独占一行&lt;/li&gt;
&lt;li&gt;设置宽度width ,height 无效，可以通过line-height来设置。&lt;/li&gt;
&lt;li&gt;设置左右margin/padding有效，上下margin/padding无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;margin&quot;&gt;&lt;a href=&quot;#margin&quot; class=&quot;headerlink&quot; title=&quot;margin&quot;&gt;&lt;/a&gt;margin&lt;/h2&gt;&lt;p&gt;margin :上   右   下   左&lt;br&gt;margin: 上  右  下&lt;br&gt;margin : 上下  左右&lt;/p&gt;
&lt;h2 id=&quot;居中的常见方法-水平，竖直-5&quot;&gt;&lt;a href=&quot;#居中的常见方法-水平，竖直-5&quot; class=&quot;headerlink&quot; title=&quot;居中的常见方法(水平，竖直) 5%&quot;&gt;&lt;/a&gt;居中的常见方法(水平，竖直) 5%&lt;/h2&gt;&lt;h3 id=&quot;1-水平居中&quot;&gt;&lt;a href=&quot;#1-水平居中&quot; class=&quot;headerlink&quot; title=&quot;1.水平居中&quot;&gt;&lt;/a&gt;1.水平居中&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;自身宽高，块级元素&lt;/li&gt;
&lt;li&gt;margin：0 auto; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin: 0 auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-水平居中-父元素-text-align：center；&quot;&gt;&lt;a href=&quot;#2-水平居中-父元素-text-align：center；&quot; class=&quot;headerlink&quot; title=&quot;2.水平居中 父元素 text-align：center；&quot;&gt;&lt;/a&gt;2.水平居中 父元素 text-align：center；&lt;/h3&gt;&lt;p&gt;子元素的display：inline-block；在不受float影响下进行&lt;br&gt;是在父元素上添加：text-align：center；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    border: 3px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;水平垂直居中（一）&quot;&gt;&lt;a href=&quot;#水平垂直居中（一）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（一）&quot;&gt;&lt;/a&gt;水平垂直居中（一）&lt;/h4&gt;&lt;p&gt; 自身宽高,position,left,top ,margin-left,top为自身宽高负值一半&lt;br&gt;(left,top,right,bottom使用要，在position ：relative/absolute)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-top: -75px;/*自身 高度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    margin-left: -50px;/*自身 宽度的一半 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;a href=&quot;#水平垂直居中（三）绝对定位和transfrom&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（三）绝对定位和transfrom&quot;&gt;&lt;/a&gt;水平垂直居中（三）绝对定位和transfrom&lt;/h3&gt;&lt;p&gt;不需要知道居中元素的宽高&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        left: 50%;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform: translate(-50%,-50%);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（二）&quot;&gt;&lt;a href=&quot;#水平垂直居中（二）&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（二）&quot;&gt;&lt;/a&gt;水平垂直居中（二）&lt;/h3&gt;&lt;p&gt;自身宽高，position,定位上下左右为0，margin:atuo（auto等分其余空间）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       position: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       top: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       left: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       right: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bottom: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       margin: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;a href=&quot;#水平垂直居中（四）diplay：table-cell&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（四）diplay：table-cell&quot;&gt;&lt;/a&gt;水平垂直居中（四）diplay：table-cell&lt;/h3&gt;&lt;p&gt;其实这个就是把其变成表格样式，再利用表格的样式来进行居中，很方便&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: table-cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vertical-align: middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            text-align: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            /*margin: 0 auto;*/  这个也行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;a href=&quot;#水平垂直居中（五）flexBox居中&quot; class=&quot;headerlink&quot; title=&quot;水平垂直居中（五）flexBox居中&quot;&gt;&lt;/a&gt;水平垂直居中（五）flexBox居中&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.box&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 300px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background:#e9dfc7; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            border:1px solid red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            display: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            justify-content: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            align-items:center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        img&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: 150px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: 100px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/a7552ce07c88&quot;&gt;http://www.jianshu.com/p/a7552ce07c88&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;常见的垂直居中的方式&quot;&gt;&lt;a href=&quot;#常见的垂直居中的方式&quot; class=&quot;headerlink&quot; title=&quot;常见的垂直居中的方式&quot;&gt;&lt;/a&gt;常见的垂直居中的方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vertical-align:middle(table)&lt;/li&gt;
&lt;li&gt;translateY(-50%)&lt;br&gt;-webkit-transform: translateY(-50%);&lt;/li&gt;
&lt;li&gt;css3 flex&lt;br&gt;不定宽高水平垂直居中&lt;br&gt;align-items:center;//子元素垂直居中&lt;br&gt;justify-content:center;//子元素水平居中&lt;br&gt;display:-webkit-flex;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;a href=&quot;#如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot; class=&quot;headerlink&quot; title=&quot;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&quot;&gt;&lt;/a&gt;如何让几行文本垂直居中？如何让一行文本进行垂直居中？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一行文本垂直居中：height = line-height&lt;/li&gt;
&lt;li&gt;多行文本固定高度垂直居中：vertical-align（兼容IE7及IE7）&lt;br&gt;因为想使用vertical-align:middle，就要模拟表格：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父元素:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display:table-cell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vertical-align:middle;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;多行文本垂直居中：vertical-align+（兼容IE6以上）&lt;br&gt;在IE6中对父元素进行定位后，如果再对子元素进行百分比计算时，计算的基础似乎是有继承性的（使用百分比计算的基础将不再是该元素的高度，而从父元素继承来的定位高度）。&lt;br&gt;父亲元素的外层： display:table;&lt;br&gt;父亲：top:50%&lt;br&gt;孩子：top:-50%&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.wrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow:hidden;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;父亲元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subwrap&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vertical-align:middle;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display:table-cell;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:absolute;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子元素 ：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.content&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    position:relative;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top:-50%;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;flex弹性布局：&quot;&gt;&lt;a href=&quot;#flex弹性布局：&quot; class=&quot;headerlink&quot; title=&quot;flex弹性布局：&quot;&gt;&lt;/a&gt;flex弹性布局：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;flex布局好处？不需要再给子元素设置定位，使用flex属性就可以让浏览器自己计算位置&lt;/li&gt;
&lt;li&gt;父块元素：display: flex;&lt;/li&gt;
&lt;li&gt;父行级元素：display: inline-flex;&lt;/li&gt;
&lt;li&gt;设置了flex布局后，子元素的float、clear和vertical-align属性就会失效&lt;/li&gt;
&lt;li&gt;具体描述：&lt;br&gt;设置了 flex的父亲成为：flex容器，孩子成为flex项目&lt;ul&gt;
&lt;li&gt;父亲容器属性：&lt;ul&gt;
&lt;li&gt;flex-direction(孩子横向还是竖向)：row(孩子水平)| row-reverse | column(孩子竖直) | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap(孩子换行)：nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li&gt;justify-content（孩子对齐方式）: flex-start | flex-end | center | space-between | space-around;&lt;/li&gt;
&lt;li&gt;align-items: stretch|center|flex-start|flex-end|baseline|initial|inherit;&lt;/li&gt;
&lt;li&gt;孩子項目屬性：&lt;ul&gt;
&lt;li&gt;order ：属性定义项目的排列顺序。数值越小，排列越靠前，默认为0&lt;/li&gt;
&lt;li&gt;flex-grow：设置或检索弹性盒的扩展比率。根据弹性盒子元素所设值作为比率来分配剩余空间。&lt;/li&gt;
&lt;li&gt;flex-shrink：属性定义了项目的缩小比例，默认为1，如果没有显示定义该属性，将会自动按照默认值1在所有因子相加之后计算比率来进行空间收缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;flex-basis：设置或检索弹性盒伸缩基准值，如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间。&lt;ul&gt;
&lt;li&gt;align-self：属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【问题】：&lt;br&gt;flex弹性盒模型，主轴有几个方向？后代 flex：1代表什么？&lt;/p&gt;
&lt;p&gt;【答案】：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex 是 flex-grow、flex-shrink、flex-basis的缩写。故其取值可以考虑以下情况：&lt;/li&gt;
&lt;li&gt;flex 的默认值是 0 1 auto&lt;/li&gt;
&lt;li&gt;flex : none，则计算值为 0 0 auto&lt;/li&gt;
&lt;li&gt;flex : auto，则计算值为 1 1 auto&lt;/li&gt;
&lt;li&gt;flex :非负值，则该数字为 flex-grow 值，flex-shrink 取 1，flex-basis 取 0%&lt;/li&gt;
&lt;li&gt;flex 长度或百分比，则视为 flex-basis 值，flex-grow 取 1，flex-shrink 取 1&lt;/li&gt;
&lt;li&gt;flex : 非负值　非负值，则分别视为 flex-grow 和 flex-shrink 的值，flex-basis 取 0%，如下是等同的：&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;浮动&quot;&gt;&lt;a href=&quot;#浮动&quot; class=&quot;headerlink&quot; title=&quot;浮动&quot;&gt;&lt;/a&gt;浮动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;浮动元素会脱离文档流并向左/向右浮动（不在正常位置，并且他后面的不浮动元素会占他的位置），浮动直到碰到父元素或者另一个浮动元素。&lt;/li&gt;
&lt;li&gt;浮动不会影响同级别普通元素的布局，同时也存在盖住普通元素的风险。&lt;/li&gt;
&lt;li&gt;clear属性不允许被清除浮动的元素的左边/右边挨着浮动元素，底层原理是在被清除浮动的元素上边或者下边添加足够的清除空间。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-a0f4eff0c7cd5c66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot;&gt;&lt;a href=&quot;#说一下为什么要清除浮动以及常见的清除浮动的方法-4&quot; class=&quot;headerlink&quot; title=&quot;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&quot;&gt;&lt;/a&gt;说一下为什么要清除浮动以及常见的清除浮动的方法 4%&lt;/h2&gt;&lt;p&gt;当一个内层元素是浮动的时候，如果没有关闭浮动时，其父元素也就不会再包含这个浮动的内层元素，因为此时浮动元素已经脱离了文档流。也就是为什么外层不能被撑开了！&lt;br&gt;（2）：边框不能撑开 （3）：margin ,padding设置值不能正确显示（1）：背景不能显示&lt;/p&gt;
&lt;h3 id=&quot;方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot;&gt;&lt;a href=&quot;#方法一：在被清除浮动元素内部末尾添加新元素-、应用-clear：both&quot; class=&quot;headerlink&quot; title=&quot;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&quot;&gt;&lt;/a&gt;方法一：在被清除浮动元素内部末尾添加新元素 、应用 clear：both&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div class=&amp;quot;outer&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div1&amp;quot;&amp;gt;1&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div2&amp;quot;&amp;gt;2&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;div3&amp;quot;&amp;gt;3&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clear&amp;#123;clear:both; height: 0; line-height: 0; font-size: 0&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二：触发BFC&quot;&gt;&lt;a href=&quot;#方法二：触发BFC&quot; class=&quot;headerlink&quot; title=&quot;方法二：触发BFC&quot;&gt;&lt;/a&gt;方法二：触发BFC&lt;/h3&gt;&lt;p&gt;父级div定义 overflow: hidden（hidden可以兼容IE，就是对seo不太友好,auto不可以兼容IE）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;父亲 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.over-flow&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overflow: hidden; // 是在处理兼容性问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;###方法三： clearfix:before,after&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 全浏览器通用的clearfix方案【推荐】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 同时加入:before以解决现代浏览器上边距折叠的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:before,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display: table;//block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &amp;quot; &amp;quot;;// &amp;apos;.&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.clearfix&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *zoom: 1;//引入了zoom以支持IE6/7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/leipeng/blog/221125&quot;&gt;https://my.oschina.net/leipeng/blog/221125&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/5138706046b1&quot;&gt;http://www.jianshu.com/p/5138706046b1&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/09bd5873bed4&quot;&gt;http://www.jianshu.com/p/09bd5873bed4&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;BFC&quot;&gt;&lt;a href=&quot;#BFC&quot; class=&quot;headerlink&quot; title=&quot;BFC&quot;&gt;&lt;/a&gt;BFC&lt;/h2&gt;&lt;p&gt;BFC可以做:BFC清除浮动，BFC解决垂直边距折叠&lt;br&gt;BFC全称是块状格式化上下文，它是按照块级盒子布局的。我们了解他的特征、触发方式、常见使用场景这些就够了。&lt;/p&gt;
&lt;p&gt;BFC的主要特征&lt;/p&gt;
&lt;p&gt;✦ BFC容器是一个隔离的容器，和其他元素互不干扰；所以我们可以用触发两个元素的BFC来解决垂直边距折叠问题。&lt;br&gt;✦ BFC可以包含浮动；通常用来解决浮动父元素高度坍塌的问题。&lt;/p&gt;
&lt;p&gt;其中，BFC清除浮动就是用的“包含浮动”这条特性。&lt;br&gt;那么，怎样才能触发BFC呢？&lt;/p&gt;
&lt;p&gt;BFC的触发方式&lt;/p&gt;
&lt;p&gt;我们可以给父元素添加以下属性来触发BFC(一下任意一条就可以)：&lt;br&gt;✦ float 为 left | right(不为none)&lt;br&gt;✦ overflow 为 hidden | auto | scorll(不为visible   )&lt;br&gt;✦ display 为 table-cell | table-caption | inline-block | flex | inline-flex&lt;br&gt;✦ position 为 absolute | fixed&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;a href=&quot;#介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot; class=&quot;headerlink&quot; title=&quot;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;&gt;&lt;/a&gt;介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&lt;/h2&gt;&lt;p&gt;每个HTML元素都是长方形盒子。&lt;br&gt;  （1）有两种， IE 盒子模型、W3C 盒子模型；&lt;br&gt;  （2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；&lt;br&gt;  （3）区  别：&lt;br&gt; 标准盒模型的width为内容区的width，盒子总宽度：width+padding+border+margin&lt;br&gt; IE的width是内容区宽度+padding+border，盒子总宽度：width+margin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-2fc97e71155223a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-502ce3aaecc4b38b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;position-的几种值-，详细说明一下每种的区别-3&quot;&gt;&lt;a href=&quot;#position-的几种值-，详细说明一下每种的区别-3&quot; class=&quot;headerlink&quot; title=&quot;position 的几种值 ，详细说明一下每种的区别 3%&quot;&gt;&lt;/a&gt;position 的几种值 ，详细说明一下每种的区别 3%&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;static    默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。&lt;/li&gt;
&lt;li&gt;relative    位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。&lt;/li&gt;
&lt;li&gt;absolute    位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。&lt;/li&gt;
&lt;li&gt;fixed    位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;a href=&quot;#如果position设置成absolute属性该元素的display属性会变成什么&quot; class=&quot;headerlink&quot; title=&quot;如果position设置成absolute属性该元素的display属性会变成什么&quot;&gt;&lt;/a&gt;如果position设置成absolute属性该元素的display属性会变成什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;position: absolute,float会隐式的改变display类型， 不论之前是什么类型的元素（ display: none除外），&lt;ul&gt;
&lt;li&gt;只要设置了position: absolute或float， 都会让元素以display: inline - block的方式显示， 可以设置长宽，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;就算是显示的设置display: inline或display: block， 仍然无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;display-有几个值-3&quot;&gt;&lt;a href=&quot;#display-有几个值-3&quot; class=&quot;headerlink&quot; title=&quot;display 有几个值  3%&quot;&gt;&lt;/a&gt;display 有几个值  3%&lt;/h2&gt;&lt;p&gt;每个元素都有display属性，确定该元素的类型，&lt;br&gt;每个元素都有默认的display值，&lt;br&gt;如div的display默认值为“block”，则为“块级”元素；&lt;br&gt;span默认display属性值为“inline”，是“行内”元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-0a9d9c4eb7fc996e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;伪类-伪元素&quot;&gt;&lt;a href=&quot;#伪类-伪元素&quot; class=&quot;headerlink&quot; title=&quot;伪类 伪元素&quot;&gt;&lt;/a&gt;伪类 伪元素&lt;/h2&gt;&lt;p&gt;伪类是给元素模拟添加类 ，来实现某种效果（：）&lt;br&gt;常见伪类：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-394530a71e54ed9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪元素是模拟添加个元素来实现效果（::）(css3出现后做的区分)&lt;br&gt;常见伪元素：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2377897-e655b83124da94d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://web.jobbole.com/86181/&quot;&gt;http://web.jobbole.com/86181/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些？&quot; class=&quot;headerlink&quot; title=&quot;CSS3新增伪类有那些？&quot;&gt;&lt;/a&gt;CSS3新增伪类有那些？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;举例：
  p:first-of-type    选择属于其父元素的首个 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:last-of-type    选择属于其父元素的最后 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-of-type    选择属于其父元素唯一的 &amp;lt;p&amp;gt; 元素的每个 &amp;lt;p&amp;gt; 元素。
  p:only-child        选择属于其父元素的唯一子元素的每个 &amp;lt;p&amp;gt; 元素。
  p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &amp;lt;p&amp;gt; 元素。

 inptut
    :enabled          
   :disabled         控制表单控件的禁用状态。
  :checked        单选框或复选框被选中。
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;a href=&quot;#CSS选择器有哪些？哪些属性可以继承？&quot; class=&quot;headerlink&quot; title=&quot;CSS选择器有哪些？哪些属性可以继承？&quot;&gt;&lt;/a&gt;CSS选择器有哪些？哪些属性可以继承？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; 1.id选择器（ # myid）
2.类选择器（.myclassname）
3.标签选择器（div, h1, p）
4.相邻选择器（h1 + p）
5.子选择器（ul &amp;gt; li）
6.后代选择器（li a）
7.通配符选择器（ * ）
8.属性选择器（a[rel = &amp;quot;external&amp;quot;]）
9.伪类选择器（a:hover, li:nth-child）
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可继承的样式： font-size font-family color, UL LI DL DD DT;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不可继承的样式：border padding margin width height ;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;a href=&quot;#CSS优先级算法如何计算？&quot; class=&quot;headerlink&quot; title=&quot;CSS优先级算法如何计算？&quot;&gt;&lt;/a&gt;CSS优先级算法如何计算？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优先级就近原则，同权重情况下样式定义最近者为准;&lt;/li&gt;
&lt;li&gt;载入样式以最后载入的定位为准;&lt;h3 id=&quot;同权重&quot;&gt;&lt;a href=&quot;#同权重&quot; class=&quot;headerlink&quot; title=&quot;同权重&quot;&gt;&lt;/a&gt;同权重&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、 位于 &amp;lt; head / &amp;gt; 标签里的 &amp;lt; style / &amp;gt; 中所定义的CSS拥有最高级的优先权。　　&lt;/li&gt;
&lt;li&gt;2、 第二级的优先属性由位于 &amp;lt; style / &amp;gt; 标签中的 @import 引入样式表所定义。　　&lt;/li&gt;
&lt;li&gt;3、 第三级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表定义。&lt;/li&gt;
&lt;li&gt;4、 第四级的优先属性由 &amp;lt; link / &amp;gt; 标签所引入的样式表内的 @import 导入样式表定义。　　&lt;/li&gt;
&lt;li&gt;5、 第五级优先的样式有用户设定。　　 最低级的优先权由浏览器默认。 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;权重的进制是256&lt;/p&gt;
&lt;h3 id=&quot;属性选择器的权重问题&quot;&gt;&lt;a href=&quot;#属性选择器的权重问题&quot; class=&quot;headerlink&quot; title=&quot;属性选择器的权重问题:&quot;&gt;&lt;/a&gt;属性选择器的权重问题:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;// !important ---------&amp;gt;   无穷
// 行间样式-------------&amp;gt;   1000
// id------------------&amp;gt;   100
// class|属性|伪类------&amp;gt;   10
// 标签|伪元素 ---------&amp;gt;    1
// 通配符---------------&amp;gt;   0
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;页面导入样式时，使用link和-import有什么区别？&quot;&gt;&lt;a href=&quot;#页面导入样式时，使用link和-import有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;页面导入样式时，使用link和@import有什么区别？&quot;&gt;&lt;/a&gt;页面导入样式时，使用link和@import有什么区别？&lt;/h2&gt;&lt;p&gt;1 : 属于link属于xml 标签，除了加载css以外，还能定义rss和rel等 。@import是css提供的，只能用于加载css&lt;br&gt;2 :页面加载页面在加载时候，link同时被加载；而@import引用的css等页面加载完毕再加载&lt;br&gt;3：兼容性@import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;&lt;br&gt;4：link方式的样式权重高于@import的权重。&lt;br&gt;5：使用dom控制样式时的差别。当使用javascript控制dom去改变样式的时候，只能使用link标签，因为@import不是dom可以控制的。&lt;br&gt;6：. 最后一个很有意思， @import url有最大次数的限制， IE6最多引入31次， firefox并没有发现&lt;br&gt;7： @import的优点： 多个样式表导入一个样式表中， 页面只需要引入一个即可&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;引入css的几种方式-2&quot;&gt;&lt;a href=&quot;#引入css的几种方式-2&quot; class=&quot;headerlink&quot; title=&quot;引入css的几种方式 2%&quot;&gt;&lt;/a&gt;引入css的几种方式 2%&lt;/h2&gt;&lt;h3 id=&quot;1-行内样式&quot;&gt;&lt;a href=&quot;#1-行内样式&quot; class=&quot;headerlink&quot; title=&quot;1.行内样式&quot;&gt;&lt;/a&gt;1.行内样式&lt;/h3&gt;&lt;p&gt;最直接最简单的一种，直接对HTML标签使用style=””，例如：&lt;/p&gt;
&lt;p style=&quot;color:#F00; &quot;&gt;&lt;/p&gt;

&lt;p&gt;缺点：HTML页面不纯净，文件体积大，不利于蜘蛛爬行，后期维护不方便。&lt;/p&gt;
&lt;h3 id=&quot;2-内嵌样式&quot;&gt;&lt;a href=&quot;#2-内嵌样式&quot; class=&quot;headerlink&quot; title=&quot;2.内嵌样式&quot;&gt;&lt;/a&gt;2.内嵌样式&lt;/h3&gt;&lt;p&gt;内嵌样式就是将CSS代码写在&lt;head&gt;&lt;/head&gt;之间，并且用&lt;style&gt;&lt;/style&gt;进行声明，例如：&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;

body,div,a,img,p{margin:0; padding:0;}

&lt;/style&gt;

&lt;p&gt;优缺点：页面使用公共CSS代码，也是每个页面都要定义的，如果一个网站有很多页面，每个文件都会变大，后期维护难度也大，如果文件很少，CSS代码也不多，这种样式还是很不错的。&lt;/p&gt;
&lt;h3 id=&quot;3-链接样式&quot;&gt;&lt;a href=&quot;#3-链接样式&quot; class=&quot;headerlink&quot; title=&quot;3.链接样式&quot;&gt;&lt;/a&gt;3.链接样式&lt;/h3&gt;&lt;p&gt;链接样式是使用频率最高，最实用的样式，只需要在&lt;head&gt;&lt;/head&gt;之间加上&lt;link…/&gt;就可以了，如下：&lt;/p&gt;
&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot; /&gt;

&lt;p&gt;优缺点：实现了页面框架代码与表现CSS代码的完全分离，使得前期制作和后期维护都十分方便&lt;/p&gt;
&lt;h3 id=&quot;4-导入样式（不建议使用）&quot;&gt;&lt;a href=&quot;#4-导入样式（不建议使用）&quot; class=&quot;headerlink&quot; title=&quot;4.导入样式（不建议使用）&quot;&gt;&lt;/a&gt;4.导入样式（不建议使用）&lt;/h3&gt;&lt;p&gt;导入样式和链接样式比较相似，采用@import样式导入CSS样式表，在HTML初始化时，会被导入到HTML或者CSS文件中，成为文件的一部分，类似第二种内嵌样式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@import在html中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&quot;text/css&quot;&gt;
@import url(style.css);
&lt;/style&gt;

&lt;ul&gt;
&lt;li&gt;@import在CSS中使用，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@import url(style.css);&lt;/p&gt;
&lt;h3 id=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;a href=&quot;#四种CSS引入方式的优先级&quot; class=&quot;headerlink&quot; title=&quot;四种CSS引入方式的优先级&quot;&gt;&lt;/a&gt;四种CSS引入方式的优先级&lt;/h3&gt;&lt;p&gt;1.就近原则&lt;br&gt;2.理论上：行内&amp;gt;内嵌&amp;gt;链接&amp;gt;导入&lt;br&gt;3.实际上：内嵌、链接、导入在同一个文件头部，谁离相应的代码近，谁的优先级高&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;锚点-1&quot;&gt;&lt;a href=&quot;#锚点-1&quot; class=&quot;headerlink&quot; title=&quot;锚点 1%&quot;&gt;&lt;/a&gt;锚点 1%&lt;/h2&gt;&lt;p&gt;html 锚点 到底是干吗的？&lt;br&gt;通俗简单地说，比如一篇很长的文章，你想按分段精确来看，那就可以用到锚点了&lt;br&gt;代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&amp;quot;#001&amp;quot;&amp;gt;跳到001&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a name=&amp;quot;001&amp;quot; id=&amp;quot;001&amp;quot; &amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...文字省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(兼容到ie8)&lt;br&gt;其实锚点只需name就可以可，加id是为了让它兼容性更好.&lt;br&gt;href的值要跟name \ i d 一致，前面必须加”#”，以上代码在ie6/7,ff中都可以兼容，但在ie8中就不行。&lt;br&gt;因为我们锚点的&lt;a&gt;&lt;/a&gt;值为空，为不影响美观我们加个空格就行了,&lt;/p&gt;
&lt;p&gt;另一问题，想显示某页面(如：123.html)的某锚点内容呢？ &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
